// Generated by gencpp from file actionlib_modules_msgs/actionlib_control_timerGoal.msg
// DO NOT EDIT!


#ifndef ACTIONLIB_MODULES_MSGS_MESSAGE_ACTIONLIB_CONTROL_TIMERGOAL_H
#define ACTIONLIB_MODULES_MSGS_MESSAGE_ACTIONLIB_CONTROL_TIMERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actionlib_modules_msgs
{
template <class ContainerAllocator>
struct actionlib_control_timerGoal_
{
  typedef actionlib_control_timerGoal_<ContainerAllocator> Type;

  actionlib_control_timerGoal_()
    : time_id()
    , time_set(0)  {
    }
  actionlib_control_timerGoal_(const ContainerAllocator& _alloc)
    : time_id(_alloc)
    , time_set(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_id_type;
  _time_id_type time_id;

   typedef uint8_t _time_set_type;
  _time_set_type time_set;





  typedef boost::shared_ptr< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct actionlib_control_timerGoal_

typedef ::actionlib_modules_msgs::actionlib_control_timerGoal_<std::allocator<void> > actionlib_control_timerGoal;

typedef boost::shared_ptr< ::actionlib_modules_msgs::actionlib_control_timerGoal > actionlib_control_timerGoalPtr;
typedef boost::shared_ptr< ::actionlib_modules_msgs::actionlib_control_timerGoal const> actionlib_control_timerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator1> & lhs, const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.time_id == rhs.time_id &&
    lhs.time_set == rhs.time_set;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator1> & lhs, const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actionlib_modules_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa1b494b199e440e34b9504225f3f39c";
  }

  static const char* value(const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa1b494b199e440eULL;
  static const uint64_t static_value2 = 0x34b9504225f3f39cULL;
};

template<class ContainerAllocator>
struct DataType< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actionlib_modules_msgs/actionlib_control_timerGoal";
  }

  static const char* value(const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"string time_id\n"
"uint8 time_set \n"
;
  }

  static const char* value(const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_id);
      stream.next(m.time_set);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actionlib_control_timerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actionlib_modules_msgs::actionlib_control_timerGoal_<ContainerAllocator>& v)
  {
    s << indent << "time_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time_id);
    s << indent << "time_set: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time_set);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTIONLIB_MODULES_MSGS_MESSAGE_ACTIONLIB_CONTROL_TIMERGOAL_H
