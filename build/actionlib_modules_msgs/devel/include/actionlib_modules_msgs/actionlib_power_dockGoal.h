// Generated by gencpp from file actionlib_modules_msgs/actionlib_power_dockGoal.msg
// DO NOT EDIT!


#ifndef ACTIONLIB_MODULES_MSGS_MESSAGE_ACTIONLIB_POWER_DOCKGOAL_H
#define ACTIONLIB_MODULES_MSGS_MESSAGE_ACTIONLIB_POWER_DOCKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace actionlib_modules_msgs
{
template <class ContainerAllocator>
struct actionlib_power_dockGoal_
{
  typedef actionlib_power_dockGoal_<ContainerAllocator> Type;

  actionlib_power_dockGoal_()
    : call_aclib_name()
    , dock_pose()
    , dock_id()
    , use_move_base(false)
    , post_time(0.0)
    , use_timeout(false)
    , timeout(0.0)  {
    }
  actionlib_power_dockGoal_(const ContainerAllocator& _alloc)
    : call_aclib_name(_alloc)
    , dock_pose(_alloc)
    , dock_id(_alloc)
    , use_move_base(false)
    , post_time(0.0)
    , use_timeout(false)
    , timeout(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _call_aclib_name_type;
  _call_aclib_name_type call_aclib_name;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _dock_pose_type;
  _dock_pose_type dock_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dock_id_type;
  _dock_id_type dock_id;

   typedef uint8_t _use_move_base_type;
  _use_move_base_type use_move_base;

   typedef float _post_time_type;
  _post_time_type post_time;

   typedef uint8_t _use_timeout_type;
  _use_timeout_type use_timeout;

   typedef float _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> const> ConstPtr;

}; // struct actionlib_power_dockGoal_

typedef ::actionlib_modules_msgs::actionlib_power_dockGoal_<std::allocator<void> > actionlib_power_dockGoal;

typedef boost::shared_ptr< ::actionlib_modules_msgs::actionlib_power_dockGoal > actionlib_power_dockGoalPtr;
typedef boost::shared_ptr< ::actionlib_modules_msgs::actionlib_power_dockGoal const> actionlib_power_dockGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator1> & lhs, const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator2> & rhs)
{
  return lhs.call_aclib_name == rhs.call_aclib_name &&
    lhs.dock_pose == rhs.dock_pose &&
    lhs.dock_id == rhs.dock_id &&
    lhs.use_move_base == rhs.use_move_base &&
    lhs.post_time == rhs.post_time &&
    lhs.use_timeout == rhs.use_timeout &&
    lhs.timeout == rhs.timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator1> & lhs, const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actionlib_modules_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c7a95ee383b31fc48324995326aa2f7";
  }

  static const char* value(const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c7a95ee383b31fcULL;
  static const uint64_t static_value2 = 0x48324995326aa2f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actionlib_modules_msgs/actionlib_power_dockGoal";
  }

  static const char* value(const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"string call_aclib_name\n"
"geometry_msgs/PoseStamped dock_pose\n"
"string dock_id\n"
"bool use_move_base\n"
"float32 post_time\n"
"bool use_timeout\n"
"float32 timeout\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.call_aclib_name);
      stream.next(m.dock_pose);
      stream.next(m.dock_id);
      stream.next(m.use_move_base);
      stream.next(m.post_time);
      stream.next(m.use_timeout);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actionlib_power_dockGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actionlib_modules_msgs::actionlib_power_dockGoal_<ContainerAllocator>& v)
  {
    s << indent << "call_aclib_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.call_aclib_name);
    s << indent << "dock_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.dock_pose);
    s << indent << "dock_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dock_id);
    s << indent << "use_move_base: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_move_base);
    s << indent << "post_time: ";
    Printer<float>::stream(s, indent + "  ", v.post_time);
    s << indent << "use_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_timeout);
    s << indent << "timeout: ";
    Printer<float>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTIONLIB_MODULES_MSGS_MESSAGE_ACTIONLIB_POWER_DOCKGOAL_H
