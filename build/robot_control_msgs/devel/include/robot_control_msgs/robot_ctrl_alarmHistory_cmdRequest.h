// Generated by gencpp from file robot_control_msgs/robot_ctrl_alarmHistory_cmdRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ALARMHISTORY_CMDREQUEST_H
#define ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ALARMHISTORY_CMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_control_msgs/robot_ctrl_alarmHistory.h>

namespace robot_control_msgs
{
template <class ContainerAllocator>
struct robot_ctrl_alarmHistory_cmdRequest_
{
  typedef robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> Type;

  robot_ctrl_alarmHistory_cmdRequest_()
    : cmd_id(0)
    , index_name()
    , parameter()
    , rec_alarmHistory()  {
    }
  robot_ctrl_alarmHistory_cmdRequest_(const ContainerAllocator& _alloc)
    : cmd_id(0)
    , index_name(_alloc)
    , parameter(_alloc)
    , rec_alarmHistory(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _cmd_id_type;
  _cmd_id_type cmd_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _index_name_type;
  _index_name_type index_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameter_type;
  _parameter_type parameter;

   typedef  ::robot_control_msgs::robot_ctrl_alarmHistory_<ContainerAllocator>  _rec_alarmHistory_type;
  _rec_alarmHistory_type rec_alarmHistory;





  typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct robot_ctrl_alarmHistory_cmdRequest_

typedef ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<std::allocator<void> > robot_ctrl_alarmHistory_cmdRequest;

typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest > robot_ctrl_alarmHistory_cmdRequestPtr;
typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest const> robot_ctrl_alarmHistory_cmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator1> & lhs, const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_id == rhs.cmd_id &&
    lhs.index_name == rhs.index_name &&
    lhs.parameter == rhs.parameter &&
    lhs.rec_alarmHistory == rhs.rec_alarmHistory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator1> & lhs, const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5609abec73018e19ab7fff3a28295a6a";
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5609abec73018e19ULL;
  static const uint64_t static_value2 = 0xab7fff3a28295a6aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control_msgs/robot_ctrl_alarmHistory_cmdRequest";
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 cmd_id	        # 1:Add , 2:modify 3:delete 4:requery 		\n"
"string index_name \n"
"string parameter 	\n"
"robot_ctrl_alarmHistory rec_alarmHistory	 \n"
"\n"
"================================================================================\n"
"MSG: robot_control_msgs/robot_ctrl_alarmHistory\n"
"string system_id \n"
"string alarm_id 			# module_no(3) + module alarm code(3)	\n"
"string alarm_code 			# same as alarm_id,preper for special requirement\n"
"string alarm_level 			# level of ararm: 1:alart 2:alarm	\n"
"string alarm_occure_time 	# occure time of alarm\n"
"string update_time \n"
;
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_id);
      stream.next(m.index_name);
      stream.next(m.parameter);
      stream.next(m.rec_alarmHistory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_ctrl_alarmHistory_cmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control_msgs::robot_ctrl_alarmHistory_cmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd_id);
    s << indent << "index_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.index_name);
    s << indent << "parameter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter);
    s << indent << "rec_alarmHistory: ";
    s << std::endl;
    Printer< ::robot_control_msgs::robot_ctrl_alarmHistory_<ContainerAllocator> >::stream(s, indent + "  ", v.rec_alarmHistory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ALARMHISTORY_CMDREQUEST_H
