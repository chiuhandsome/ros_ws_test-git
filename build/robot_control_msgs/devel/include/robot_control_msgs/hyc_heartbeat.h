// Generated by gencpp from file robot_control_msgs/hyc_heartbeat.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MSGS_MESSAGE_HYC_HEARTBEAT_H
#define ROBOT_CONTROL_MSGS_MESSAGE_HYC_HEARTBEAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control_msgs
{
template <class ContainerAllocator>
struct hyc_heartbeat_
{
  typedef hyc_heartbeat_<ContainerAllocator> Type;

  hyc_heartbeat_()
    : hb_status(0)
    , hb_stamp(0)  {
    }
  hyc_heartbeat_(const ContainerAllocator& _alloc)
    : hb_status(0)
    , hb_stamp(0)  {
  (void)_alloc;
    }



   typedef int8_t _hb_status_type;
  _hb_status_type hb_status;

   typedef int16_t _hb_stamp_type;
  _hb_stamp_type hb_stamp;





  typedef boost::shared_ptr< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> const> ConstPtr;

}; // struct hyc_heartbeat_

typedef ::robot_control_msgs::hyc_heartbeat_<std::allocator<void> > hyc_heartbeat;

typedef boost::shared_ptr< ::robot_control_msgs::hyc_heartbeat > hyc_heartbeatPtr;
typedef boost::shared_ptr< ::robot_control_msgs::hyc_heartbeat const> hyc_heartbeatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator1> & lhs, const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator2> & rhs)
{
  return lhs.hb_status == rhs.hb_status &&
    lhs.hb_stamp == rhs.hb_stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator1> & lhs, const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df9efe1397ef4d3891140ed1e523817f";
  }

  static const char* value(const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf9efe1397ef4d38ULL;
  static const uint64_t static_value2 = 0x91140ed1e523817fULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control_msgs/hyc_heartbeat";
  }

  static const char* value(const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#################################################################\n"
"## heart_beat message\n"
"#################################################################\n"
"int8 hb_status\n"
"int16 hb_stamp\n"
;
  }

  static const char* value(const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hb_status);
      stream.next(m.hb_stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hyc_heartbeat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control_msgs::hyc_heartbeat_<ContainerAllocator>& v)
  {
    s << indent << "hb_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.hb_status);
    s << indent << "hb_stamp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hb_stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MSGS_MESSAGE_HYC_HEARTBEAT_H
