// Generated by gencpp from file robot_control_msgs/hyc_RobotInfo.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MSGS_MESSAGE_HYC_ROBOTINFO_H
#define ROBOT_CONTROL_MSGS_MESSAGE_HYC_ROBOTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovariance.h>

namespace robot_control_msgs
{
template <class ContainerAllocator>
struct hyc_RobotInfo_
{
  typedef hyc_RobotInfo_<ContainerAllocator> Type;

  hyc_RobotInfo_()
    : header()
    , robot_name()
    , pose()
    , current_route_segment(0)
    , shape(0)
    , shape_variables()
    , handler_type(0)
    , battery_id()
    , battery_capacity(0.0)
    , battery_chargetime(0)
    , battery_servicetime(0)
    , mode(0)
    , status(0)
    , error_code()
    , good_id(0)
    , order_id(0)
    , order_status(0)  {
    }
  hyc_RobotInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , robot_name(_alloc)
    , pose(_alloc)
    , current_route_segment(0)
    , shape(0)
    , shape_variables(_alloc)
    , handler_type(0)
    , battery_id(_alloc)
    , battery_capacity(0.0)
    , battery_chargetime(0)
    , battery_servicetime(0)
    , mode(0)
    , status(0)
    , error_code(_alloc)
    , good_id(0)
    , order_id(0)
    , order_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef int32_t _current_route_segment_type;
  _current_route_segment_type current_route_segment;

   typedef int32_t _shape_type;
  _shape_type shape;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _shape_variables_type;
  _shape_variables_type shape_variables;

   typedef int32_t _handler_type_type;
  _handler_type_type handler_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _battery_id_type;
  _battery_id_type battery_id;

   typedef float _battery_capacity_type;
  _battery_capacity_type battery_capacity;

   typedef int32_t _battery_chargetime_type;
  _battery_chargetime_type battery_chargetime;

   typedef int32_t _battery_servicetime_type;
  _battery_servicetime_type battery_servicetime;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_code_type;
  _error_code_type error_code;

   typedef int32_t _good_id_type;
  _good_id_type good_id;

   typedef int32_t _order_id_type;
  _order_id_type order_id;

   typedef int32_t _order_status_type;
  _order_status_type order_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SHAPE_CIRCLE)
  #undef SHAPE_CIRCLE
#endif
#if defined(_WIN32) && defined(HANDLERTYPE_NA)
  #undef HANDLERTYPE_NA
#endif
#if defined(_WIN32) && defined(HANDLERTYPE_ROLLER)
  #undef HANDLERTYPE_ROLLER
#endif
#if defined(_WIN32) && defined(HANDLERTYPE_ARM)
  #undef HANDLERTYPE_ARM
#endif
#if defined(_WIN32) && defined(HANDLERTYPE_PNP)
  #undef HANDLERTYPE_PNP
#endif
#if defined(_WIN32) && defined(MODE_NA)
  #undef MODE_NA
#endif
#if defined(_WIN32) && defined(MODE_IDLE)
  #undef MODE_IDLE
#endif
#if defined(_WIN32) && defined(MODE_SEGMENT_FOLLOWING)
  #undef MODE_SEGMENT_FOLLOWING
#endif
#if defined(_WIN32) && defined(MODE_PICKUP)
  #undef MODE_PICKUP
#endif
#if defined(_WIN32) && defined(STATUS_NONE)
  #undef STATUS_NONE
#endif
#if defined(_WIN32) && defined(STATUS_DRIVING)
  #undef STATUS_DRIVING
#endif
#if defined(_WIN32) && defined(STATUS_STOPPED)
  #undef STATUS_STOPPED
#endif
#if defined(_WIN32) && defined(STATUS_DONE)
  #undef STATUS_DONE
#endif
#if defined(_WIN32) && defined(STATUS_BROKEN)
  #undef STATUS_BROKEN
#endif
#if defined(_WIN32) && defined(GOOD_EMPTY)
  #undef GOOD_EMPTY
#endif
#if defined(_WIN32) && defined(GOOD_NA)
  #undef GOOD_NA
#endif
#if defined(_WIN32) && defined(ORDER_NONE)
  #undef ORDER_NONE
#endif
#if defined(_WIN32) && defined(ORDER_APPROACH)
  #undef ORDER_APPROACH
#endif
#if defined(_WIN32) && defined(ORDER_PICKUP)
  #undef ORDER_PICKUP
#endif
#if defined(_WIN32) && defined(ORDER_TRANSPORT)
  #undef ORDER_TRANSPORT
#endif
#if defined(_WIN32) && defined(ORDER_DROP)
  #undef ORDER_DROP
#endif
#if defined(_WIN32) && defined(ORDER_FINSIH)
  #undef ORDER_FINSIH
#endif

  enum {
    SHAPE_CIRCLE = 0,
    HANDLERTYPE_NA = 0,
    HANDLERTYPE_ROLLER = 1,
    HANDLERTYPE_ARM = 2,
    HANDLERTYPE_PNP = 3,
    MODE_NA = 0,
    MODE_IDLE = 1,
    MODE_SEGMENT_FOLLOWING = 2,
    MODE_PICKUP = 3,
    STATUS_NONE = -1,
    STATUS_DRIVING = 0,
    STATUS_STOPPED = 1,
    STATUS_DONE = 2,
    STATUS_BROKEN = 3,
    GOOD_EMPTY = -1,
    GOOD_NA = -2,
    ORDER_NONE = 0,
    ORDER_APPROACH = 1,
    ORDER_PICKUP = 2,
    ORDER_TRANSPORT = 3,
    ORDER_DROP = 4,
    ORDER_FINSIH = 5,
  };


  typedef boost::shared_ptr< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> const> ConstPtr;

}; // struct hyc_RobotInfo_

typedef ::robot_control_msgs::hyc_RobotInfo_<std::allocator<void> > hyc_RobotInfo;

typedef boost::shared_ptr< ::robot_control_msgs::hyc_RobotInfo > hyc_RobotInfoPtr;
typedef boost::shared_ptr< ::robot_control_msgs::hyc_RobotInfo const> hyc_RobotInfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator1> & lhs, const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.robot_name == rhs.robot_name &&
    lhs.pose == rhs.pose &&
    lhs.current_route_segment == rhs.current_route_segment &&
    lhs.shape == rhs.shape &&
    lhs.shape_variables == rhs.shape_variables &&
    lhs.handler_type == rhs.handler_type &&
    lhs.battery_id == rhs.battery_id &&
    lhs.battery_capacity == rhs.battery_capacity &&
    lhs.battery_chargetime == rhs.battery_chargetime &&
    lhs.battery_servicetime == rhs.battery_servicetime &&
    lhs.mode == rhs.mode &&
    lhs.status == rhs.status &&
    lhs.error_code == rhs.error_code &&
    lhs.good_id == rhs.good_id &&
    lhs.order_id == rhs.order_id &&
    lhs.order_status == rhs.order_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator1> & lhs, const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acf6224ebc0054473268910daf81c8c4";
  }

  static const char* value(const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacf6224ebc005447ULL;
  static const uint64_t static_value2 = 0x3268910daf81c8c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control_msgs/hyc_RobotInfo";
  }

  static const char* value(const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#################################################################\n"
"## Presents dynamic parameters of a hyc'srobot\n"
"#################################################################\n"
"\n"
"Header header                           # the creation time\n"
"string robot_name                       # the name of the robot (used in preconditions and topics)\n"
"geometry_msgs/PoseWithCovariance pose   # the robots current pose within the frame related to the msgs header\n"
"#RoutePrecondition sync                  # the current position in the last received plan (-1 means none)\n"
"int32 current_route_segment      	# the segment nr of the route executed by the given robot\n"
"############### shape type of robot ###################################\n"
"int32 shape                             # the shape of the robots (see enums)\n"
"float32[] shape_variables               # shape variables to define width height, ...\n"
"\n"
"int32 SHAPE_CIRCLE = 0                 # robot is in shape of a circle    ShapeVars\n"
"############### type of robot ###################################\n"
"int32   handler_type                    # the type of Handling module\n"
"\n"
"int32 HANDLERTYPE_NA = 0                # undefined Handling module\n"
"int32 HANDLERTYPE_ROLLER = 1            # roller type of  Handling module\n"
"int32 HANDLERTYPE_ARM = 2            	# robot_arm of  Handling module\n"
"int32 HANDLERTYPE_PNP = 3            	# pick_place of  Handling module\n"
"############### type of target align ############################\n"
"#int32   align_type                      # the type of target align\n"
"#string  align_id                        # the id of target align (position-align management db)\n"
"\n"
"#int32 ALIGNTYPE_NA = 0                  # undefined type of target align\n"
"#int32 ALIGNTYPE_DOCKER = 1              # docker type of target align\n"
"############### type of target align ############################\n"
"string  battery_id 			# the id of battery (battery management db included maintenance)\n"
"float32 battery_capacity		# unit: %\n"
"int32 battery_chargetime      \n"
"int32 battery_servicetime   		# using time caculation (uint: minute)\n"
"############### type of mode ####################################\n"
"int32   mode                            # the mode of operation\n"
"\n"
"int32 MODE_NA = 0                   	# undefined mode\n"
"int32 MODE_IDLE = 1                 	# robot is idle\n"
"int32 MODE_SEGMENT_FOLLOWING = 2    	# robot is in mode segment following\n"
"int32 MODE_PICKUP = 3               	# robot is picking up goods\n"
"############### type of status ####################################\n"
"int32   status                          # the status of the robot\n"
"string  error_code 			# the error_code of robot (error_code management db included its history)\n"
"\n"
"int32 STATUS_NONE = -1            	# robot is not_ready (stm not ready ...)\n"
"int32 STATUS_DRIVING = 0            	# robot is driving\n"
"int32 STATUS_STOPPED = 1            	# robot has stopped\n"
"int32 STATUS_DONE = 2               	# robot has finished its last job\n"
"int32 STATUS_BROKEN = 3             	# robot is broken and not ready for any task\n"
"\n"
"############### order's information ################################\n"
"int32   good_id                         # the good id attached to the robot\n"
"\n"
"int32 GOOD_EMPTY = -1               	# no goods attached\n"
"int32 GOOD_NA = -2                  	# undefined good\n"
"############### order's information ################################\n"
"int32   order_id                        # the order id scheduled to this robot (-1: none)\n"
"int32   order_status                    # the status of the assigned order\n"
"\n"
"int32 ORDER_NONE = 0                	# no order assigned\n"
"int32 ORDER_APPROACH = 1            	# the robot approaches the first station of the order\n"
"int32 ORDER_PICKUP = 2              	# the robot picks up a good at the station\n"
"int32 ORDER_TRANSPORT = 3          	# the robot currently transports a good from one station to another\n"
"int32 ORDER_DROP = 4                	# the robot drops a good at the last station of its order, finishing the order\n"
"int32 ORDER_FINSIH = 5              	# the robot drops a good at the last station of its order, finishing the order\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.robot_name);
      stream.next(m.pose);
      stream.next(m.current_route_segment);
      stream.next(m.shape);
      stream.next(m.shape_variables);
      stream.next(m.handler_type);
      stream.next(m.battery_id);
      stream.next(m.battery_capacity);
      stream.next(m.battery_chargetime);
      stream.next(m.battery_servicetime);
      stream.next(m.mode);
      stream.next(m.status);
      stream.next(m.error_code);
      stream.next(m.good_id);
      stream.next(m.order_id);
      stream.next(m.order_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hyc_RobotInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control_msgs::hyc_RobotInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "current_route_segment: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_route_segment);
    s << indent << "shape: ";
    Printer<int32_t>::stream(s, indent + "  ", v.shape);
    s << indent << "shape_variables[]" << std::endl;
    for (size_t i = 0; i < v.shape_variables.size(); ++i)
    {
      s << indent << "  shape_variables[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.shape_variables[i]);
    }
    s << indent << "handler_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.handler_type);
    s << indent << "battery_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.battery_id);
    s << indent << "battery_capacity: ";
    Printer<float>::stream(s, indent + "  ", v.battery_capacity);
    s << indent << "battery_chargetime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_chargetime);
    s << indent << "battery_servicetime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.battery_servicetime);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "error_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_code);
    s << indent << "good_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.good_id);
    s << indent << "order_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order_id);
    s << indent << "order_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MSGS_MESSAGE_HYC_ROBOTINFO_H
