// Generated by gencpp from file robot_control_msgs/robot_ctrl_roslog.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ROSLOG_H
#define ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ROSLOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control_msgs
{
template <class ContainerAllocator>
struct robot_ctrl_roslog_
{
  typedef robot_ctrl_roslog_<ContainerAllocator> Type;

  robot_ctrl_roslog_()
    : system_id()
    , roslog_level()
    , roslog_node()
    , roslog_content()
    , occure_time()
    , update_time()  {
    }
  robot_ctrl_roslog_(const ContainerAllocator& _alloc)
    : system_id(_alloc)
    , roslog_level(_alloc)
    , roslog_node(_alloc)
    , roslog_content(_alloc)
    , occure_time(_alloc)
    , update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _system_id_type;
  _system_id_type system_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _roslog_level_type;
  _roslog_level_type roslog_level;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _roslog_node_type;
  _roslog_node_type roslog_node;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _roslog_content_type;
  _roslog_content_type roslog_content;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _occure_time_type;
  _occure_time_type occure_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_time_type;
  _update_time_type update_time;





  typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> const> ConstPtr;

}; // struct robot_ctrl_roslog_

typedef ::robot_control_msgs::robot_ctrl_roslog_<std::allocator<void> > robot_ctrl_roslog;

typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_roslog > robot_ctrl_roslogPtr;
typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_roslog const> robot_ctrl_roslogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator1> & lhs, const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator2> & rhs)
{
  return lhs.system_id == rhs.system_id &&
    lhs.roslog_level == rhs.roslog_level &&
    lhs.roslog_node == rhs.roslog_node &&
    lhs.roslog_content == rhs.roslog_content &&
    lhs.occure_time == rhs.occure_time &&
    lhs.update_time == rhs.update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator1> & lhs, const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fbe8c01a89f28f5cb406e90c253e0af";
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fbe8c01a89f28f5ULL;
  static const uint64_t static_value2 = 0xcb406e90c253e0afULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control_msgs/robot_ctrl_roslog";
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string system_id \n"
"string roslog_level 			 \n"
"string roslog_node 			 \n"
"string roslog_content 			 \n"
"string occure_time 	 \n"
"string update_time \n"
;
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.system_id);
      stream.next(m.roslog_level);
      stream.next(m.roslog_node);
      stream.next(m.roslog_content);
      stream.next(m.occure_time);
      stream.next(m.update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_ctrl_roslog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator>& v)
  {
    s << indent << "system_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.system_id);
    s << indent << "roslog_level: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.roslog_level);
    s << indent << "roslog_node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.roslog_node);
    s << indent << "roslog_content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.roslog_content);
    s << indent << "occure_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.occure_time);
    s << indent << "update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ROSLOG_H
