// Generated by gencpp from file robot_control_msgs/robot_ctrl_roslog_cmdResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ROSLOG_CMDRESPONSE_H
#define ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ROSLOG_CMDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_control_msgs/robot_ctrl_roslog.h>

namespace robot_control_msgs
{
template <class ContainerAllocator>
struct robot_ctrl_roslog_cmdResponse_
{
  typedef robot_ctrl_roslog_cmdResponse_<ContainerAllocator> Type;

  robot_ctrl_roslog_cmdResponse_()
    : result(false)
    , error_code()
    , result_roslogs()  {
    }
  robot_ctrl_roslog_cmdResponse_(const ContainerAllocator& _alloc)
    : result(false)
    , error_code(_alloc)
    , result_roslogs(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_code_type;
  _error_code_type error_code;

   typedef std::vector< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >::other >  _result_roslogs_type;
  _result_roslogs_type result_roslogs;





  typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct robot_ctrl_roslog_cmdResponse_

typedef ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<std::allocator<void> > robot_ctrl_roslog_cmdResponse;

typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse > robot_ctrl_roslog_cmdResponsePtr;
typedef boost::shared_ptr< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse const> robot_ctrl_roslog_cmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator1> & lhs, const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.error_code == rhs.error_code &&
    lhs.result_roslogs == rhs.result_roslogs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator1> & lhs, const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d63d53916823289e1c60ace454e34943";
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd63d53916823289eULL;
  static const uint64_t static_value2 = 0x1c60ace454e34943ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control_msgs/robot_ctrl_roslog_cmdResponse";
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool result\n"
"string error_code\n"
"robot_ctrl_roslog[] result_roslogs	 \n"
"\n"
"\n"
"================================================================================\n"
"MSG: robot_control_msgs/robot_ctrl_roslog\n"
"string system_id \n"
"string roslog_level 			 \n"
"string roslog_node 			 \n"
"string roslog_content 			 \n"
"string occure_time 	 \n"
"string update_time \n"
;
  }

  static const char* value(const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.error_code);
      stream.next(m.result_roslogs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_ctrl_roslog_cmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control_msgs::robot_ctrl_roslog_cmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "error_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_code);
    s << indent << "result_roslogs[]" << std::endl;
    for (size_t i = 0; i < v.result_roslogs.size(); ++i)
    {
      s << indent << "  result_roslogs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_control_msgs::robot_ctrl_roslog_<ContainerAllocator> >::stream(s, indent + "    ", v.result_roslogs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MSGS_MESSAGE_ROBOT_CTRL_ROSLOG_CMDRESPONSE_H
