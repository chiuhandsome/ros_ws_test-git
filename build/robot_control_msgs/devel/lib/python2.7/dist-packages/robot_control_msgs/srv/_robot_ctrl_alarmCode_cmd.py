# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_control_msgs/robot_ctrl_alarmCode_cmdRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robot_control_msgs.msg

class robot_ctrl_alarmCode_cmdRequest(genpy.Message):
  _md5sum = "d326cada72ce322e528e312dbbb0de43"
  _type = "robot_control_msgs/robot_ctrl_alarmCode_cmdRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 cmd_id         # 1:Add , 2:modify 3:delete 4:requery	 		
string index_name 	
string parameter 
robot_ctrl_alarmCode rec_alarmCode	 

================================================================================
MSG: robot_control_msgs/robot_ctrl_alarmCode
string system_id 			
string alarm_id 		# module_no(3) + module alarm code(3)	
string alarm_code 		# same as alarm_id,preper for special requirement
string alarm_level 		# level of ararm: 1:alart 2:alarm	
string alarm_Desc_E 		# English description of alarm	
string alarm_Desc_TC 		# Traditional chinese description of alarm	
string alarm_Desc_SC 		# Sample chinese description of alarm
string alarm_version 		# version of alarm
string update_time 		# version time of alarm
"""
  __slots__ = ['cmd_id','index_name','parameter','rec_alarmCode']
  _slot_types = ['int8','string','string','robot_control_msgs/robot_ctrl_alarmCode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_id,index_name,parameter,rec_alarmCode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_ctrl_alarmCode_cmdRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_id is None:
        self.cmd_id = 0
      if self.index_name is None:
        self.index_name = ''
      if self.parameter is None:
        self.parameter = ''
      if self.rec_alarmCode is None:
        self.rec_alarmCode = robot_control_msgs.msg.robot_ctrl_alarmCode()
    else:
      self.cmd_id = 0
      self.index_name = ''
      self.parameter = ''
      self.rec_alarmCode = robot_control_msgs.msg.robot_ctrl_alarmCode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cmd_id
      buff.write(_get_struct_b().pack(_x))
      _x = self.index_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parameter
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.system_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_level
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_Desc_E
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_Desc_TC
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_Desc_SC
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.rec_alarmCode is None:
        self.rec_alarmCode = robot_control_msgs.msg.robot_ctrl_alarmCode()
      end = 0
      start = end
      end += 1
      (self.cmd_id,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.index_name = str[start:end].decode('utf-8')
      else:
        self.index_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parameter = str[start:end].decode('utf-8')
      else:
        self.parameter = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.system_id = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.system_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_id = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_code = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_level = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_level = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_Desc_E = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_Desc_E = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_Desc_TC = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_Desc_TC = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_Desc_SC = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_Desc_SC = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_version = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.update_time = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cmd_id
      buff.write(_get_struct_b().pack(_x))
      _x = self.index_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parameter
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.system_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_level
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_Desc_E
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_Desc_TC
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_Desc_SC
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.alarm_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rec_alarmCode.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.rec_alarmCode is None:
        self.rec_alarmCode = robot_control_msgs.msg.robot_ctrl_alarmCode()
      end = 0
      start = end
      end += 1
      (self.cmd_id,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.index_name = str[start:end].decode('utf-8')
      else:
        self.index_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parameter = str[start:end].decode('utf-8')
      else:
        self.parameter = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.system_id = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.system_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_id = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_code = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_level = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_level = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_Desc_E = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_Desc_E = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_Desc_TC = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_Desc_TC = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_Desc_SC = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_Desc_SC = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.alarm_version = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.alarm_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rec_alarmCode.update_time = str[start:end].decode('utf-8')
      else:
        self.rec_alarmCode.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_control_msgs/robot_ctrl_alarmCode_cmdResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robot_control_msgs.msg

class robot_ctrl_alarmCode_cmdResponse(genpy.Message):
  _md5sum = "1d6ac9336d2d6a6444deef81cfe5af58"
  _type = "robot_control_msgs/robot_ctrl_alarmCode_cmdResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool result
string error_code
robot_ctrl_alarmCode[] result_alarmCodes


================================================================================
MSG: robot_control_msgs/robot_ctrl_alarmCode
string system_id 			
string alarm_id 		# module_no(3) + module alarm code(3)	
string alarm_code 		# same as alarm_id,preper for special requirement
string alarm_level 		# level of ararm: 1:alart 2:alarm	
string alarm_Desc_E 		# English description of alarm	
string alarm_Desc_TC 		# Traditional chinese description of alarm	
string alarm_Desc_SC 		# Sample chinese description of alarm
string alarm_version 		# version of alarm
string update_time 		# version time of alarm
"""
  __slots__ = ['result','error_code','result_alarmCodes']
  _slot_types = ['bool','string','robot_control_msgs/robot_ctrl_alarmCode[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,error_code,result_alarmCodes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_ctrl_alarmCode_cmdResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.error_code is None:
        self.error_code = ''
      if self.result_alarmCodes is None:
        self.result_alarmCodes = []
    else:
      self.result = False
      self.error_code = ''
      self.result_alarmCodes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.result_alarmCodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.result_alarmCodes:
        _x = val1.system_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_level
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_Desc_E
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_Desc_TC
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_Desc_SC
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.update_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.result_alarmCodes is None:
        self.result_alarmCodes = None
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_code = str[start:end].decode('utf-8')
      else:
        self.error_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result_alarmCodes = []
      for i in range(0, length):
        val1 = robot_control_msgs.msg.robot_ctrl_alarmCode()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.system_id = str[start:end].decode('utf-8')
        else:
          val1.system_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_id = str[start:end].decode('utf-8')
        else:
          val1.alarm_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_code = str[start:end].decode('utf-8')
        else:
          val1.alarm_code = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_level = str[start:end].decode('utf-8')
        else:
          val1.alarm_level = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_Desc_E = str[start:end].decode('utf-8')
        else:
          val1.alarm_Desc_E = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_Desc_TC = str[start:end].decode('utf-8')
        else:
          val1.alarm_Desc_TC = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_Desc_SC = str[start:end].decode('utf-8')
        else:
          val1.alarm_Desc_SC = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_version = str[start:end].decode('utf-8')
        else:
          val1.alarm_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.update_time = str[start:end].decode('utf-8')
        else:
          val1.update_time = str[start:end]
        self.result_alarmCodes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.result_alarmCodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.result_alarmCodes:
        _x = val1.system_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_level
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_Desc_E
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_Desc_TC
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_Desc_SC
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.alarm_version
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.update_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.result_alarmCodes is None:
        self.result_alarmCodes = None
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_code = str[start:end].decode('utf-8')
      else:
        self.error_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result_alarmCodes = []
      for i in range(0, length):
        val1 = robot_control_msgs.msg.robot_ctrl_alarmCode()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.system_id = str[start:end].decode('utf-8')
        else:
          val1.system_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_id = str[start:end].decode('utf-8')
        else:
          val1.alarm_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_code = str[start:end].decode('utf-8')
        else:
          val1.alarm_code = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_level = str[start:end].decode('utf-8')
        else:
          val1.alarm_level = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_Desc_E = str[start:end].decode('utf-8')
        else:
          val1.alarm_Desc_E = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_Desc_TC = str[start:end].decode('utf-8')
        else:
          val1.alarm_Desc_TC = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_Desc_SC = str[start:end].decode('utf-8')
        else:
          val1.alarm_Desc_SC = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.alarm_version = str[start:end].decode('utf-8')
        else:
          val1.alarm_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.update_time = str[start:end].decode('utf-8')
        else:
          val1.update_time = str[start:end]
        self.result_alarmCodes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class robot_ctrl_alarmCode_cmd(object):
  _type          = 'robot_control_msgs/robot_ctrl_alarmCode_cmd'
  _md5sum = 'e8befc5050638e2b9a4048a2ea5cd223'
  _request_class  = robot_ctrl_alarmCode_cmdRequest
  _response_class = robot_ctrl_alarmCode_cmdResponse
