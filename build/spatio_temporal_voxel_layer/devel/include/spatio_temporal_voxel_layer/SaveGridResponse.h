// Generated by gencpp from file spatio_temporal_voxel_layer/SaveGridResponse.msg
// DO NOT EDIT!


#ifndef SPATIO_TEMPORAL_VOXEL_LAYER_MESSAGE_SAVEGRIDRESPONSE_H
#define SPATIO_TEMPORAL_VOXEL_LAYER_MESSAGE_SAVEGRIDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spatio_temporal_voxel_layer
{
template <class ContainerAllocator>
struct SaveGridResponse_
{
  typedef SaveGridResponse_<ContainerAllocator> Type;

  SaveGridResponse_()
    : map_size_bytes(0.0)
    , status(false)  {
    }
  SaveGridResponse_(const ContainerAllocator& _alloc)
    : map_size_bytes(0.0)
    , status(false)  {
  (void)_alloc;
    }



   typedef double _map_size_bytes_type;
  _map_size_bytes_type map_size_bytes;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SaveGridResponse_

typedef ::spatio_temporal_voxel_layer::SaveGridResponse_<std::allocator<void> > SaveGridResponse;

typedef boost::shared_ptr< ::spatio_temporal_voxel_layer::SaveGridResponse > SaveGridResponsePtr;
typedef boost::shared_ptr< ::spatio_temporal_voxel_layer::SaveGridResponse const> SaveGridResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator1> & lhs, const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator2> & rhs)
{
  return lhs.map_size_bytes == rhs.map_size_bytes &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator1> & lhs, const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spatio_temporal_voxel_layer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e03f48a62494df45bbc478f0477595fc";
  }

  static const char* value(const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe03f48a62494df45ULL;
  static const uint64_t static_value2 = 0xbbc478f0477595fcULL;
};

template<class ContainerAllocator>
struct DataType< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spatio_temporal_voxel_layer/SaveGridResponse";
  }

  static const char* value(const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 map_size_bytes\n"
"bool status\n"
;
  }

  static const char* value(const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_size_bytes);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveGridResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spatio_temporal_voxel_layer::SaveGridResponse_<ContainerAllocator>& v)
  {
    s << indent << "map_size_bytes: ";
    Printer<double>::stream(s, indent + "  ", v.map_size_bytes);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPATIO_TEMPORAL_VOXEL_LAYER_MESSAGE_SAVEGRIDRESPONSE_H
