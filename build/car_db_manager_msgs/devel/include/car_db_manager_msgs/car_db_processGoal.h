// Generated by gencpp from file car_db_manager_msgs/car_db_processGoal.msg
// DO NOT EDIT!


#ifndef CAR_DB_MANAGER_MSGS_MESSAGE_CAR_DB_PROCESSGOAL_H
#define CAR_DB_MANAGER_MSGS_MESSAGE_CAR_DB_PROCESSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_db_manager_msgs
{
template <class ContainerAllocator>
struct car_db_processGoal_
{
  typedef car_db_processGoal_<ContainerAllocator> Type;

  car_db_processGoal_()
    : table_name()
    , cmd_id(0)
    , query_base_index(0)
    , query_opt_index(0)
    , query_parameter()
    , update_data()  {
    }
  car_db_processGoal_(const ContainerAllocator& _alloc)
    : table_name(_alloc)
    , cmd_id(0)
    , query_base_index(0)
    , query_opt_index(0)
    , query_parameter(_alloc)
    , update_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _table_name_type;
  _table_name_type table_name;

   typedef uint8_t _cmd_id_type;
  _cmd_id_type cmd_id;

   typedef uint8_t _query_base_index_type;
  _query_base_index_type query_base_index;

   typedef uint8_t _query_opt_index_type;
  _query_opt_index_type query_opt_index;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _query_parameter_type;
  _query_parameter_type query_parameter;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_data_type;
  _update_data_type update_data;





  typedef boost::shared_ptr< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> const> ConstPtr;

}; // struct car_db_processGoal_

typedef ::car_db_manager_msgs::car_db_processGoal_<std::allocator<void> > car_db_processGoal;

typedef boost::shared_ptr< ::car_db_manager_msgs::car_db_processGoal > car_db_processGoalPtr;
typedef boost::shared_ptr< ::car_db_manager_msgs::car_db_processGoal const> car_db_processGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator1> & lhs, const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator2> & rhs)
{
  return lhs.table_name == rhs.table_name &&
    lhs.cmd_id == rhs.cmd_id &&
    lhs.query_base_index == rhs.query_base_index &&
    lhs.query_opt_index == rhs.query_opt_index &&
    lhs.query_parameter == rhs.query_parameter &&
    lhs.update_data == rhs.update_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator1> & lhs, const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_db_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "737f008ced6cd8feb92cd760de154321";
  }

  static const char* value(const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x737f008ced6cd8feULL;
  static const uint64_t static_value2 = 0xb92cd760de154321ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_db_manager_msgs/car_db_processGoal";
  }

  static const char* value(const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"string table_name \n"
"uint8 cmd_id         	# 1:Add , 2:modify , 3:delete , 4:requery , 5:refresh 99:interrupt	\n"
"uint8 query_base_index 	\n"
"uint8 query_opt_index\n"
"string query_parameter \n"
"string update_data	# delimiter symbol ==> ,\n"
;
  }

  static const char* value(const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.table_name);
      stream.next(m.cmd_id);
      stream.next(m.query_base_index);
      stream.next(m.query_opt_index);
      stream.next(m.query_parameter);
      stream.next(m.update_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct car_db_processGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_db_manager_msgs::car_db_processGoal_<ContainerAllocator>& v)
  {
    s << indent << "table_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.table_name);
    s << indent << "cmd_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_id);
    s << indent << "query_base_index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.query_base_index);
    s << indent << "query_opt_index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.query_opt_index);
    s << indent << "query_parameter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.query_parameter);
    s << indent << "update_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_DB_MANAGER_MSGS_MESSAGE_CAR_DB_PROCESSGOAL_H
