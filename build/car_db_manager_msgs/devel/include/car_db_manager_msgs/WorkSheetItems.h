// Generated by gencpp from file car_db_manager_msgs/WorkSheetItems.msg
// DO NOT EDIT!


#ifndef CAR_DB_MANAGER_MSGS_MESSAGE_WORKSHEETITEMS_H
#define CAR_DB_MANAGER_MSGS_MESSAGE_WORKSHEETITEMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_db_manager_msgs
{
template <class ContainerAllocator>
struct WorkSheetItems_
{
  typedef WorkSheetItems_<ContainerAllocator> Type;

  WorkSheetItems_()
    : primary_id()
    , unique_code()
    , base_item_name()
    , item_ser_no(0)
    , occur_time()
    , target_pose_id()
    , action_function_id()
    , action_function_params()
    , remark()
    , update_time()  {
    }
  WorkSheetItems_(const ContainerAllocator& _alloc)
    : primary_id(_alloc)
    , unique_code(_alloc)
    , base_item_name(_alloc)
    , item_ser_no(0)
    , occur_time(_alloc)
    , target_pose_id(_alloc)
    , action_function_id(_alloc)
    , action_function_params(_alloc)
    , remark(_alloc)
    , update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _primary_id_type;
  _primary_id_type primary_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unique_code_type;
  _unique_code_type unique_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _base_item_name_type;
  _base_item_name_type base_item_name;

   typedef uint8_t _item_ser_no_type;
  _item_ser_no_type item_ser_no;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _occur_time_type;
  _occur_time_type occur_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_pose_id_type;
  _target_pose_id_type target_pose_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_function_id_type;
  _action_function_id_type action_function_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_function_params_type;
  _action_function_params_type action_function_params;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _remark_type;
  _remark_type remark;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_time_type;
  _update_time_type update_time;





  typedef boost::shared_ptr< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> const> ConstPtr;

}; // struct WorkSheetItems_

typedef ::car_db_manager_msgs::WorkSheetItems_<std::allocator<void> > WorkSheetItems;

typedef boost::shared_ptr< ::car_db_manager_msgs::WorkSheetItems > WorkSheetItemsPtr;
typedef boost::shared_ptr< ::car_db_manager_msgs::WorkSheetItems const> WorkSheetItemsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator1> & lhs, const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator2> & rhs)
{
  return lhs.primary_id == rhs.primary_id &&
    lhs.unique_code == rhs.unique_code &&
    lhs.base_item_name == rhs.base_item_name &&
    lhs.item_ser_no == rhs.item_ser_no &&
    lhs.occur_time == rhs.occur_time &&
    lhs.target_pose_id == rhs.target_pose_id &&
    lhs.action_function_id == rhs.action_function_id &&
    lhs.action_function_params == rhs.action_function_params &&
    lhs.remark == rhs.remark &&
    lhs.update_time == rhs.update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator1> & lhs, const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_db_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8d3fc07cc4a98eb22e8a4eb5ef819bd";
  }

  static const char* value(const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8d3fc07cc4a98ebULL;
  static const uint64_t static_value2 = 0x22e8a4eb5ef819bdULL;
};

template<class ContainerAllocator>
struct DataType< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_db_manager_msgs/WorkSheetItems";
  }

  static const char* value(const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string primary_id			# must-have,UUID : primary_key(system_id)		\n"
"string unique_code 		        # must-have,UNIQUE INDEX , parameter_id	\n"
"string base_item_name\n"
"uint8 item_ser_no\n"
"string occur_time\n"
"string target_pose_id\n"
"string action_function_id\n"
"string action_function_params\n"
"string remark\n"
"string update_time			# must-have 	 \n"
"\n"
;
  }

  static const char* value(const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primary_id);
      stream.next(m.unique_code);
      stream.next(m.base_item_name);
      stream.next(m.item_ser_no);
      stream.next(m.occur_time);
      stream.next(m.target_pose_id);
      stream.next(m.action_function_id);
      stream.next(m.action_function_params);
      stream.next(m.remark);
      stream.next(m.update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorkSheetItems_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_db_manager_msgs::WorkSheetItems_<ContainerAllocator>& v)
  {
    s << indent << "primary_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.primary_id);
    s << indent << "unique_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unique_code);
    s << indent << "base_item_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.base_item_name);
    s << indent << "item_ser_no: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.item_ser_no);
    s << indent << "occur_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.occur_time);
    s << indent << "target_pose_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_pose_id);
    s << indent << "action_function_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_function_id);
    s << indent << "action_function_params: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_function_params);
    s << indent << "remark: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.remark);
    s << indent << "update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_DB_MANAGER_MSGS_MESSAGE_WORKSHEETITEMS_H
