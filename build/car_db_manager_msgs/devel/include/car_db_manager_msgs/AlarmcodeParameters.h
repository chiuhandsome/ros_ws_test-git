// Generated by gencpp from file car_db_manager_msgs/AlarmcodeParameters.msg
// DO NOT EDIT!


#ifndef CAR_DB_MANAGER_MSGS_MESSAGE_ALARMCODEPARAMETERS_H
#define CAR_DB_MANAGER_MSGS_MESSAGE_ALARMCODEPARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_db_manager_msgs
{
template <class ContainerAllocator>
struct AlarmcodeParameters_
{
  typedef AlarmcodeParameters_<ContainerAllocator> Type;

  AlarmcodeParameters_()
    : primary_id()
    , unique_code()
    , base_name()
    , alarm_level(0)
    , alarm_desc_eng()
    , alarm_desc_tc()
    , alarm_desc_sc()
    , update_time()  {
    }
  AlarmcodeParameters_(const ContainerAllocator& _alloc)
    : primary_id(_alloc)
    , unique_code(_alloc)
    , base_name(_alloc)
    , alarm_level(0)
    , alarm_desc_eng(_alloc)
    , alarm_desc_tc(_alloc)
    , alarm_desc_sc(_alloc)
    , update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _primary_id_type;
  _primary_id_type primary_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unique_code_type;
  _unique_code_type unique_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _base_name_type;
  _base_name_type base_name;

   typedef uint8_t _alarm_level_type;
  _alarm_level_type alarm_level;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alarm_desc_eng_type;
  _alarm_desc_eng_type alarm_desc_eng;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alarm_desc_tc_type;
  _alarm_desc_tc_type alarm_desc_tc;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alarm_desc_sc_type;
  _alarm_desc_sc_type alarm_desc_sc;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_time_type;
  _update_time_type update_time;





  typedef boost::shared_ptr< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> const> ConstPtr;

}; // struct AlarmcodeParameters_

typedef ::car_db_manager_msgs::AlarmcodeParameters_<std::allocator<void> > AlarmcodeParameters;

typedef boost::shared_ptr< ::car_db_manager_msgs::AlarmcodeParameters > AlarmcodeParametersPtr;
typedef boost::shared_ptr< ::car_db_manager_msgs::AlarmcodeParameters const> AlarmcodeParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator1> & lhs, const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator2> & rhs)
{
  return lhs.primary_id == rhs.primary_id &&
    lhs.unique_code == rhs.unique_code &&
    lhs.base_name == rhs.base_name &&
    lhs.alarm_level == rhs.alarm_level &&
    lhs.alarm_desc_eng == rhs.alarm_desc_eng &&
    lhs.alarm_desc_tc == rhs.alarm_desc_tc &&
    lhs.alarm_desc_sc == rhs.alarm_desc_sc &&
    lhs.update_time == rhs.update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator1> & lhs, const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_db_manager_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a54f2fb21b297ab49903c34acf8090f2";
  }

  static const char* value(const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa54f2fb21b297ab4ULL;
  static const uint64_t static_value2 = 0x9903c34acf8090f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_db_manager_msgs/AlarmcodeParameters";
  }

  static const char* value(const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string primary_id			# must-have,UUID : primary_key(system_id)		\n"
"string unique_code 		        # must-have,UNIQUE INDEX , parameter_id	\n"
"string base_name\n"
"uint8 alarm_level	\n"
"string alarm_desc_eng\n"
"string alarm_desc_tc\n"
"string alarm_desc_sc\n"
"string update_time			# must-have 	  	 	\n"
"\n"
;
  }

  static const char* value(const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primary_id);
      stream.next(m.unique_code);
      stream.next(m.base_name);
      stream.next(m.alarm_level);
      stream.next(m.alarm_desc_eng);
      stream.next(m.alarm_desc_tc);
      stream.next(m.alarm_desc_sc);
      stream.next(m.update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AlarmcodeParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_db_manager_msgs::AlarmcodeParameters_<ContainerAllocator>& v)
  {
    s << indent << "primary_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.primary_id);
    s << indent << "unique_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unique_code);
    s << indent << "base_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.base_name);
    s << indent << "alarm_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_level);
    s << indent << "alarm_desc_eng: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alarm_desc_eng);
    s << indent << "alarm_desc_tc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alarm_desc_tc);
    s << indent << "alarm_desc_sc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alarm_desc_sc);
    s << indent << "update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_DB_MANAGER_MSGS_MESSAGE_ALARMCODEPARAMETERS_H
