# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_db_manager_msgs/PidCtrlParameters.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PidCtrlParameters(genpy.Message):
  _md5sum = "09b2214d7f8d0d3330776009fda8ce8f"
  _type = "car_db_manager_msgs/PidCtrlParameters"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string primary_id			# must-have,UUID : primary_key(system_id)		
string unique_code 		        # must-have,UNIQUE INDEX , pid_ctrl_id	
string base_name
float32 target		   
float32 tolerance	
float32 min_bound	
float32 max_bound
float64 d_KP	
float64 d_KI	
float64 d_KD
bool b_compensation
string update_time			# must-have 	 

"""
  __slots__ = ['primary_id','unique_code','base_name','target','tolerance','min_bound','max_bound','d_KP','d_KI','d_KD','b_compensation','update_time']
  _slot_types = ['string','string','string','float32','float32','float32','float32','float64','float64','float64','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       primary_id,unique_code,base_name,target,tolerance,min_bound,max_bound,d_KP,d_KI,d_KD,b_compensation,update_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PidCtrlParameters, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.primary_id is None:
        self.primary_id = ''
      if self.unique_code is None:
        self.unique_code = ''
      if self.base_name is None:
        self.base_name = ''
      if self.target is None:
        self.target = 0.
      if self.tolerance is None:
        self.tolerance = 0.
      if self.min_bound is None:
        self.min_bound = 0.
      if self.max_bound is None:
        self.max_bound = 0.
      if self.d_KP is None:
        self.d_KP = 0.
      if self.d_KI is None:
        self.d_KI = 0.
      if self.d_KD is None:
        self.d_KD = 0.
      if self.b_compensation is None:
        self.b_compensation = False
      if self.update_time is None:
        self.update_time = ''
    else:
      self.primary_id = ''
      self.unique_code = ''
      self.base_name = ''
      self.target = 0.
      self.tolerance = 0.
      self.min_bound = 0.
      self.max_bound = 0.
      self.d_KP = 0.
      self.d_KI = 0.
      self.d_KD = 0.
      self.b_compensation = False
      self.update_time = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4f3dB().pack(_x.target, _x.tolerance, _x.min_bound, _x.max_bound, _x.d_KP, _x.d_KI, _x.d_KD, _x.b_compensation))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_code = str[start:end].decode('utf-8')
      else:
        self.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_name = str[start:end].decode('utf-8')
      else:
        self.base_name = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.target, _x.tolerance, _x.min_bound, _x.max_bound, _x.d_KP, _x.d_KI, _x.d_KD, _x.b_compensation,) = _get_struct_4f3dB().unpack(str[start:end])
      self.b_compensation = bool(self.b_compensation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4f3dB().pack(_x.target, _x.tolerance, _x.min_bound, _x.max_bound, _x.d_KP, _x.d_KI, _x.d_KD, _x.b_compensation))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_code = str[start:end].decode('utf-8')
      else:
        self.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_name = str[start:end].decode('utf-8')
      else:
        self.base_name = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.target, _x.tolerance, _x.min_bound, _x.max_bound, _x.d_KP, _x.d_KI, _x.d_KD, _x.b_compensation,) = _get_struct_4f3dB().unpack(str[start:end])
      self.b_compensation = bool(self.b_compensation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f3dB = None
def _get_struct_4f3dB():
    global _struct_4f3dB
    if _struct_4f3dB is None:
        _struct_4f3dB = struct.Struct("<4f3dB")
    return _struct_4f3dB
