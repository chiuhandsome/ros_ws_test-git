;; Auto-generated. Do not edit!


(when (boundp 'robot_scheduling_msgs::power_chargeFeedback)
  (if (not (find-package "ROBOT_SCHEDULING_MSGS"))
    (make-package "ROBOT_SCHEDULING_MSGS"))
  (shadow 'power_chargeFeedback (find-package "ROBOT_SCHEDULING_MSGS")))
(unless (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK")
  (make-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude power_chargeFeedback.msg.html


(intern "*CHARGE_NONE*" (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(shadow '*CHARGE_NONE* (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(defconstant robot_scheduling_msgs::power_chargeFeedback::*CHARGE_NONE* 0)
(intern "*CHARGE_PRE_CHECK_OK*" (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(shadow '*CHARGE_PRE_CHECK_OK* (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(defconstant robot_scheduling_msgs::power_chargeFeedback::*CHARGE_PRE_CHECK_OK* 1)
(intern "*CHARGE_CHECK_OK*" (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(shadow '*CHARGE_CHECK_OK* (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(defconstant robot_scheduling_msgs::power_chargeFeedback::*CHARGE_CHECK_OK* 2)
(intern "*CHARGEING*" (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(shadow '*CHARGEING* (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(defconstant robot_scheduling_msgs::power_chargeFeedback::*CHARGEING* 3)
(intern "*CHARGE_OK*" (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(shadow '*CHARGE_OK* (find-package "ROBOT_SCHEDULING_MSGS::POWER_CHARGEFEEDBACK"))
(defconstant robot_scheduling_msgs::power_chargeFeedback::*CHARGE_OK* 4)
(defclass robot_scheduling_msgs::power_chargeFeedback
  :super ros::object
  :slots (_charge_fb_state ))

(defmethod robot_scheduling_msgs::power_chargeFeedback
  (:init
   (&key
    ((:charge_fb_state __charge_fb_state) 0)
    )
   (send-super :init)
   (setq _charge_fb_state (round __charge_fb_state))
   self)
  (:charge_fb_state
   (&optional __charge_fb_state)
   (if __charge_fb_state (setq _charge_fb_state __charge_fb_state)) _charge_fb_state)
  (:serialization-length
   ()
   (+
    ;; uint8 _charge_fb_state
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _charge_fb_state
       (write-byte _charge_fb_state s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _charge_fb_state
     (setq _charge_fb_state (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;;
   self)
  )

(setf (get robot_scheduling_msgs::power_chargeFeedback :md5sum-) "6765288e830c13508aae741a3a33a28d")
(setf (get robot_scheduling_msgs::power_chargeFeedback :datatype-) "robot_scheduling_msgs/power_chargeFeedback")
(setf (get robot_scheduling_msgs::power_chargeFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define a feedback message
uint8 CHARGE_NONE=0
uint8 CHARGE_PRE_CHECK_OK=1
uint8 CHARGE_CHECK_OK=2
uint8 CHARGEING=3
uint8 CHARGE_OK=4
uint8 charge_fb_state


")



(provide :robot_scheduling_msgs/power_chargeFeedback "6765288e830c13508aae741a3a33a28d")


