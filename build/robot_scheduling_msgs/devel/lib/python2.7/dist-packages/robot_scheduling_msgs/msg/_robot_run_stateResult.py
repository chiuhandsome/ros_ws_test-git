# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_scheduling_msgs/robot_run_stateResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_run_stateResult(genpy.Message):
  _md5sum = "f0a2e84d2729bb798342792bacb089ff"
  _type = "robot_scheduling_msgs/robot_run_stateResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result
uint8 NONE=10
uint8 UNKNOW=11
uint8 AWARED=12
uint8 STANDBY=13
uint8 MANUAL=14
uint8 REMOTE=15
uint8 PAUSE=16
uint8 M_NONE=20
uint8 M_PLANTOEXEC=21
uint8 M_MOVEINT=22
uint8 M_MOVE=23
uint8 M_TURN=24
uint8 M_WORKSHEET=25
uint8 R_NONE=30
uint8 R_WORKSHEET=31
uint8 RECR_NONE=40
uint8 RECR_PLANTOEXEC=41
uint8 status
uint8 OK=1
uint8 NOT_OK=2
uint8 TIMED_OUT=3
uint8 OUT_OF_TIMES=4
uint8 ALARM=5
uint8 NOT_ALARM=6
uint8 PASS=7
uint8 CHANGE=8
uint8 NOT_CHANGE=9
uint8 result
"""
  # Pseudo-constants
  NONE = 10
  UNKNOW = 11
  AWARED = 12
  STANDBY = 13
  MANUAL = 14
  REMOTE = 15
  PAUSE = 16
  M_NONE = 20
  M_PLANTOEXEC = 21
  M_MOVEINT = 22
  M_MOVE = 23
  M_TURN = 24
  M_WORKSHEET = 25
  R_NONE = 30
  R_WORKSHEET = 31
  RECR_NONE = 40
  RECR_PLANTOEXEC = 41
  OK = 1
  NOT_OK = 2
  TIMED_OUT = 3
  OUT_OF_TIMES = 4
  ALARM = 5
  NOT_ALARM = 6
  PASS = 7
  CHANGE = 8
  NOT_CHANGE = 9

  __slots__ = ['status','result']
  _slot_types = ['uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_run_stateResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.result is None:
        self.result = 0
    else:
      self.status = 0
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.status, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.status, _x.result,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.status, _x.result))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.status, _x.result,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
