# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_scheduling_msgs/robot_run_stateGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_run_stateGoal(genpy.Message):
  _md5sum = "689dd4985997762e8811a55ee18bb5f4"
  _type = "robot_scheduling_msgs/robot_run_stateGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
uint8 GET=1
uint8 SET=2
uint8 GETALL=3
uint8 PRE_GET=4
uint8 PRE_SET=5
uint8 PRE_GETALL=6
uint8 MANU_GET=7
uint8 MANU_SET=8
uint8 MANU_GETALL=9
uint8 MANU_STARTCHECK=10
uint8 MANU_MODESET=11
uint8 ALARM_RESETCHECK=12
uint8 ALARM_RECOVERYCHECK=13
uint8 ALARM_RECOVERY_GETALL=14
uint8 SYS_RESTARTCHECK=15
uint8 REMOTE_STARTCHECK=16
uint8 REMOTE_GETALL=17
uint8 REMOTE_MODESET=18
uint8 PLANTOEXEC=19
uint8 command
uint8 set_status
#uint8[] set_alarmcode
string set_status_code	#for alarm code or other's application
"""
  # Pseudo-constants
  GET = 1
  SET = 2
  GETALL = 3
  PRE_GET = 4
  PRE_SET = 5
  PRE_GETALL = 6
  MANU_GET = 7
  MANU_SET = 8
  MANU_GETALL = 9
  MANU_STARTCHECK = 10
  MANU_MODESET = 11
  ALARM_RESETCHECK = 12
  ALARM_RECOVERYCHECK = 13
  ALARM_RECOVERY_GETALL = 14
  SYS_RESTARTCHECK = 15
  REMOTE_STARTCHECK = 16
  REMOTE_GETALL = 17
  REMOTE_MODESET = 18
  PLANTOEXEC = 19

  __slots__ = ['command','set_status','set_status_code']
  _slot_types = ['uint8','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,set_status,set_status_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_run_stateGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = 0
      if self.set_status is None:
        self.set_status = 0
      if self.set_status_code is None:
        self.set_status_code = ''
    else:
      self.command = 0
      self.set_status = 0
      self.set_status_code = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.command, _x.set_status))
      _x = self.set_status_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.command, _x.set_status,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.set_status_code = str[start:end].decode('utf-8')
      else:
        self.set_status_code = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.command, _x.set_status))
      _x = self.set_status_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.command, _x.set_status,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.set_status_code = str[start:end].decode('utf-8')
      else:
        self.set_status_code = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
