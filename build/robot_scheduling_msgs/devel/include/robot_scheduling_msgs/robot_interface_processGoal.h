// Generated by gencpp from file robot_scheduling_msgs/robot_interface_processGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_INTERFACE_PROCESSGOAL_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_INTERFACE_PROCESSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct robot_interface_processGoal_
{
  typedef robot_interface_processGoal_<ContainerAllocator> Type;

  robot_interface_processGoal_()
    : cmd_type(0)  {
    }
  robot_interface_processGoal_(const ContainerAllocator& _alloc)
    : cmd_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cmd_type_type;
  _cmd_type_type cmd_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LOWER)
  #undef LOWER
#endif
#if defined(_WIN32) && defined(UPPER)
  #undef UPPER
#endif

  enum {
    LOWER = 1u,
    UPPER = 2u,
  };


  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> const> ConstPtr;

}; // struct robot_interface_processGoal_

typedef ::robot_scheduling_msgs::robot_interface_processGoal_<std::allocator<void> > robot_interface_processGoal;

typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_interface_processGoal > robot_interface_processGoalPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_interface_processGoal const> robot_interface_processGoalConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_type == rhs.cmd_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b78a69198a3c763eed65ddcbd7e035a";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b78a69198a3c763ULL;
  static const uint64_t static_value2 = 0xeed65ddcbd7e035aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/robot_interface_processGoal";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"uint8 LOWER=1\n"
"uint8 UPPER=2\n"
"uint8 cmd_type\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_interface_processGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::robot_interface_processGoal_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_INTERFACE_PROCESSGOAL_H
