// Generated by gencpp from file robot_scheduling_msgs/self_turn_to_recoveryGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_SELF_TURN_TO_RECOVERYGOAL_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_SELF_TURN_TO_RECOVERYGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct self_turn_to_recoveryGoal_
{
  typedef self_turn_to_recoveryGoal_<ContainerAllocator> Type;

  self_turn_to_recoveryGoal_()
    : rcvr_ac_name()  {
    }
  self_turn_to_recoveryGoal_(const ContainerAllocator& _alloc)
    : rcvr_ac_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rcvr_ac_name_type;
  _rcvr_ac_name_type rcvr_ac_name;





  typedef boost::shared_ptr< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> const> ConstPtr;

}; // struct self_turn_to_recoveryGoal_

typedef ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<std::allocator<void> > self_turn_to_recoveryGoal;

typedef boost::shared_ptr< ::robot_scheduling_msgs::self_turn_to_recoveryGoal > self_turn_to_recoveryGoalPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::self_turn_to_recoveryGoal const> self_turn_to_recoveryGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator2> & rhs)
{
  return lhs.rcvr_ac_name == rhs.rcvr_ac_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c98c1821b262382822775660ab9d8f5a";
  }

  static const char* value(const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc98c1821b2623828ULL;
  static const uint64_t static_value2 = 0x22775660ab9d8f5aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/self_turn_to_recoveryGoal";
  }

  static const char* value(const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"string rcvr_ac_name\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rcvr_ac_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct self_turn_to_recoveryGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::self_turn_to_recoveryGoal_<ContainerAllocator>& v)
  {
    s << indent << "rcvr_ac_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rcvr_ac_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_SELF_TURN_TO_RECOVERYGOAL_H
