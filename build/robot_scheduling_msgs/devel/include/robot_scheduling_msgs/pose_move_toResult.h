// Generated by gencpp from file robot_scheduling_msgs/pose_move_toResult.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_POSE_MOVE_TORESULT_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_POSE_MOVE_TORESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <locomotor_msgs/ResultCode.h>

namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct pose_move_toResult_
{
  typedef pose_move_toResult_<ContainerAllocator> Type;

  pose_move_toResult_()
    : result(0)
    , result_code()  {
    }
  pose_move_toResult_(const ContainerAllocator& _alloc)
    : result(0)
    , result_code(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef  ::locomotor_msgs::ResultCode_<ContainerAllocator>  _result_code_type;
  _result_code_type result_code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(NOT_OK)
  #undef NOT_OK
#endif
#if defined(_WIN32) && defined(TIMED_OUT)
  #undef TIMED_OUT
#endif
#if defined(_WIN32) && defined(OUT_OF_TIMES)
  #undef OUT_OF_TIMES
#endif
#if defined(_WIN32) && defined(NOT_POSE_ID)
  #undef NOT_POSE_ID
#endif

  enum {
    OK = 1u,
    NOT_OK = 2u,
    TIMED_OUT = 3u,
    OUT_OF_TIMES = 4u,
    NOT_POSE_ID = 5u,
  };


  typedef boost::shared_ptr< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> const> ConstPtr;

}; // struct pose_move_toResult_

typedef ::robot_scheduling_msgs::pose_move_toResult_<std::allocator<void> > pose_move_toResult;

typedef boost::shared_ptr< ::robot_scheduling_msgs::pose_move_toResult > pose_move_toResultPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::pose_move_toResult const> pose_move_toResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.result_code == rhs.result_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33ed255516db1e8f5c1e9da968ab3e0e";
  }

  static const char* value(const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33ed255516db1e8fULL;
  static const uint64_t static_value2 = 0x5c1e9da968ab3e0eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/pose_move_toResult";
  }

  static const char* value(const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"uint8 OK=1\n"
"uint8 NOT_OK=2\n"
"uint8 TIMED_OUT=3\n"
"uint8 OUT_OF_TIMES=4\n"
"uint8 NOT_POSE_ID=5\n"
"uint8 result\n"
"locomotor_msgs/ResultCode result_code\n"
"\n"
"================================================================================\n"
"MSG: locomotor_msgs/ResultCode\n"
"# This message contains three separate pieces.\n"
"#    A) A code indicating which component(s) the error originates from (bitmask style)\n"
"#    B) A code corresponding with the result_code defined in nav_core2/s.h\n"
"#    C) A freeform string message\n"
"\n"
"# The enumerations below are not necessarily the exclusive values for the codes.\n"
"# Others may implement additional values beyond the ones shown, using custom state machines.\n"
"\n"
"########### Component Values ###############################################\n"
"int32 GLOBAL_COSTMAP = 1\n"
"int32  LOCAL_COSTMAP = 2\n"
"int32 GLOBAL_PLANNER = 4\n"
"int32  LOCAL_PLANNER = 8\n"
"\n"
"########### Result Codes ###################################################\n"
"int32 GENERIC_COSTMAP=0\n"
"int32 COSTMAP_SAFETY=1\n"
"int32 COSTMAP_DATA_LAG=2\n"
"int32 GENERIC_PLANNER=3\n"
"int32 GENERIC_GLOBAL_PLANNER=4\n"
"int32 INVALID_START=5\n"
"int32 START_BOUNDS=6\n"
"int32 OCCUPIED_START=7\n"
"int32 INVALID_GOAL=8\n"
"int32 GOAL_BOUNDS=9\n"
"int32 OCCUPIED_GOAL=10\n"
"int32 NO_GLOBAL_PATH=11\n"
"int32 GLOBAL_PLANNER_TIMEOUT=12\n"
"int32 GENERIC_LOCAL_PLANNER=13\n"
"int32 ILLEGAL_TRAJECTORY=14\n"
"int32 NO_LEGAL_TRAJECTORIES=15\n"
"int32 PLANNER_TF=16\n"
"\n"
"########### Actual Data ####################################################\n"
"int32 component\n"
"int32 result_code\n"
"string message\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.result_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_move_toResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::pose_move_toResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "result_code: ";
    s << std::endl;
    Printer< ::locomotor_msgs::ResultCode_<ContainerAllocator> >::stream(s, indent + "  ", v.result_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_POSE_MOVE_TORESULT_H
