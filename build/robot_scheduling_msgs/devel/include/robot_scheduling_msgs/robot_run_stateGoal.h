// Generated by gencpp from file robot_scheduling_msgs/robot_run_stateGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_RUN_STATEGOAL_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_RUN_STATEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct robot_run_stateGoal_
{
  typedef robot_run_stateGoal_<ContainerAllocator> Type;

  robot_run_stateGoal_()
    : command(0)
    , set_status(0)
    , set_status_code()  {
    }
  robot_run_stateGoal_(const ContainerAllocator& _alloc)
    : command(0)
    , set_status(0)
    , set_status_code(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;

   typedef uint8_t _set_status_type;
  _set_status_type set_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _set_status_code_type;
  _set_status_code_type set_status_code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GET)
  #undef GET
#endif
#if defined(_WIN32) && defined(SET)
  #undef SET
#endif
#if defined(_WIN32) && defined(GETALL)
  #undef GETALL
#endif
#if defined(_WIN32) && defined(PRE_GET)
  #undef PRE_GET
#endif
#if defined(_WIN32) && defined(PRE_SET)
  #undef PRE_SET
#endif
#if defined(_WIN32) && defined(PRE_GETALL)
  #undef PRE_GETALL
#endif
#if defined(_WIN32) && defined(MANU_GET)
  #undef MANU_GET
#endif
#if defined(_WIN32) && defined(MANU_SET)
  #undef MANU_SET
#endif
#if defined(_WIN32) && defined(MANU_GETALL)
  #undef MANU_GETALL
#endif
#if defined(_WIN32) && defined(MANU_STARTCHECK)
  #undef MANU_STARTCHECK
#endif
#if defined(_WIN32) && defined(MANU_MODESET)
  #undef MANU_MODESET
#endif
#if defined(_WIN32) && defined(ALARM_RESETCHECK)
  #undef ALARM_RESETCHECK
#endif
#if defined(_WIN32) && defined(ALARM_RECOVERYCHECK)
  #undef ALARM_RECOVERYCHECK
#endif
#if defined(_WIN32) && defined(ALARM_RECOVERY_GETALL)
  #undef ALARM_RECOVERY_GETALL
#endif
#if defined(_WIN32) && defined(SYS_RESTARTCHECK)
  #undef SYS_RESTARTCHECK
#endif
#if defined(_WIN32) && defined(REMOTE_STARTCHECK)
  #undef REMOTE_STARTCHECK
#endif
#if defined(_WIN32) && defined(REMOTE_GETALL)
  #undef REMOTE_GETALL
#endif
#if defined(_WIN32) && defined(REMOTE_MODESET)
  #undef REMOTE_MODESET
#endif
#if defined(_WIN32) && defined(PLANTOEXEC)
  #undef PLANTOEXEC
#endif

  enum {
    GET = 1u,
    SET = 2u,
    GETALL = 3u,
    PRE_GET = 4u,
    PRE_SET = 5u,
    PRE_GETALL = 6u,
    MANU_GET = 7u,
    MANU_SET = 8u,
    MANU_GETALL = 9u,
    MANU_STARTCHECK = 10u,
    MANU_MODESET = 11u,
    ALARM_RESETCHECK = 12u,
    ALARM_RECOVERYCHECK = 13u,
    ALARM_RECOVERY_GETALL = 14u,
    SYS_RESTARTCHECK = 15u,
    REMOTE_STARTCHECK = 16u,
    REMOTE_GETALL = 17u,
    REMOTE_MODESET = 18u,
    PLANTOEXEC = 19u,
  };


  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> const> ConstPtr;

}; // struct robot_run_stateGoal_

typedef ::robot_scheduling_msgs::robot_run_stateGoal_<std::allocator<void> > robot_run_stateGoal;

typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_run_stateGoal > robot_run_stateGoalPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_run_stateGoal const> robot_run_stateGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.set_status == rhs.set_status &&
    lhs.set_status_code == rhs.set_status_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "689dd4985997762e8811a55ee18bb5f4";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x689dd4985997762eULL;
  static const uint64_t static_value2 = 0x8811a55ee18bb5f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/robot_run_stateGoal";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"uint8 GET=1\n"
"uint8 SET=2\n"
"uint8 GETALL=3\n"
"uint8 PRE_GET=4\n"
"uint8 PRE_SET=5\n"
"uint8 PRE_GETALL=6\n"
"uint8 MANU_GET=7\n"
"uint8 MANU_SET=8\n"
"uint8 MANU_GETALL=9\n"
"uint8 MANU_STARTCHECK=10\n"
"uint8 MANU_MODESET=11\n"
"uint8 ALARM_RESETCHECK=12\n"
"uint8 ALARM_RECOVERYCHECK=13\n"
"uint8 ALARM_RECOVERY_GETALL=14\n"
"uint8 SYS_RESTARTCHECK=15\n"
"uint8 REMOTE_STARTCHECK=16\n"
"uint8 REMOTE_GETALL=17\n"
"uint8 REMOTE_MODESET=18\n"
"uint8 PLANTOEXEC=19\n"
"uint8 command\n"
"uint8 set_status\n"
"#uint8[] set_alarmcode\n"
"string set_status_code	#for alarm code or other's application\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.set_status);
      stream.next(m.set_status_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_run_stateGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::robot_run_stateGoal_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "set_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_status);
    s << indent << "set_status_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.set_status_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_RUN_STATEGOAL_H
