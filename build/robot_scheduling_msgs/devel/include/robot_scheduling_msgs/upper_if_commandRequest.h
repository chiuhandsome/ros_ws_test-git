// Generated by gencpp from file robot_scheduling_msgs/upper_if_commandRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_UPPER_IF_COMMANDREQUEST_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_UPPER_IF_COMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_scheduling_msgs/robot_topic_command.h>

namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct upper_if_commandRequest_
{
  typedef upper_if_commandRequest_<ContainerAllocator> Type;

  upper_if_commandRequest_()
    : upper_cmd()  {
    }
  upper_if_commandRequest_(const ContainerAllocator& _alloc)
    : upper_cmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator>  _upper_cmd_type;
  _upper_cmd_type upper_cmd;





  typedef boost::shared_ptr< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct upper_if_commandRequest_

typedef ::robot_scheduling_msgs::upper_if_commandRequest_<std::allocator<void> > upper_if_commandRequest;

typedef boost::shared_ptr< ::robot_scheduling_msgs::upper_if_commandRequest > upper_if_commandRequestPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::upper_if_commandRequest const> upper_if_commandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.upper_cmd == rhs.upper_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a0df7aa005700d206435b2924cf5a17";
  }

  static const char* value(const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a0df7aa005700d2ULL;
  static const uint64_t static_value2 = 0x06435b2924cf5a17ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/upper_if_commandRequest";
  }

  static const char* value(const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# set command type and its data \n"
"\n"
"robot_topic_command upper_cmd\n"
"\n"
"================================================================================\n"
"MSG: robot_scheduling_msgs/robot_topic_command\n"
"# set command type and its data \n"
"string robot_name                        # the name of the robot (used in preconditions and topics)\n"
"#--------------------------\n"
"uint8 GET_STATUS=1\n"
"uint8 SET_COMMAND=2\n"
"uint8 cmd_type\n"
"#--------------------------	\n"
"uint16 STATUS=1	 \n"
"uint16 MODE_STANDBY=3	\n"
"uint16 MODE_MANUAL=4	 \n"
"uint16 MODE_REMOTE=5\n"
"uint16 MODE_MANU_ACT=40	\n"
"uint16 MODE_MANU_SET=41\n"
"uint16 MODE_MANU_NONE=400\n"
"uint16 MODE_MANU_PLANTOEXEC=410	\n"
"uint16 MODE_MANU_PLANTOEXEC_RUN=411\n"
"uint16 MODE_MANU_PLANTOEXEC_END=412	\n"
"uint16 MODE_MANU_MOVEINT=420	\n"
"uint16 MODE_MANU_MOVE=430	\n"
"uint16 MODE_MANU_TURN=440\n"
"uint16 MODE_MANU_WORKSHEET=450	\n"
"uint16 MODE_MANU_SAVE=460\n"
"\n"
"uint16 MODE_REMOTE_ACT=50	\n"
"uint16 MODE_REMOTE_SET=51\n"
"uint16 MODE_REMOTE_NONE=500\n"
"uint16 MODE_REMOTEP_WORKSHEET=510\n"
"uint16 MODE_REMOTEP_WORKSHEET_CONT_TEST=520\n"
"\n"
"#uint16 MODE_REMOTE_WORKSHEET_ACT=50\n"
"#uint16 MODE_REMOTE_WORKSHEET_NO=51\n"
"#uint16 ALARM_CONF=61	\n"
"uint16 ALARM_RESET=60	\n"
"uint16 ALARM_RECOVERY_ACT=70\n"
"uint16 ALARM_RECOVERY_SET=71\n"
"uint16 ALARM_RECOVERY_NONE=700\n"
"uint16 ALARM_RECOVERY_PLANTOEXEC=710	\n"
"uint16 SYSTEM_RESTART=80	\n"
"uint16 cmd_id  	\n"
"#--------------------------\n"
"string cmd_data\n"
"#--------------------------\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.upper_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct upper_if_commandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::upper_if_commandRequest_<ContainerAllocator>& v)
  {
    s << indent << "upper_cmd: ";
    s << std::endl;
    Printer< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_UPPER_IF_COMMANDREQUEST_H
