// Generated by gencpp from file robot_scheduling_msgs/power_chargeFeedback.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_POWER_CHARGEFEEDBACK_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_POWER_CHARGEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct power_chargeFeedback_
{
  typedef power_chargeFeedback_<ContainerAllocator> Type;

  power_chargeFeedback_()
    : charge_fb_state(0)  {
    }
  power_chargeFeedback_(const ContainerAllocator& _alloc)
    : charge_fb_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _charge_fb_state_type;
  _charge_fb_state_type charge_fb_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CHARGE_NONE)
  #undef CHARGE_NONE
#endif
#if defined(_WIN32) && defined(CHARGE_PRE_CHECK_OK)
  #undef CHARGE_PRE_CHECK_OK
#endif
#if defined(_WIN32) && defined(CHARGE_CHECK_OK)
  #undef CHARGE_CHECK_OK
#endif
#if defined(_WIN32) && defined(CHARGEING)
  #undef CHARGEING
#endif
#if defined(_WIN32) && defined(CHARGE_OK)
  #undef CHARGE_OK
#endif

  enum {
    CHARGE_NONE = 0u,
    CHARGE_PRE_CHECK_OK = 1u,
    CHARGE_CHECK_OK = 2u,
    CHARGEING = 3u,
    CHARGE_OK = 4u,
  };


  typedef boost::shared_ptr< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct power_chargeFeedback_

typedef ::robot_scheduling_msgs::power_chargeFeedback_<std::allocator<void> > power_chargeFeedback;

typedef boost::shared_ptr< ::robot_scheduling_msgs::power_chargeFeedback > power_chargeFeedbackPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::power_chargeFeedback const> power_chargeFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.charge_fb_state == rhs.charge_fb_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6765288e830c13508aae741a3a33a28d";
  }

  static const char* value(const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6765288e830c1350ULL;
  static const uint64_t static_value2 = 0x8aae741a3a33a28dULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/power_chargeFeedback";
  }

  static const char* value(const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"uint8 CHARGE_NONE=0\n"
"uint8 CHARGE_PRE_CHECK_OK=1\n"
"uint8 CHARGE_CHECK_OK=2\n"
"uint8 CHARGEING=3\n"
"uint8 CHARGE_OK=4\n"
"uint8 charge_fb_state\n"
"\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.charge_fb_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct power_chargeFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::power_chargeFeedback_<ContainerAllocator>& v)
  {
    s << indent << "charge_fb_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charge_fb_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_POWER_CHARGEFEEDBACK_H
