// Generated by gencpp from file reset_location/TrilaterationResult.msg
// DO NOT EDIT!


#ifndef RESET_LOCATION_MESSAGE_TRILATERATIONRESULT_H
#define RESET_LOCATION_MESSAGE_TRILATERATIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace reset_location
{
template <class ContainerAllocator>
struct TrilaterationResult_
{
  typedef TrilaterationResult_<ContainerAllocator> Type;

  TrilaterationResult_()
    : error_code(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)  {
    }
  TrilaterationResult_(const ContainerAllocator& _alloc)
    : error_code(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::reset_location::TrilaterationResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reset_location::TrilaterationResult_<ContainerAllocator> const> ConstPtr;

}; // struct TrilaterationResult_

typedef ::reset_location::TrilaterationResult_<std::allocator<void> > TrilaterationResult;

typedef boost::shared_ptr< ::reset_location::TrilaterationResult > TrilaterationResultPtr;
typedef boost::shared_ptr< ::reset_location::TrilaterationResult const> TrilaterationResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::reset_location::TrilaterationResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::reset_location::TrilaterationResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::reset_location::TrilaterationResult_<ContainerAllocator1> & lhs, const ::reset_location::TrilaterationResult_<ContainerAllocator2> & rhs)
{
  return lhs.error_code == rhs.error_code &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::reset_location::TrilaterationResult_<ContainerAllocator1> & lhs, const ::reset_location::TrilaterationResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace reset_location

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::reset_location::TrilaterationResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::reset_location::TrilaterationResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reset_location::TrilaterationResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::reset_location::TrilaterationResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reset_location::TrilaterationResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::reset_location::TrilaterationResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::reset_location::TrilaterationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb22ea92b965676338f7f0f6874fc242";
  }

  static const char* value(const ::reset_location::TrilaterationResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb22ea92b9656763ULL;
  static const uint64_t static_value2 = 0x38f7f0f6874fc242ULL;
};

template<class ContainerAllocator>
struct DataType< ::reset_location::TrilaterationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "reset_location/TrilaterationResult";
  }

  static const char* value(const ::reset_location::TrilaterationResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::reset_location::TrilaterationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result\n"
"int32   error_code \n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::reset_location::TrilaterationResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::reset_location::TrilaterationResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrilaterationResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reset_location::TrilaterationResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::reset_location::TrilaterationResult_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RESET_LOCATION_MESSAGE_TRILATERATIONRESULT_H
