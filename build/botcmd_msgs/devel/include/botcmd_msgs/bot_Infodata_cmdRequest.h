// Generated by gencpp from file botcmd_msgs/bot_Infodata_cmdRequest.msg
// DO NOT EDIT!


#ifndef BOTCMD_MSGS_MESSAGE_BOT_INFODATA_CMDREQUEST_H
#define BOTCMD_MSGS_MESSAGE_BOT_INFODATA_CMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace botcmd_msgs
{
template <class ContainerAllocator>
struct bot_Infodata_cmdRequest_
{
  typedef bot_Infodata_cmdRequest_<ContainerAllocator> Type;

  bot_Infodata_cmdRequest_()
    : command(0)  {
    }
  bot_Infodata_cmdRequest_(const ContainerAllocator& _alloc)
    : command(0)  {
  (void)_alloc;
    }



   typedef int8_t _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct bot_Infodata_cmdRequest_

typedef ::botcmd_msgs::bot_Infodata_cmdRequest_<std::allocator<void> > bot_Infodata_cmdRequest;

typedef boost::shared_ptr< ::botcmd_msgs::bot_Infodata_cmdRequest > bot_Infodata_cmdRequestPtr;
typedef boost::shared_ptr< ::botcmd_msgs::bot_Infodata_cmdRequest const> bot_Infodata_cmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace botcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "481ac5a494c3140a2539020bd74c82c7";
  }

  static const char* value(const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x481ac5a494c3140aULL;
  static const uint64_t static_value2 = 0x2539020bd74c82c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "botcmd_msgs/bot_Infodata_cmdRequest";
  }

  static const char* value(const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 command\n"
;
  }

  static const char* value(const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_Infodata_cmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::botcmd_msgs::bot_Infodata_cmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOTCMD_MSGS_MESSAGE_BOT_INFODATA_CMDREQUEST_H
