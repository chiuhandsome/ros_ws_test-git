// Generated by gencpp from file botcmd_msgs/bot_pubstatus.msg
// DO NOT EDIT!


#ifndef BOTCMD_MSGS_MESSAGE_BOT_PUBSTATUS_H
#define BOTCMD_MSGS_MESSAGE_BOT_PUBSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace botcmd_msgs
{
template <class ContainerAllocator>
struct bot_pubstatus_
{
  typedef bot_pubstatus_<ContainerAllocator> Type;

  bot_pubstatus_()
    : seq(0)
    , stamp()
    , device_ID()
    , status()
    , error_code()
    , data()  {
    }
  bot_pubstatus_(const ContainerAllocator& _alloc)
    : seq(0)
    , stamp()
    , device_ID(_alloc)
    , status(_alloc)
    , error_code(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _device_ID_type;
  _device_ID_type device_ID;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _status_type;
  _status_type status;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _error_code_type;
  _error_code_type error_code;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> const> ConstPtr;

}; // struct bot_pubstatus_

typedef ::botcmd_msgs::bot_pubstatus_<std::allocator<void> > bot_pubstatus;

typedef boost::shared_ptr< ::botcmd_msgs::bot_pubstatus > bot_pubstatusPtr;
typedef boost::shared_ptr< ::botcmd_msgs::bot_pubstatus const> bot_pubstatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.device_ID == rhs.device_ID &&
    lhs.status == rhs.status &&
    lhs.error_code == rhs.error_code &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace botcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1817e5d1572e2f529a3329b34502065";
  }

  static const char* value(const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1817e5d1572e2f5ULL;
  static const uint64_t static_value2 = 0x29a3329b34502065ULL;
};

template<class ContainerAllocator>
struct DataType< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "botcmd_msgs/bot_pubstatus";
  }

  static const char* value(const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 seq\n"
"time stamp\n"
"int8[] device_ID\n"
"int8[] status\n"
"int8[] error_code\n"
"string[] data\n"
;
  }

  static const char* value(const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.device_ID);
      stream.next(m.status);
      stream.next(m.error_code);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_pubstatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::botcmd_msgs::bot_pubstatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::botcmd_msgs::bot_pubstatus_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "device_ID[]" << std::endl;
    for (size_t i = 0; i < v.device_ID.size(); ++i)
    {
      s << indent << "  device_ID[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.device_ID[i]);
    }
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.status[i]);
    }
    s << indent << "error_code[]" << std::endl;
    for (size_t i = 0; i < v.error_code.size(); ++i)
    {
      s << indent << "  error_code[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.error_code[i]);
    }
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOTCMD_MSGS_MESSAGE_BOT_PUBSTATUS_H
