// Generated by gencpp from file botcmd_msgs/bot_Infodata_cmdResponse.msg
// DO NOT EDIT!


#ifndef BOTCMD_MSGS_MESSAGE_BOT_INFODATA_CMDRESPONSE_H
#define BOTCMD_MSGS_MESSAGE_BOT_INFODATA_CMDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace botcmd_msgs
{
template <class ContainerAllocator>
struct bot_Infodata_cmdResponse_
{
  typedef bot_Infodata_cmdResponse_<ContainerAllocator> Type;

  bot_Infodata_cmdResponse_()
    : result(false)
    , stamp()
    , Command_Params(0)
    , info_status(0)
    , info_data()  {
    }
  bot_Infodata_cmdResponse_(const ContainerAllocator& _alloc)
    : result(false)
    , stamp()
    , Command_Params(0)
    , info_status(0)
    , info_data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int8_t _Command_Params_type;
  _Command_Params_type Command_Params;

   typedef int8_t _info_status_type;
  _info_status_type info_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _info_data_type;
  _info_data_type info_data;





  typedef boost::shared_ptr< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct bot_Infodata_cmdResponse_

typedef ::botcmd_msgs::bot_Infodata_cmdResponse_<std::allocator<void> > bot_Infodata_cmdResponse;

typedef boost::shared_ptr< ::botcmd_msgs::bot_Infodata_cmdResponse > bot_Infodata_cmdResponsePtr;
typedef boost::shared_ptr< ::botcmd_msgs::bot_Infodata_cmdResponse const> bot_Infodata_cmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.stamp == rhs.stamp &&
    lhs.Command_Params == rhs.Command_Params &&
    lhs.info_status == rhs.info_status &&
    lhs.info_data == rhs.info_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace botcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b99027f173179712d6f26f7c1df06bc6";
  }

  static const char* value(const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb99027f173179712ULL;
  static const uint64_t static_value2 = 0xd6f26f7c1df06bc6ULL;
};

template<class ContainerAllocator>
struct DataType< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "botcmd_msgs/bot_Infodata_cmdResponse";
  }

  static const char* value(const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool result\n"
"time stamp\n"
"int8 Command_Params\n"
"int8 info_status\n"
"string info_data	\n"
"\n"
;
  }

  static const char* value(const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.stamp);
      stream.next(m.Command_Params);
      stream.next(m.info_status);
      stream.next(m.info_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_Infodata_cmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::botcmd_msgs::bot_Infodata_cmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "Command_Params: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Command_Params);
    s << indent << "info_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.info_status);
    s << indent << "info_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.info_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOTCMD_MSGS_MESSAGE_BOT_INFODATA_CMDRESPONSE_H
