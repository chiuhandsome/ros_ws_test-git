// Generated by gencpp from file botcmd_msgs/bot_battery_cmdResponse.msg
// DO NOT EDIT!


#ifndef BOTCMD_MSGS_MESSAGE_BOT_BATTERY_CMDRESPONSE_H
#define BOTCMD_MSGS_MESSAGE_BOT_BATTERY_CMDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace botcmd_msgs
{
template <class ContainerAllocator>
struct bot_battery_cmdResponse_
{
  typedef bot_battery_cmdResponse_<ContainerAllocator> Type;

  bot_battery_cmdResponse_()
    : result(false)
    , Command_Params(0)
    , stamp()
    , gen_alarmcode(0)
    , emg_alarmcode(0)
    , chargstate_code(0)
    , cell_balance_code(0)
    , cell_volt_min(0)
    , cell_volt_max(0)
    , chargcurrent_code(0)
    , full_capacity(0)
    , loop_counter(0)
    , cell_temp_min(0)
    , cell_temp_max(0)
    , Pack_tol_volt(0)
    , Pack_resistance(0)
    , total_discharge(0)
    , ASOC_code(0)
    , scaleunit_code(0)  {
    }
  bot_battery_cmdResponse_(const ContainerAllocator& _alloc)
    : result(false)
    , Command_Params(0)
    , stamp()
    , gen_alarmcode(0)
    , emg_alarmcode(0)
    , chargstate_code(0)
    , cell_balance_code(0)
    , cell_volt_min(0)
    , cell_volt_max(0)
    , chargcurrent_code(0)
    , full_capacity(0)
    , loop_counter(0)
    , cell_temp_min(0)
    , cell_temp_max(0)
    , Pack_tol_volt(0)
    , Pack_resistance(0)
    , total_discharge(0)
    , ASOC_code(0)
    , scaleunit_code(0)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef int8_t _Command_Params_type;
  _Command_Params_type Command_Params;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int16_t _gen_alarmcode_type;
  _gen_alarmcode_type gen_alarmcode;

   typedef int16_t _emg_alarmcode_type;
  _emg_alarmcode_type emg_alarmcode;

   typedef int16_t _chargstate_code_type;
  _chargstate_code_type chargstate_code;

   typedef int16_t _cell_balance_code_type;
  _cell_balance_code_type cell_balance_code;

   typedef int16_t _cell_volt_min_type;
  _cell_volt_min_type cell_volt_min;

   typedef int16_t _cell_volt_max_type;
  _cell_volt_max_type cell_volt_max;

   typedef int16_t _chargcurrent_code_type;
  _chargcurrent_code_type chargcurrent_code;

   typedef int16_t _full_capacity_type;
  _full_capacity_type full_capacity;

   typedef int16_t _loop_counter_type;
  _loop_counter_type loop_counter;

   typedef int8_t _cell_temp_min_type;
  _cell_temp_min_type cell_temp_min;

   typedef int8_t _cell_temp_max_type;
  _cell_temp_max_type cell_temp_max;

   typedef int16_t _Pack_tol_volt_type;
  _Pack_tol_volt_type Pack_tol_volt;

   typedef int16_t _Pack_resistance_type;
  _Pack_resistance_type Pack_resistance;

   typedef int32_t _total_discharge_type;
  _total_discharge_type total_discharge;

   typedef int16_t _ASOC_code_type;
  _ASOC_code_type ASOC_code;

   typedef int16_t _scaleunit_code_type;
  _scaleunit_code_type scaleunit_code;





  typedef boost::shared_ptr< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> const> ConstPtr;

}; // struct bot_battery_cmdResponse_

typedef ::botcmd_msgs::bot_battery_cmdResponse_<std::allocator<void> > bot_battery_cmdResponse;

typedef boost::shared_ptr< ::botcmd_msgs::bot_battery_cmdResponse > bot_battery_cmdResponsePtr;
typedef boost::shared_ptr< ::botcmd_msgs::bot_battery_cmdResponse const> bot_battery_cmdResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.Command_Params == rhs.Command_Params &&
    lhs.stamp == rhs.stamp &&
    lhs.gen_alarmcode == rhs.gen_alarmcode &&
    lhs.emg_alarmcode == rhs.emg_alarmcode &&
    lhs.chargstate_code == rhs.chargstate_code &&
    lhs.cell_balance_code == rhs.cell_balance_code &&
    lhs.cell_volt_min == rhs.cell_volt_min &&
    lhs.cell_volt_max == rhs.cell_volt_max &&
    lhs.chargcurrent_code == rhs.chargcurrent_code &&
    lhs.full_capacity == rhs.full_capacity &&
    lhs.loop_counter == rhs.loop_counter &&
    lhs.cell_temp_min == rhs.cell_temp_min &&
    lhs.cell_temp_max == rhs.cell_temp_max &&
    lhs.Pack_tol_volt == rhs.Pack_tol_volt &&
    lhs.Pack_resistance == rhs.Pack_resistance &&
    lhs.total_discharge == rhs.total_discharge &&
    lhs.ASOC_code == rhs.ASOC_code &&
    lhs.scaleunit_code == rhs.scaleunit_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace botcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d94744c0df16401b1a4e02ed7b3c83cb";
  }

  static const char* value(const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd94744c0df16401bULL;
  static const uint64_t static_value2 = 0x1a4e02ed7b3c83cbULL;
};

template<class ContainerAllocator>
struct DataType< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "botcmd_msgs/bot_battery_cmdResponse";
  }

  static const char* value(const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool  result\n"
"int8 Command_Params\n"
"time stamp\n"
"int16 gen_alarmcode		#address : 0x60\n"
"int16 emg_alarmcode		#address : 0x61\n"
"int16 chargstate_code	#address : 0x62\n"
"int16 cell_balance_code	#address : 0x63\n"
"int16 cell_volt_min		#address : 0x64 (mV/unit)\n"
"int16 cell_volt_max		#address : 0x65 (mV/unit)\n"
"int16 chargcurrent_code	#address : 0x66 (10mA/unit or mA/unit)\n"
"int16 full_capacity  	#address : 0x67 (mAH)\n"
"int16 loop_counter  	#address : 0x68 (times)\n"
"int8  cell_temp_min  	#address : 0x69-L (deg C)\n"
"int8  cell_temp_max  	#address : 0x69-H (deg C)\n"
"int16 Pack_tol_volt		#address : 0x6A (10mV/unit or mV/unit)\n"
"int16 Pack_resistance	#address : 0x6B (uOhm)\n"
"int32 total_discharge	#address : 0x6C_D (uAH)\n"
"int16 ASOC_code     	#address : 0x6E (%,absolute (remaining) capacity percentage of the battery pack)\n"
"int16 scaleunit_code	#address : 0x6F (conversion unit for voltage ,current and temperature)\n"
"\n"
;
  }

  static const char* value(const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.Command_Params);
      stream.next(m.stamp);
      stream.next(m.gen_alarmcode);
      stream.next(m.emg_alarmcode);
      stream.next(m.chargstate_code);
      stream.next(m.cell_balance_code);
      stream.next(m.cell_volt_min);
      stream.next(m.cell_volt_max);
      stream.next(m.chargcurrent_code);
      stream.next(m.full_capacity);
      stream.next(m.loop_counter);
      stream.next(m.cell_temp_min);
      stream.next(m.cell_temp_max);
      stream.next(m.Pack_tol_volt);
      stream.next(m.Pack_resistance);
      stream.next(m.total_discharge);
      stream.next(m.ASOC_code);
      stream.next(m.scaleunit_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_battery_cmdResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::botcmd_msgs::bot_battery_cmdResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "Command_Params: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Command_Params);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "gen_alarmcode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gen_alarmcode);
    s << indent << "emg_alarmcode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.emg_alarmcode);
    s << indent << "chargstate_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chargstate_code);
    s << indent << "cell_balance_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cell_balance_code);
    s << indent << "cell_volt_min: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cell_volt_min);
    s << indent << "cell_volt_max: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cell_volt_max);
    s << indent << "chargcurrent_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.chargcurrent_code);
    s << indent << "full_capacity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.full_capacity);
    s << indent << "loop_counter: ";
    Printer<int16_t>::stream(s, indent + "  ", v.loop_counter);
    s << indent << "cell_temp_min: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cell_temp_min);
    s << indent << "cell_temp_max: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cell_temp_max);
    s << indent << "Pack_tol_volt: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Pack_tol_volt);
    s << indent << "Pack_resistance: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Pack_resistance);
    s << indent << "total_discharge: ";
    Printer<int32_t>::stream(s, indent + "  ", v.total_discharge);
    s << indent << "ASOC_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ASOC_code);
    s << indent << "scaleunit_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.scaleunit_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOTCMD_MSGS_MESSAGE_BOT_BATTERY_CMDRESPONSE_H
