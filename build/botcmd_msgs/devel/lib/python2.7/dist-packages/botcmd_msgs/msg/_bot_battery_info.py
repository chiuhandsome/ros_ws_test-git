# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from botcmd_msgs/bot_battery_info.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class bot_battery_info(genpy.Message):
  _md5sum = "43216bcd23b79099892093ffe71f8fed"
  _type = "botcmd_msgs/bot_battery_info"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
int16 alarmcode	
int16 chargstate	 
int16 voltage	
int16 current	
int16 full_capacity
int16 percentage
"""
  __slots__ = ['stamp','alarmcode','chargstate','voltage','current','full_capacity','percentage']
  _slot_types = ['time','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,alarmcode,chargstate,voltage,current,full_capacity,percentage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bot_battery_info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.alarmcode is None:
        self.alarmcode = 0
      if self.chargstate is None:
        self.chargstate = 0
      if self.voltage is None:
        self.voltage = 0
      if self.current is None:
        self.current = 0
      if self.full_capacity is None:
        self.full_capacity = 0
      if self.percentage is None:
        self.percentage = 0
    else:
      self.stamp = genpy.Time()
      self.alarmcode = 0
      self.chargstate = 0
      self.voltage = 0
      self.current = 0
      self.full_capacity = 0
      self.percentage = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I6h().pack(_x.stamp.secs, _x.stamp.nsecs, _x.alarmcode, _x.chargstate, _x.voltage, _x.current, _x.full_capacity, _x.percentage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.stamp.secs, _x.stamp.nsecs, _x.alarmcode, _x.chargstate, _x.voltage, _x.current, _x.full_capacity, _x.percentage,) = _get_struct_2I6h().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I6h().pack(_x.stamp.secs, _x.stamp.nsecs, _x.alarmcode, _x.chargstate, _x.voltage, _x.current, _x.full_capacity, _x.percentage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.stamp.secs, _x.stamp.nsecs, _x.alarmcode, _x.chargstate, _x.voltage, _x.current, _x.full_capacity, _x.percentage,) = _get_struct_2I6h().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I6h = None
def _get_struct_2I6h():
    global _struct_2I6h
    if _struct_2I6h is None:
        _struct_2I6h = struct.Struct("<2I6h")
    return _struct_2I6h
