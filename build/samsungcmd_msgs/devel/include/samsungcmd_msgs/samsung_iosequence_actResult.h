// Generated by gencpp from file samsungcmd_msgs/samsung_iosequence_actResult.msg
// DO NOT EDIT!


#ifndef SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_IOSEQUENCE_ACTRESULT_H
#define SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_IOSEQUENCE_ACTRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace samsungcmd_msgs
{
template <class ContainerAllocator>
struct samsung_iosequence_actResult_
{
  typedef samsung_iosequence_actResult_<ContainerAllocator> Type;

  samsung_iosequence_actResult_()
    : b_result(false)  {
    }
  samsung_iosequence_actResult_(const ContainerAllocator& _alloc)
    : b_result(false)  {
  (void)_alloc;
    }



   typedef uint8_t _b_result_type;
  _b_result_type b_result;





  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> const> ConstPtr;

}; // struct samsung_iosequence_actResult_

typedef ::samsungcmd_msgs::samsung_iosequence_actResult_<std::allocator<void> > samsung_iosequence_actResult;

typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_iosequence_actResult > samsung_iosequence_actResultPtr;
typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_iosequence_actResult const> samsung_iosequence_actResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator2> & rhs)
{
  return lhs.b_result == rhs.b_result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace samsungcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6226b54418e78bf1522511c251a7c17";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6226b54418e78bfULL;
  static const uint64_t static_value2 = 0x1522511c251a7c17ULL;
};

template<class ContainerAllocator>
struct DataType< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "samsungcmd_msgs/samsung_iosequence_actResult";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"bool  	b_result\n"
;
  }

  static const char* value(const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.b_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct samsung_iosequence_actResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::samsungcmd_msgs::samsung_iosequence_actResult_<ContainerAllocator>& v)
  {
    s << indent << "b_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_IOSEQUENCE_ACTRESULT_H
