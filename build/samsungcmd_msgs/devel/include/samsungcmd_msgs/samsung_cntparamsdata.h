// Generated by gencpp from file samsungcmd_msgs/samsung_cntparamsdata.msg
// DO NOT EDIT!


#ifndef SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_CNTPARAMSDATA_H
#define SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_CNTPARAMSDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace samsungcmd_msgs
{
template <class ContainerAllocator>
struct samsung_cntparamsdata_
{
  typedef samsung_cntparamsdata_<ContainerAllocator> Type;

  samsung_cntparamsdata_()
    : Mag_center_analog(0.0)
    , Mag_center_digital(0)
    , car_roller_status(0)
    , car_velrpm_left(0.0)
    , car_velrpm_right(0.0)
    , car_control_code(0)
    , car_Status_code(0)
    , car_Command_code(0)
    , car_Error_code(0)
    , car_SetCommand(0)
    , roller_SetCommand(0)  {
    }
  samsung_cntparamsdata_(const ContainerAllocator& _alloc)
    : Mag_center_analog(0.0)
    , Mag_center_digital(0)
    , car_roller_status(0)
    , car_velrpm_left(0.0)
    , car_velrpm_right(0.0)
    , car_control_code(0)
    , car_Status_code(0)
    , car_Command_code(0)
    , car_Error_code(0)
    , car_SetCommand(0)
    , roller_SetCommand(0)  {
  (void)_alloc;
    }



   typedef float _Mag_center_analog_type;
  _Mag_center_analog_type Mag_center_analog;

   typedef int32_t _Mag_center_digital_type;
  _Mag_center_digital_type Mag_center_digital;

   typedef int8_t _car_roller_status_type;
  _car_roller_status_type car_roller_status;

   typedef float _car_velrpm_left_type;
  _car_velrpm_left_type car_velrpm_left;

   typedef float _car_velrpm_right_type;
  _car_velrpm_right_type car_velrpm_right;

   typedef int8_t _car_control_code_type;
  _car_control_code_type car_control_code;

   typedef int8_t _car_Status_code_type;
  _car_Status_code_type car_Status_code;

   typedef int8_t _car_Command_code_type;
  _car_Command_code_type car_Command_code;

   typedef int16_t _car_Error_code_type;
  _car_Error_code_type car_Error_code;

   typedef int32_t _car_SetCommand_type;
  _car_SetCommand_type car_SetCommand;

   typedef int32_t _roller_SetCommand_type;
  _roller_SetCommand_type roller_SetCommand;





  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> const> ConstPtr;

}; // struct samsung_cntparamsdata_

typedef ::samsungcmd_msgs::samsung_cntparamsdata_<std::allocator<void> > samsung_cntparamsdata;

typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_cntparamsdata > samsung_cntparamsdataPtr;
typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_cntparamsdata const> samsung_cntparamsdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator2> & rhs)
{
  return lhs.Mag_center_analog == rhs.Mag_center_analog &&
    lhs.Mag_center_digital == rhs.Mag_center_digital &&
    lhs.car_roller_status == rhs.car_roller_status &&
    lhs.car_velrpm_left == rhs.car_velrpm_left &&
    lhs.car_velrpm_right == rhs.car_velrpm_right &&
    lhs.car_control_code == rhs.car_control_code &&
    lhs.car_Status_code == rhs.car_Status_code &&
    lhs.car_Command_code == rhs.car_Command_code &&
    lhs.car_Error_code == rhs.car_Error_code &&
    lhs.car_SetCommand == rhs.car_SetCommand &&
    lhs.roller_SetCommand == rhs.roller_SetCommand;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace samsungcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "028fc3da18d39088df04b2e5220a67fe";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x028fc3da18d39088ULL;
  static const uint64_t static_value2 = 0xdf04b2e5220a67feULL;
};

template<class ContainerAllocator>
struct DataType< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "samsungcmd_msgs/samsung_cntparamsdata";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Mag_center_analog\n"
"int32 	Mag_center_digital\n"
"int8 	car_roller_status \n"
"float32 car_velrpm_left\n"
"float32 car_velrpm_right\n"
"int8 	car_control_code \n"
"int8 	car_Status_code \n"
"int8 	car_Command_code\n"
"int16 	car_Error_code \n"
"int32 	car_SetCommand \n"
"int32 	roller_SetCommand\n"
;
  }

  static const char* value(const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Mag_center_analog);
      stream.next(m.Mag_center_digital);
      stream.next(m.car_roller_status);
      stream.next(m.car_velrpm_left);
      stream.next(m.car_velrpm_right);
      stream.next(m.car_control_code);
      stream.next(m.car_Status_code);
      stream.next(m.car_Command_code);
      stream.next(m.car_Error_code);
      stream.next(m.car_SetCommand);
      stream.next(m.roller_SetCommand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct samsung_cntparamsdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::samsungcmd_msgs::samsung_cntparamsdata_<ContainerAllocator>& v)
  {
    s << indent << "Mag_center_analog: ";
    Printer<float>::stream(s, indent + "  ", v.Mag_center_analog);
    s << indent << "Mag_center_digital: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Mag_center_digital);
    s << indent << "car_roller_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.car_roller_status);
    s << indent << "car_velrpm_left: ";
    Printer<float>::stream(s, indent + "  ", v.car_velrpm_left);
    s << indent << "car_velrpm_right: ";
    Printer<float>::stream(s, indent + "  ", v.car_velrpm_right);
    s << indent << "car_control_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.car_control_code);
    s << indent << "car_Status_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.car_Status_code);
    s << indent << "car_Command_code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.car_Command_code);
    s << indent << "car_Error_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.car_Error_code);
    s << indent << "car_SetCommand: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_SetCommand);
    s << indent << "roller_SetCommand: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roller_SetCommand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_CNTPARAMSDATA_H
