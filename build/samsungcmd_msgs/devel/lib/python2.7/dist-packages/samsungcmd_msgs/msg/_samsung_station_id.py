# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from samsungcmd_msgs/samsung_station_id.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class samsung_station_id(genpy.Message):
  _md5sum = "f001fc825a44832e3c37deefba7596b8"
  _type = "samsungcmd_msgs/samsung_station_id"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string 	key_id
uint16  station_id
uint8 	station_type		# 0: sAnti-collision/1:direction-id
uint16 	delay_time		    # 0: - /1:keep time for straight-run
uint16 	timeout_value  		# 0: no respone for sAnti-collision/ 1:check out codition of turn	
uint16 	start_turn_right 	# 0: - /1:range start for turn-right	
uint16 	end_turn_right 		# 0: - /1:range end for turn-right
uint16 	start_straight 		# 0: - /1:range start for straight	
uint16 	end_straight 		# 0: - /1:range end for straight
uint16 	start_turn_left 	# 0: - /1:range start for turn-left	
uint16 	end_turn_left 		# 0: - /1:range end for turn-left
string 	update_time
"""
  __slots__ = ['key_id','station_id','station_type','delay_time','timeout_value','start_turn_right','end_turn_right','start_straight','end_straight','start_turn_left','end_turn_left','update_time']
  _slot_types = ['string','uint16','uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       key_id,station_id,station_type,delay_time,timeout_value,start_turn_right,end_turn_right,start_straight,end_straight,start_turn_left,end_turn_left,update_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(samsung_station_id, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.key_id is None:
        self.key_id = ''
      if self.station_id is None:
        self.station_id = 0
      if self.station_type is None:
        self.station_type = 0
      if self.delay_time is None:
        self.delay_time = 0
      if self.timeout_value is None:
        self.timeout_value = 0
      if self.start_turn_right is None:
        self.start_turn_right = 0
      if self.end_turn_right is None:
        self.end_turn_right = 0
      if self.start_straight is None:
        self.start_straight = 0
      if self.end_straight is None:
        self.end_straight = 0
      if self.start_turn_left is None:
        self.start_turn_left = 0
      if self.end_turn_left is None:
        self.end_turn_left = 0
      if self.update_time is None:
        self.update_time = ''
    else:
      self.key_id = ''
      self.station_id = 0
      self.station_type = 0
      self.delay_time = 0
      self.timeout_value = 0
      self.start_turn_right = 0
      self.end_turn_right = 0
      self.start_straight = 0
      self.end_straight = 0
      self.start_turn_left = 0
      self.end_turn_left = 0
      self.update_time = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.key_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_HB8H().pack(_x.station_id, _x.station_type, _x.delay_time, _x.timeout_value, _x.start_turn_right, _x.end_turn_right, _x.start_straight, _x.end_straight, _x.start_turn_left, _x.end_turn_left))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.key_id = str[start:end].decode('utf-8')
      else:
        self.key_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.station_id, _x.station_type, _x.delay_time, _x.timeout_value, _x.start_turn_right, _x.end_turn_right, _x.start_straight, _x.end_straight, _x.start_turn_left, _x.end_turn_left,) = _get_struct_HB8H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.key_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_HB8H().pack(_x.station_id, _x.station_type, _x.delay_time, _x.timeout_value, _x.start_turn_right, _x.end_turn_right, _x.start_straight, _x.end_straight, _x.start_turn_left, _x.end_turn_left))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.key_id = str[start:end].decode('utf-8')
      else:
        self.key_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.station_id, _x.station_type, _x.delay_time, _x.timeout_value, _x.start_turn_right, _x.end_turn_right, _x.start_straight, _x.end_straight, _x.start_turn_left, _x.end_turn_left,) = _get_struct_HB8H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HB8H = None
def _get_struct_HB8H():
    global _struct_HB8H
    if _struct_HB8H is None:
        _struct_HB8H = struct.Struct("<HB8H")
    return _struct_HB8H
