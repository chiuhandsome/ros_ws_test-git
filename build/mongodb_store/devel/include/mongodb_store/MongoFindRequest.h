// Generated by gencpp from file mongodb_store/MongoFindRequest.msg
// DO NOT EDIT!


#ifndef MONGODB_STORE_MESSAGE_MONGOFINDREQUEST_H
#define MONGODB_STORE_MESSAGE_MONGOFINDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mongodb_store
{
template <class ContainerAllocator>
struct MongoFindRequest_
{
  typedef MongoFindRequest_<ContainerAllocator> Type;

  MongoFindRequest_()
    : db()
    , collection()
    , query()  {
    }
  MongoFindRequest_(const ContainerAllocator& _alloc)
    : db(_alloc)
    , collection(_alloc)
    , query(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _db_type;
  _db_type db;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _collection_type;
  _collection_type collection;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _query_type;
  _query_type query;





  typedef boost::shared_ptr< ::mongodb_store::MongoFindRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mongodb_store::MongoFindRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MongoFindRequest_

typedef ::mongodb_store::MongoFindRequest_<std::allocator<void> > MongoFindRequest;

typedef boost::shared_ptr< ::mongodb_store::MongoFindRequest > MongoFindRequestPtr;
typedef boost::shared_ptr< ::mongodb_store::MongoFindRequest const> MongoFindRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mongodb_store::MongoFindRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mongodb_store::MongoFindRequest_<ContainerAllocator1> & lhs, const ::mongodb_store::MongoFindRequest_<ContainerAllocator2> & rhs)
{
  return lhs.db == rhs.db &&
    lhs.collection == rhs.collection &&
    lhs.query == rhs.query;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mongodb_store::MongoFindRequest_<ContainerAllocator1> & lhs, const ::mongodb_store::MongoFindRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mongodb_store

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mongodb_store::MongoFindRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mongodb_store::MongoFindRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mongodb_store::MongoFindRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfbcacecc78c9fa4f520fc6e13cbb788";
  }

  static const char* value(const ::mongodb_store::MongoFindRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfbcacecc78c9fa4ULL;
  static const uint64_t static_value2 = 0xf520fc6e13cbb788ULL;
};

template<class ContainerAllocator>
struct DataType< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mongodb_store/MongoFindRequest";
  }

  static const char* value(const ::mongodb_store::MongoFindRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string db\n"
"string collection\n"
"string query\n"
;
  }

  static const char* value(const ::mongodb_store::MongoFindRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.db);
      stream.next(m.collection);
      stream.next(m.query);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MongoFindRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mongodb_store::MongoFindRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mongodb_store::MongoFindRequest_<ContainerAllocator>& v)
  {
    s << indent << "db: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.db);
    s << indent << "collection: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.collection);
    s << indent << "query: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.query);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONGODB_STORE_MESSAGE_MONGOFINDREQUEST_H
