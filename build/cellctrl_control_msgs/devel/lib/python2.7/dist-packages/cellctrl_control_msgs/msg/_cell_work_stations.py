# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cellctrl_control_msgs/cell_work_stations.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class cell_work_stations(genpy.Message):
  _md5sum = "35ebd58c4ed76bc4d15807b8e51751b8"
  _type = "cellctrl_control_msgs/cell_work_stations"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string primary_id			# must-have,UUID : primary_key(system_id)
string unique_code 		        # must-have,UNIQUE INDEX	
string station_name		   
string cellcontroller_code 		 
geometry_msgs/Pose positioned_pose 		 
uint8  mc_func_code 	
uint8  transfer_code 	
uint8  transfer_state 
uint8  align_type
string align_metadata
geometry_msgs/Pose pre_positioned_pose
string Identify_id
string update_time			# must-have 	 

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['primary_id','unique_code','station_name','cellcontroller_code','positioned_pose','mc_func_code','transfer_code','transfer_state','align_type','align_metadata','pre_positioned_pose','Identify_id','update_time']
  _slot_types = ['string','string','string','string','geometry_msgs/Pose','uint8','uint8','uint8','uint8','string','geometry_msgs/Pose','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       primary_id,unique_code,station_name,cellcontroller_code,positioned_pose,mc_func_code,transfer_code,transfer_state,align_type,align_metadata,pre_positioned_pose,Identify_id,update_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cell_work_stations, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.primary_id is None:
        self.primary_id = ''
      if self.unique_code is None:
        self.unique_code = ''
      if self.station_name is None:
        self.station_name = ''
      if self.cellcontroller_code is None:
        self.cellcontroller_code = ''
      if self.positioned_pose is None:
        self.positioned_pose = geometry_msgs.msg.Pose()
      if self.mc_func_code is None:
        self.mc_func_code = 0
      if self.transfer_code is None:
        self.transfer_code = 0
      if self.transfer_state is None:
        self.transfer_state = 0
      if self.align_type is None:
        self.align_type = 0
      if self.align_metadata is None:
        self.align_metadata = ''
      if self.pre_positioned_pose is None:
        self.pre_positioned_pose = geometry_msgs.msg.Pose()
      if self.Identify_id is None:
        self.Identify_id = ''
      if self.update_time is None:
        self.update_time = ''
    else:
      self.primary_id = ''
      self.unique_code = ''
      self.station_name = ''
      self.cellcontroller_code = ''
      self.positioned_pose = geometry_msgs.msg.Pose()
      self.mc_func_code = 0
      self.transfer_code = 0
      self.transfer_state = 0
      self.align_type = 0
      self.align_metadata = ''
      self.pre_positioned_pose = geometry_msgs.msg.Pose()
      self.Identify_id = ''
      self.update_time = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.station_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.cellcontroller_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d4B().pack(_x.positioned_pose.position.x, _x.positioned_pose.position.y, _x.positioned_pose.position.z, _x.positioned_pose.orientation.x, _x.positioned_pose.orientation.y, _x.positioned_pose.orientation.z, _x.positioned_pose.orientation.w, _x.mc_func_code, _x.transfer_code, _x.transfer_state, _x.align_type))
      _x = self.align_metadata
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.pre_positioned_pose.position.x, _x.pre_positioned_pose.position.y, _x.pre_positioned_pose.position.z, _x.pre_positioned_pose.orientation.x, _x.pre_positioned_pose.orientation.y, _x.pre_positioned_pose.orientation.z, _x.pre_positioned_pose.orientation.w))
      _x = self.Identify_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.positioned_pose is None:
        self.positioned_pose = geometry_msgs.msg.Pose()
      if self.pre_positioned_pose is None:
        self.pre_positioned_pose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_code = str[start:end].decode('utf-8')
      else:
        self.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.station_name = str[start:end].decode('utf-8')
      else:
        self.station_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cellcontroller_code = str[start:end].decode('utf-8')
      else:
        self.cellcontroller_code = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.positioned_pose.position.x, _x.positioned_pose.position.y, _x.positioned_pose.position.z, _x.positioned_pose.orientation.x, _x.positioned_pose.orientation.y, _x.positioned_pose.orientation.z, _x.positioned_pose.orientation.w, _x.mc_func_code, _x.transfer_code, _x.transfer_state, _x.align_type,) = _get_struct_7d4B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.align_metadata = str[start:end].decode('utf-8')
      else:
        self.align_metadata = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.pre_positioned_pose.position.x, _x.pre_positioned_pose.position.y, _x.pre_positioned_pose.position.z, _x.pre_positioned_pose.orientation.x, _x.pre_positioned_pose.orientation.y, _x.pre_positioned_pose.orientation.z, _x.pre_positioned_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Identify_id = str[start:end].decode('utf-8')
      else:
        self.Identify_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.station_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.cellcontroller_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d4B().pack(_x.positioned_pose.position.x, _x.positioned_pose.position.y, _x.positioned_pose.position.z, _x.positioned_pose.orientation.x, _x.positioned_pose.orientation.y, _x.positioned_pose.orientation.z, _x.positioned_pose.orientation.w, _x.mc_func_code, _x.transfer_code, _x.transfer_state, _x.align_type))
      _x = self.align_metadata
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.pre_positioned_pose.position.x, _x.pre_positioned_pose.position.y, _x.pre_positioned_pose.position.z, _x.pre_positioned_pose.orientation.x, _x.pre_positioned_pose.orientation.y, _x.pre_positioned_pose.orientation.z, _x.pre_positioned_pose.orientation.w))
      _x = self.Identify_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.positioned_pose is None:
        self.positioned_pose = geometry_msgs.msg.Pose()
      if self.pre_positioned_pose is None:
        self.pre_positioned_pose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_code = str[start:end].decode('utf-8')
      else:
        self.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.station_name = str[start:end].decode('utf-8')
      else:
        self.station_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cellcontroller_code = str[start:end].decode('utf-8')
      else:
        self.cellcontroller_code = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.positioned_pose.position.x, _x.positioned_pose.position.y, _x.positioned_pose.position.z, _x.positioned_pose.orientation.x, _x.positioned_pose.orientation.y, _x.positioned_pose.orientation.z, _x.positioned_pose.orientation.w, _x.mc_func_code, _x.transfer_code, _x.transfer_state, _x.align_type,) = _get_struct_7d4B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.align_metadata = str[start:end].decode('utf-8')
      else:
        self.align_metadata = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.pre_positioned_pose.position.x, _x.pre_positioned_pose.position.y, _x.pre_positioned_pose.position.z, _x.pre_positioned_pose.orientation.x, _x.pre_positioned_pose.orientation.y, _x.pre_positioned_pose.orientation.z, _x.pre_positioned_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Identify_id = str[start:end].decode('utf-8')
      else:
        self.Identify_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_7d4B = None
def _get_struct_7d4B():
    global _struct_7d4B
    if _struct_7d4B is None:
        _struct_7d4B = struct.Struct("<7d4B")
    return _struct_7d4B
