# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cellctrl_control_msgs/cell_agv_main.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cell_agv_main(genpy.Message):
  _md5sum = "feec446d0776ec569e61a0ea7c5875f7"
  _type = "cellctrl_control_msgs/cell_agv_main"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string primary_id			# must-have,UUID : primary_key(system_id)
string unique_code 		        # must-have,UNIQUE INDEX	
string agv_standtype		   
string agv_model_no 		 
string agv_name 		 
uint8  agv_shape 	
float32 agv_shape_para0 
float32 agv_shape_para1 
float32 agv_shape_para2 	
uint8  agv_candidate 
uint8  agv_transfer_type
string put_in_service_date
float32 work_comulative_time
uint8 current_status
string update_time			# must-have 	 
"""
  __slots__ = ['primary_id','unique_code','agv_standtype','agv_model_no','agv_name','agv_shape','agv_shape_para0','agv_shape_para1','agv_shape_para2','agv_candidate','agv_transfer_type','put_in_service_date','work_comulative_time','current_status','update_time']
  _slot_types = ['string','string','string','string','string','uint8','float32','float32','float32','uint8','uint8','string','float32','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       primary_id,unique_code,agv_standtype,agv_model_no,agv_name,agv_shape,agv_shape_para0,agv_shape_para1,agv_shape_para2,agv_candidate,agv_transfer_type,put_in_service_date,work_comulative_time,current_status,update_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cell_agv_main, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.primary_id is None:
        self.primary_id = ''
      if self.unique_code is None:
        self.unique_code = ''
      if self.agv_standtype is None:
        self.agv_standtype = ''
      if self.agv_model_no is None:
        self.agv_model_no = ''
      if self.agv_name is None:
        self.agv_name = ''
      if self.agv_shape is None:
        self.agv_shape = 0
      if self.agv_shape_para0 is None:
        self.agv_shape_para0 = 0.
      if self.agv_shape_para1 is None:
        self.agv_shape_para1 = 0.
      if self.agv_shape_para2 is None:
        self.agv_shape_para2 = 0.
      if self.agv_candidate is None:
        self.agv_candidate = 0
      if self.agv_transfer_type is None:
        self.agv_transfer_type = 0
      if self.put_in_service_date is None:
        self.put_in_service_date = ''
      if self.work_comulative_time is None:
        self.work_comulative_time = 0.
      if self.current_status is None:
        self.current_status = 0
      if self.update_time is None:
        self.update_time = ''
    else:
      self.primary_id = ''
      self.unique_code = ''
      self.agv_standtype = ''
      self.agv_model_no = ''
      self.agv_name = ''
      self.agv_shape = 0
      self.agv_shape_para0 = 0.
      self.agv_shape_para1 = 0.
      self.agv_shape_para2 = 0.
      self.agv_candidate = 0
      self.agv_transfer_type = 0
      self.put_in_service_date = ''
      self.work_comulative_time = 0.
      self.current_status = 0
      self.update_time = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agv_standtype
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agv_model_no
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agv_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3f2B().pack(_x.agv_shape, _x.agv_shape_para0, _x.agv_shape_para1, _x.agv_shape_para2, _x.agv_candidate, _x.agv_transfer_type))
      _x = self.put_in_service_date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fB().pack(_x.work_comulative_time, _x.current_status))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_code = str[start:end].decode('utf-8')
      else:
        self.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_standtype = str[start:end].decode('utf-8')
      else:
        self.agv_standtype = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_model_no = str[start:end].decode('utf-8')
      else:
        self.agv_model_no = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_name = str[start:end].decode('utf-8')
      else:
        self.agv_name = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.agv_shape, _x.agv_shape_para0, _x.agv_shape_para1, _x.agv_shape_para2, _x.agv_candidate, _x.agv_transfer_type,) = _get_struct_B3f2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.put_in_service_date = str[start:end].decode('utf-8')
      else:
        self.put_in_service_date = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.work_comulative_time, _x.current_status,) = _get_struct_fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agv_standtype
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agv_model_no
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agv_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3f2B().pack(_x.agv_shape, _x.agv_shape_para0, _x.agv_shape_para1, _x.agv_shape_para2, _x.agv_candidate, _x.agv_transfer_type))
      _x = self.put_in_service_date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fB().pack(_x.work_comulative_time, _x.current_status))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_code = str[start:end].decode('utf-8')
      else:
        self.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_standtype = str[start:end].decode('utf-8')
      else:
        self.agv_standtype = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_model_no = str[start:end].decode('utf-8')
      else:
        self.agv_model_no = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agv_name = str[start:end].decode('utf-8')
      else:
        self.agv_name = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.agv_shape, _x.agv_shape_para0, _x.agv_shape_para1, _x.agv_shape_para2, _x.agv_candidate, _x.agv_transfer_type,) = _get_struct_B3f2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.put_in_service_date = str[start:end].decode('utf-8')
      else:
        self.put_in_service_date = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.work_comulative_time, _x.current_status,) = _get_struct_fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3f2B = None
def _get_struct_B3f2B():
    global _struct_B3f2B
    if _struct_B3f2B is None:
        _struct_B3f2B = struct.Struct("<B3f2B")
    return _struct_B3f2B
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
