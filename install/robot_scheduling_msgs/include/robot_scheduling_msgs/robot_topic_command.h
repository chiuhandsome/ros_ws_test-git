// Generated by gencpp from file robot_scheduling_msgs/robot_topic_command.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_TOPIC_COMMAND_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_TOPIC_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct robot_topic_command_
{
  typedef robot_topic_command_<ContainerAllocator> Type;

  robot_topic_command_()
    : robot_name()
    , cmd_type(0)
    , cmd_id(0)
    , cmd_data()  {
    }
  robot_topic_command_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , cmd_type(0)
    , cmd_id(0)
    , cmd_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef uint8_t _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef uint16_t _cmd_id_type;
  _cmd_id_type cmd_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_data_type;
  _cmd_data_type cmd_data;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GET_STATUS)
  #undef GET_STATUS
#endif
#if defined(_WIN32) && defined(SET_COMMAND)
  #undef SET_COMMAND
#endif
#if defined(_WIN32) && defined(STATUS)
  #undef STATUS
#endif
#if defined(_WIN32) && defined(MODE_STANDBY)
  #undef MODE_STANDBY
#endif
#if defined(_WIN32) && defined(MODE_MANUAL)
  #undef MODE_MANUAL
#endif
#if defined(_WIN32) && defined(MODE_REMOTE)
  #undef MODE_REMOTE
#endif
#if defined(_WIN32) && defined(MODE_MANU_ACT)
  #undef MODE_MANU_ACT
#endif
#if defined(_WIN32) && defined(MODE_MANU_SET)
  #undef MODE_MANU_SET
#endif
#if defined(_WIN32) && defined(MODE_MANU_NONE)
  #undef MODE_MANU_NONE
#endif
#if defined(_WIN32) && defined(MODE_MANU_PLANTOEXEC)
  #undef MODE_MANU_PLANTOEXEC
#endif
#if defined(_WIN32) && defined(MODE_MANU_PLANTOEXEC_RUN)
  #undef MODE_MANU_PLANTOEXEC_RUN
#endif
#if defined(_WIN32) && defined(MODE_MANU_PLANTOEXEC_END)
  #undef MODE_MANU_PLANTOEXEC_END
#endif
#if defined(_WIN32) && defined(MODE_MANU_MOVEINT)
  #undef MODE_MANU_MOVEINT
#endif
#if defined(_WIN32) && defined(MODE_MANU_MOVE)
  #undef MODE_MANU_MOVE
#endif
#if defined(_WIN32) && defined(MODE_MANU_TURN)
  #undef MODE_MANU_TURN
#endif
#if defined(_WIN32) && defined(MODE_MANU_WORKSHEET)
  #undef MODE_MANU_WORKSHEET
#endif
#if defined(_WIN32) && defined(MODE_MANU_SAVE)
  #undef MODE_MANU_SAVE
#endif
#if defined(_WIN32) && defined(MODE_REMOTE_ACT)
  #undef MODE_REMOTE_ACT
#endif
#if defined(_WIN32) && defined(MODE_REMOTE_SET)
  #undef MODE_REMOTE_SET
#endif
#if defined(_WIN32) && defined(MODE_REMOTE_NONE)
  #undef MODE_REMOTE_NONE
#endif
#if defined(_WIN32) && defined(MODE_REMOTEP_WORKSHEET)
  #undef MODE_REMOTEP_WORKSHEET
#endif
#if defined(_WIN32) && defined(MODE_REMOTEP_WORKSHEET_CONT_TEST)
  #undef MODE_REMOTEP_WORKSHEET_CONT_TEST
#endif
#if defined(_WIN32) && defined(ALARM_RESET)
  #undef ALARM_RESET
#endif
#if defined(_WIN32) && defined(ALARM_RECOVERY_ACT)
  #undef ALARM_RECOVERY_ACT
#endif
#if defined(_WIN32) && defined(ALARM_RECOVERY_SET)
  #undef ALARM_RECOVERY_SET
#endif
#if defined(_WIN32) && defined(ALARM_RECOVERY_NONE)
  #undef ALARM_RECOVERY_NONE
#endif
#if defined(_WIN32) && defined(ALARM_RECOVERY_PLANTOEXEC)
  #undef ALARM_RECOVERY_PLANTOEXEC
#endif
#if defined(_WIN32) && defined(SYSTEM_RESTART)
  #undef SYSTEM_RESTART
#endif

  enum {
    GET_STATUS = 1u,
    SET_COMMAND = 2u,
    STATUS = 1u,
    MODE_STANDBY = 3u,
    MODE_MANUAL = 4u,
    MODE_REMOTE = 5u,
    MODE_MANU_ACT = 40u,
    MODE_MANU_SET = 41u,
    MODE_MANU_NONE = 400u,
    MODE_MANU_PLANTOEXEC = 410u,
    MODE_MANU_PLANTOEXEC_RUN = 411u,
    MODE_MANU_PLANTOEXEC_END = 412u,
    MODE_MANU_MOVEINT = 420u,
    MODE_MANU_MOVE = 430u,
    MODE_MANU_TURN = 440u,
    MODE_MANU_WORKSHEET = 450u,
    MODE_MANU_SAVE = 460u,
    MODE_REMOTE_ACT = 50u,
    MODE_REMOTE_SET = 51u,
    MODE_REMOTE_NONE = 500u,
    MODE_REMOTEP_WORKSHEET = 510u,
    MODE_REMOTEP_WORKSHEET_CONT_TEST = 520u,
    ALARM_RESET = 60u,
    ALARM_RECOVERY_ACT = 70u,
    ALARM_RECOVERY_SET = 71u,
    ALARM_RECOVERY_NONE = 700u,
    ALARM_RECOVERY_PLANTOEXEC = 710u,
    SYSTEM_RESTART = 80u,
  };


  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> const> ConstPtr;

}; // struct robot_topic_command_

typedef ::robot_scheduling_msgs::robot_topic_command_<std::allocator<void> > robot_topic_command;

typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_topic_command > robot_topic_commandPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_topic_command const> robot_topic_commandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator2> & rhs)
{
  return lhs.robot_name == rhs.robot_name &&
    lhs.cmd_type == rhs.cmd_type &&
    lhs.cmd_id == rhs.cmd_id &&
    lhs.cmd_data == rhs.cmd_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69f0d27f0773a518111335f643914c01";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69f0d27f0773a518ULL;
  static const uint64_t static_value2 = 0x111335f643914c01ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/robot_topic_command";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# set command type and its data \n"
"string robot_name                        # the name of the robot (used in preconditions and topics)\n"
"#--------------------------\n"
"uint8 GET_STATUS=1\n"
"uint8 SET_COMMAND=2\n"
"uint8 cmd_type\n"
"#--------------------------	\n"
"uint16 STATUS=1	 \n"
"uint16 MODE_STANDBY=3	\n"
"uint16 MODE_MANUAL=4	 \n"
"uint16 MODE_REMOTE=5\n"
"uint16 MODE_MANU_ACT=40	\n"
"uint16 MODE_MANU_SET=41\n"
"uint16 MODE_MANU_NONE=400\n"
"uint16 MODE_MANU_PLANTOEXEC=410	\n"
"uint16 MODE_MANU_PLANTOEXEC_RUN=411\n"
"uint16 MODE_MANU_PLANTOEXEC_END=412	\n"
"uint16 MODE_MANU_MOVEINT=420	\n"
"uint16 MODE_MANU_MOVE=430	\n"
"uint16 MODE_MANU_TURN=440\n"
"uint16 MODE_MANU_WORKSHEET=450	\n"
"uint16 MODE_MANU_SAVE=460\n"
"\n"
"uint16 MODE_REMOTE_ACT=50	\n"
"uint16 MODE_REMOTE_SET=51\n"
"uint16 MODE_REMOTE_NONE=500\n"
"uint16 MODE_REMOTEP_WORKSHEET=510\n"
"uint16 MODE_REMOTEP_WORKSHEET_CONT_TEST=520\n"
"\n"
"#uint16 MODE_REMOTE_WORKSHEET_ACT=50\n"
"#uint16 MODE_REMOTE_WORKSHEET_NO=51\n"
"#uint16 ALARM_CONF=61	\n"
"uint16 ALARM_RESET=60	\n"
"uint16 ALARM_RECOVERY_ACT=70\n"
"uint16 ALARM_RECOVERY_SET=71\n"
"uint16 ALARM_RECOVERY_NONE=700\n"
"uint16 ALARM_RECOVERY_PLANTOEXEC=710	\n"
"uint16 SYSTEM_RESTART=80	\n"
"uint16 cmd_id  	\n"
"#--------------------------\n"
"string cmd_data\n"
"#--------------------------\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.cmd_type);
      stream.next(m.cmd_id);
      stream.next(m.cmd_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_topic_command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::robot_topic_command_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "cmd_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_type);
    s << indent << "cmd_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cmd_id);
    s << indent << "cmd_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_TOPIC_COMMAND_H
