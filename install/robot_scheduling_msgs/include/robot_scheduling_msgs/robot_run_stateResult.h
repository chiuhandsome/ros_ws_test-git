// Generated by gencpp from file robot_scheduling_msgs/robot_run_stateResult.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_RUN_STATERESULT_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_RUN_STATERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct robot_run_stateResult_
{
  typedef robot_run_stateResult_<ContainerAllocator> Type;

  robot_run_stateResult_()
    : status(0)
    , result(0)  {
    }
  robot_run_stateResult_(const ContainerAllocator& _alloc)
    : status(0)
    , result(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(UNKNOW)
  #undef UNKNOW
#endif
#if defined(_WIN32) && defined(AWARED)
  #undef AWARED
#endif
#if defined(_WIN32) && defined(STANDBY)
  #undef STANDBY
#endif
#if defined(_WIN32) && defined(MANUAL)
  #undef MANUAL
#endif
#if defined(_WIN32) && defined(REMOTE)
  #undef REMOTE
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(M_NONE)
  #undef M_NONE
#endif
#if defined(_WIN32) && defined(M_PLANTOEXEC)
  #undef M_PLANTOEXEC
#endif
#if defined(_WIN32) && defined(M_MOVEINT)
  #undef M_MOVEINT
#endif
#if defined(_WIN32) && defined(M_MOVE)
  #undef M_MOVE
#endif
#if defined(_WIN32) && defined(M_TURN)
  #undef M_TURN
#endif
#if defined(_WIN32) && defined(M_WORKSHEET)
  #undef M_WORKSHEET
#endif
#if defined(_WIN32) && defined(R_NONE)
  #undef R_NONE
#endif
#if defined(_WIN32) && defined(R_WORKSHEET)
  #undef R_WORKSHEET
#endif
#if defined(_WIN32) && defined(RECR_NONE)
  #undef RECR_NONE
#endif
#if defined(_WIN32) && defined(RECR_PLANTOEXEC)
  #undef RECR_PLANTOEXEC
#endif
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(NOT_OK)
  #undef NOT_OK
#endif
#if defined(_WIN32) && defined(TIMED_OUT)
  #undef TIMED_OUT
#endif
#if defined(_WIN32) && defined(OUT_OF_TIMES)
  #undef OUT_OF_TIMES
#endif
#if defined(_WIN32) && defined(ALARM)
  #undef ALARM
#endif
#if defined(_WIN32) && defined(NOT_ALARM)
  #undef NOT_ALARM
#endif
#if defined(_WIN32) && defined(PASS)
  #undef PASS
#endif
#if defined(_WIN32) && defined(CHANGE)
  #undef CHANGE
#endif
#if defined(_WIN32) && defined(NOT_CHANGE)
  #undef NOT_CHANGE
#endif

  enum {
    NONE = 10u,
    UNKNOW = 11u,
    AWARED = 12u,
    STANDBY = 13u,
    MANUAL = 14u,
    REMOTE = 15u,
    PAUSE = 16u,
    M_NONE = 20u,
    M_PLANTOEXEC = 21u,
    M_MOVEINT = 22u,
    M_MOVE = 23u,
    M_TURN = 24u,
    M_WORKSHEET = 25u,
    R_NONE = 30u,
    R_WORKSHEET = 31u,
    RECR_NONE = 40u,
    RECR_PLANTOEXEC = 41u,
    OK = 1u,
    NOT_OK = 2u,
    TIMED_OUT = 3u,
    OUT_OF_TIMES = 4u,
    ALARM = 5u,
    NOT_ALARM = 6u,
    PASS = 7u,
    CHANGE = 8u,
    NOT_CHANGE = 9u,
  };


  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> const> ConstPtr;

}; // struct robot_run_stateResult_

typedef ::robot_scheduling_msgs::robot_run_stateResult_<std::allocator<void> > robot_run_stateResult;

typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_run_stateResult > robot_run_stateResultPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_run_stateResult const> robot_run_stateResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0a2e84d2729bb798342792bacb089ff";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0a2e84d2729bb79ULL;
  static const uint64_t static_value2 = 0x8342792bacb089ffULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/robot_run_stateResult";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"uint8 NONE=10\n"
"uint8 UNKNOW=11\n"
"uint8 AWARED=12\n"
"uint8 STANDBY=13\n"
"uint8 MANUAL=14\n"
"uint8 REMOTE=15\n"
"uint8 PAUSE=16\n"
"uint8 M_NONE=20\n"
"uint8 M_PLANTOEXEC=21\n"
"uint8 M_MOVEINT=22\n"
"uint8 M_MOVE=23\n"
"uint8 M_TURN=24\n"
"uint8 M_WORKSHEET=25\n"
"uint8 R_NONE=30\n"
"uint8 R_WORKSHEET=31\n"
"uint8 RECR_NONE=40\n"
"uint8 RECR_PLANTOEXEC=41\n"
"uint8 status\n"
"uint8 OK=1\n"
"uint8 NOT_OK=2\n"
"uint8 TIMED_OUT=3\n"
"uint8 OUT_OF_TIMES=4\n"
"uint8 ALARM=5\n"
"uint8 NOT_ALARM=6\n"
"uint8 PASS=7\n"
"uint8 CHANGE=8\n"
"uint8 NOT_CHANGE=9\n"
"uint8 result\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_run_stateResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::robot_run_stateResult_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_RUN_STATERESULT_H
