// Generated by gencpp from file robot_scheduling_msgs/self_turn_toGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_SELF_TURN_TOGOAL_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_SELF_TURN_TOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct self_turn_toGoal_
{
  typedef self_turn_toGoal_<ContainerAllocator> Type;

  self_turn_toGoal_()
    : command_type()
    , command_id(0)
    , turn_id()
    , pid_id()
    , target_angle(0.0)
    , time_out(0.0)
    , turn_ac_name()  {
    }
  self_turn_toGoal_(const ContainerAllocator& _alloc)
    : command_type(_alloc)
    , command_id(0)
    , turn_id(_alloc)
    , pid_id(_alloc)
    , target_angle(0.0)
    , time_out(0.0)
    , turn_ac_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type_type;
  _command_type_type command_type;

   typedef uint8_t _command_id_type;
  _command_id_type command_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turn_id_type;
  _turn_id_type turn_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pid_id_type;
  _pid_id_type pid_id;

   typedef double _target_angle_type;
  _target_angle_type target_angle;

   typedef float _time_out_type;
  _time_out_type time_out;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _turn_ac_name_type;
  _turn_ac_name_type turn_ac_name;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TURN_ABS)
  #undef TURN_ABS
#endif
#if defined(_WIN32) && defined(TURN_REL)
  #undef TURN_REL
#endif
#if defined(_WIN32) && defined(TURN_INTERRUPE)
  #undef TURN_INTERRUPE
#endif

  enum {
    TURN_ABS = 1u,
    TURN_REL = 2u,
    TURN_INTERRUPE = 99u,
  };


  typedef boost::shared_ptr< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> const> ConstPtr;

}; // struct self_turn_toGoal_

typedef ::robot_scheduling_msgs::self_turn_toGoal_<std::allocator<void> > self_turn_toGoal;

typedef boost::shared_ptr< ::robot_scheduling_msgs::self_turn_toGoal > self_turn_toGoalPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::self_turn_toGoal const> self_turn_toGoalConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator2> & rhs)
{
  return lhs.command_type == rhs.command_type &&
    lhs.command_id == rhs.command_id &&
    lhs.turn_id == rhs.turn_id &&
    lhs.pid_id == rhs.pid_id &&
    lhs.target_angle == rhs.target_angle &&
    lhs.time_out == rhs.time_out &&
    lhs.turn_ac_name == rhs.turn_ac_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee4eb3479d122eb64fe4a90b44c760ac";
  }

  static const char* value(const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee4eb3479d122eb6ULL;
  static const uint64_t static_value2 = 0x4fe4a90b44c760acULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/self_turn_toGoal";
  }

  static const char* value(const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"string command_type\n"
"uint8 TURN_ABS=1\n"
"uint8 TURN_REL=2\n"
"uint8 TURN_INTERRUPE=99\n"
"uint8 command_id\n"
"string turn_id\n"
"string pid_id\n"
"float64 target_angle\n"
"float32 time_out\n"
"string turn_ac_name\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command_type);
      stream.next(m.command_id);
      stream.next(m.turn_id);
      stream.next(m.pid_id);
      stream.next(m.target_angle);
      stream.next(m.time_out);
      stream.next(m.turn_ac_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct self_turn_toGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::self_turn_toGoal_<ContainerAllocator>& v)
  {
    s << indent << "command_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command_type);
    s << indent << "command_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_id);
    s << indent << "turn_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turn_id);
    s << indent << "pid_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pid_id);
    s << indent << "target_angle: ";
    Printer<double>::stream(s, indent + "  ", v.target_angle);
    s << indent << "time_out: ";
    Printer<float>::stream(s, indent + "  ", v.time_out);
    s << indent << "turn_ac_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.turn_ac_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_SELF_TURN_TOGOAL_H
