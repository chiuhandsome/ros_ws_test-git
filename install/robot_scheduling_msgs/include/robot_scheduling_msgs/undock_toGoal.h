// Generated by gencpp from file robot_scheduling_msgs/undock_toGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_UNDOCK_TOGOAL_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_UNDOCK_TOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct undock_toGoal_
{
  typedef undock_toGoal_<ContainerAllocator> Type;

  undock_toGoal_()
    : undock_id()
    , pre_undock_id()
    , frame_id()
    , command(0)
    , undock_ac_name()  {
    }
  undock_toGoal_(const ContainerAllocator& _alloc)
    : undock_id(_alloc)
    , pre_undock_id(_alloc)
    , frame_id(_alloc)
    , command(0)
    , undock_ac_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _undock_id_type;
  _undock_id_type undock_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pre_undock_id_type;
  _pre_undock_id_type pre_undock_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef uint8_t _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _undock_ac_name_type;
  _undock_ac_name_type undock_ac_name;





  typedef boost::shared_ptr< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> const> ConstPtr;

}; // struct undock_toGoal_

typedef ::robot_scheduling_msgs::undock_toGoal_<std::allocator<void> > undock_toGoal;

typedef boost::shared_ptr< ::robot_scheduling_msgs::undock_toGoal > undock_toGoalPtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::undock_toGoal const> undock_toGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator2> & rhs)
{
  return lhs.undock_id == rhs.undock_id &&
    lhs.pre_undock_id == rhs.pre_undock_id &&
    lhs.frame_id == rhs.frame_id &&
    lhs.command == rhs.command &&
    lhs.undock_ac_name == rhs.undock_ac_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c066db22f7f814530a97fb0d46111a5a";
  }

  static const char* value(const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc066db22f7f81453ULL;
  static const uint64_t static_value2 = 0x0a97fb0d46111a5aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/undock_toGoal";
  }

  static const char* value(const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"string undock_id\n"
"string pre_undock_id\n"
"string frame_id\n"
"uint8 command\n"
"string undock_ac_name\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.undock_id);
      stream.next(m.pre_undock_id);
      stream.next(m.frame_id);
      stream.next(m.command);
      stream.next(m.undock_ac_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct undock_toGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::undock_toGoal_<ContainerAllocator>& v)
  {
    s << indent << "undock_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.undock_id);
    s << indent << "pre_undock_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pre_undock_id);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "undock_ac_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.undock_ac_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_UNDOCK_TOGOAL_H
