// Generated by gencpp from file robot_scheduling_msgs/robot_state.msg
// DO NOT EDIT!


#ifndef ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_STATE_H
#define ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_scheduling_msgs
{
template <class ContainerAllocator>
struct robot_state_
{
  typedef robot_state_<ContainerAllocator> Type;

  robot_state_()
    : robot_name()
    , shape(0)
    , shape_variables()
    , mode(0)
    , status(0)  {
    }
  robot_state_(const ContainerAllocator& _alloc)
    : robot_name(_alloc)
    , shape(0)
    , shape_variables(_alloc)
    , mode(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef int32_t _shape_type;
  _shape_type shape;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _shape_variables_type;
  _shape_variables_type shape_variables;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> const> ConstPtr;

}; // struct robot_state_

typedef ::robot_scheduling_msgs::robot_state_<std::allocator<void> > robot_state;

typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_state > robot_statePtr;
typedef boost::shared_ptr< ::robot_scheduling_msgs::robot_state const> robot_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_scheduling_msgs::robot_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_scheduling_msgs::robot_state_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_state_<ContainerAllocator2> & rhs)
{
  return lhs.robot_name == rhs.robot_name &&
    lhs.shape == rhs.shape &&
    lhs.shape_variables == rhs.shape_variables &&
    lhs.mode == rhs.mode &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_scheduling_msgs::robot_state_<ContainerAllocator1> & lhs, const ::robot_scheduling_msgs::robot_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_scheduling_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e76bc04491a1baa1d7d27f2cdd4d8c03";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe76bc04491a1baa1ULL;
  static const uint64_t static_value2 = 0xd7d27f2cdd4d8c03ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_scheduling_msgs/robot_state";
  }

  static const char* value(const ::robot_scheduling_msgs::robot_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_name                        # the name of the robot (used in preconditions and topics)\n"
"int32 shape                              # the shape of the robots (see enums)\n"
"float32[] shape_variables                # shape variables to define width height, ...\n"
"#RoutePrecondition sync                   # the current position in the last received plan (-1 means none)\n"
"int32   mode                             # the mode of operation\n"
"int32   status                           # the status of the robot\n"
"#int32   good_id                          # the good id attached to the robot\n"
"#int32   order_id                         # the order id scheduled to this robot (-1: none)\n"
"#int32   order_status                     # the status of the assigned order\n"
;
  }

  static const char* value(const ::robot_scheduling_msgs::robot_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_name);
      stream.next(m.shape);
      stream.next(m.shape_variables);
      stream.next(m.mode);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_scheduling_msgs::robot_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_scheduling_msgs::robot_state_<ContainerAllocator>& v)
  {
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "shape: ";
    Printer<int32_t>::stream(s, indent + "  ", v.shape);
    s << indent << "shape_variables[]" << std::endl;
    for (size_t i = 0; i < v.shape_variables.size(); ++i)
    {
      s << indent << "  shape_variables[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.shape_variables[i]);
    }
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SCHEDULING_MSGS_MESSAGE_ROBOT_STATE_H
