;; Auto-generated. Do not edit!


(when (boundp 'robot_scheduling_msgs::pose_recognizeResult)
  (if (not (find-package "ROBOT_SCHEDULING_MSGS"))
    (make-package "ROBOT_SCHEDULING_MSGS"))
  (shadow 'pose_recognizeResult (find-package "ROBOT_SCHEDULING_MSGS")))
(unless (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT")
  (make-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))

(in-package "ROS")
;;//! \htmlinclude pose_recognizeResult.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(intern "*OK*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))
(shadow '*OK* (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))
(defconstant robot_scheduling_msgs::pose_recognizeResult::*OK* 1)
(intern "*NOT_OK*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))
(shadow '*NOT_OK* (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))
(defconstant robot_scheduling_msgs::pose_recognizeResult::*NOT_OK* 2)
(intern "*TIMED_OUT*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))
(shadow '*TIMED_OUT* (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))
(defconstant robot_scheduling_msgs::pose_recognizeResult::*TIMED_OUT* 3)
(intern "*OUT_OF_TIMES*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))
(shadow '*OUT_OF_TIMES* (find-package "ROBOT_SCHEDULING_MSGS::POSE_RECOGNIZERESULT"))
(defconstant robot_scheduling_msgs::pose_recognizeResult::*OUT_OF_TIMES* 4)
(defclass robot_scheduling_msgs::pose_recognizeResult
  :super ros::object
  :slots (_result _pose_result ))

(defmethod robot_scheduling_msgs::pose_recognizeResult
  (:init
   (&key
    ((:result __result) 0)
    ((:pose_result __pose_result) (instance geometry_msgs::PoseWithCovarianceStamped :init))
    )
   (send-super :init)
   (setq _result (round __result))
   (setq _pose_result __pose_result)
   self)
  (:result
   (&optional __result)
   (if __result (setq _result __result)) _result)
  (:pose_result
   (&rest __pose_result)
   (if (keywordp (car __pose_result))
       (send* _pose_result __pose_result)
     (progn
       (if __pose_result (setq _pose_result (car __pose_result)))
       _pose_result)))
  (:serialization-length
   ()
   (+
    ;; uint8 _result
    1
    ;; geometry_msgs/PoseWithCovarianceStamped _pose_result
    (send _pose_result :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _result
       (write-byte _result s)
     ;; geometry_msgs/PoseWithCovarianceStamped _pose_result
       (send _pose_result :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _result
     (setq _result (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; geometry_msgs/PoseWithCovarianceStamped _pose_result
     (send _pose_result :deserialize buf ptr-) (incf ptr- (send _pose_result :serialization-length))
   ;;
   self)
  )

(setf (get robot_scheduling_msgs::pose_recognizeResult :md5sum-) "ee61f22dcc393e8f902870635c7bfecf")
(setf (get robot_scheduling_msgs::pose_recognizeResult :datatype-) "robot_scheduling_msgs/pose_recognizeResult")
(setf (get robot_scheduling_msgs::pose_recognizeResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result
uint8 OK=1
uint8 NOT_OK=2
uint8 TIMED_OUT=3
uint8 OUT_OF_TIMES=4
uint8 result
geometry_msgs/PoseWithCovarianceStamped pose_result
#nav_2d_msgs/Pose2DStamped pose_result

================================================================================
MSG: geometry_msgs/PoseWithCovarianceStamped
# This expresses an estimated pose with a reference coordinate frame and timestamp

Header header
PoseWithCovariance pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :robot_scheduling_msgs/pose_recognizeResult "ee61f22dcc393e8f902870635c7bfecf")


