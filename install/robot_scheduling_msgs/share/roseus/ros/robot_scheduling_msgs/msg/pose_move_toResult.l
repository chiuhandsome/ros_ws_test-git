;; Auto-generated. Do not edit!


(when (boundp 'robot_scheduling_msgs::pose_move_toResult)
  (if (not (find-package "ROBOT_SCHEDULING_MSGS"))
    (make-package "ROBOT_SCHEDULING_MSGS"))
  (shadow 'pose_move_toResult (find-package "ROBOT_SCHEDULING_MSGS")))
(unless (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT")
  (make-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))

(in-package "ROS")
;;//! \htmlinclude pose_move_toResult.msg.html
(if (not (find-package "LOCOMOTOR_MSGS"))
  (ros::roseus-add-msgs "locomotor_msgs"))


(intern "*OK*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(shadow '*OK* (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(defconstant robot_scheduling_msgs::pose_move_toResult::*OK* 1)
(intern "*NOT_OK*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(shadow '*NOT_OK* (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(defconstant robot_scheduling_msgs::pose_move_toResult::*NOT_OK* 2)
(intern "*TIMED_OUT*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(shadow '*TIMED_OUT* (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(defconstant robot_scheduling_msgs::pose_move_toResult::*TIMED_OUT* 3)
(intern "*OUT_OF_TIMES*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(shadow '*OUT_OF_TIMES* (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(defconstant robot_scheduling_msgs::pose_move_toResult::*OUT_OF_TIMES* 4)
(intern "*NOT_POSE_ID*" (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(shadow '*NOT_POSE_ID* (find-package "ROBOT_SCHEDULING_MSGS::POSE_MOVE_TORESULT"))
(defconstant robot_scheduling_msgs::pose_move_toResult::*NOT_POSE_ID* 5)
(defclass robot_scheduling_msgs::pose_move_toResult
  :super ros::object
  :slots (_result _result_code ))

(defmethod robot_scheduling_msgs::pose_move_toResult
  (:init
   (&key
    ((:result __result) 0)
    ((:result_code __result_code) (instance locomotor_msgs::ResultCode :init))
    )
   (send-super :init)
   (setq _result (round __result))
   (setq _result_code __result_code)
   self)
  (:result
   (&optional __result)
   (if __result (setq _result __result)) _result)
  (:result_code
   (&rest __result_code)
   (if (keywordp (car __result_code))
       (send* _result_code __result_code)
     (progn
       (if __result_code (setq _result_code (car __result_code)))
       _result_code)))
  (:serialization-length
   ()
   (+
    ;; uint8 _result
    1
    ;; locomotor_msgs/ResultCode _result_code
    (send _result_code :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _result
       (write-byte _result s)
     ;; locomotor_msgs/ResultCode _result_code
       (send _result_code :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _result
     (setq _result (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; locomotor_msgs/ResultCode _result_code
     (send _result_code :deserialize buf ptr-) (incf ptr- (send _result_code :serialization-length))
   ;;
   self)
  )

(setf (get robot_scheduling_msgs::pose_move_toResult :md5sum-) "33ed255516db1e8f5c1e9da968ab3e0e")
(setf (get robot_scheduling_msgs::pose_move_toResult :datatype-) "robot_scheduling_msgs/pose_move_toResult")
(setf (get robot_scheduling_msgs::pose_move_toResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result
uint8 OK=1
uint8 NOT_OK=2
uint8 TIMED_OUT=3
uint8 OUT_OF_TIMES=4
uint8 NOT_POSE_ID=5
uint8 result
locomotor_msgs/ResultCode result_code

================================================================================
MSG: locomotor_msgs/ResultCode
# This message contains three separate pieces.
#    A) A code indicating which component(s) the error originates from (bitmask style)
#    B) A code corresponding with the result_code defined in nav_core2/s.h
#    C) A freeform string message

# The enumerations below are not necessarily the exclusive values for the codes.
# Others may implement additional values beyond the ones shown, using custom state machines.

########### Component Values ###############################################
int32 GLOBAL_COSTMAP = 1
int32  LOCAL_COSTMAP = 2
int32 GLOBAL_PLANNER = 4
int32  LOCAL_PLANNER = 8

########### Result Codes ###################################################
int32 GENERIC_COSTMAP=0
int32 COSTMAP_SAFETY=1
int32 COSTMAP_DATA_LAG=2
int32 GENERIC_PLANNER=3
int32 GENERIC_GLOBAL_PLANNER=4
int32 INVALID_START=5
int32 START_BOUNDS=6
int32 OCCUPIED_START=7
int32 INVALID_GOAL=8
int32 GOAL_BOUNDS=9
int32 OCCUPIED_GOAL=10
int32 NO_GLOBAL_PATH=11
int32 GLOBAL_PLANNER_TIMEOUT=12
int32 GENERIC_LOCAL_PLANNER=13
int32 ILLEGAL_TRAJECTORY=14
int32 NO_LEGAL_TRAJECTORIES=15
int32 PLANNER_TF=16

########### Actual Data ####################################################
int32 component
int32 result_code
string message

")



(provide :robot_scheduling_msgs/pose_move_toResult "33ed255516db1e8f5c1e9da968ab3e0e")


