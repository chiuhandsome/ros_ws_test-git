// Auto-generated. Do not edit!

// (in-package robot_scheduling_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class dock_toGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.dock_id = null;
      this.pre_dock_id = null;
      this.frame_id = null;
      this.command = null;
      this.dock_ac_name = null;
      this.use_move_base = null;
    }
    else {
      if (initObj.hasOwnProperty('dock_id')) {
        this.dock_id = initObj.dock_id
      }
      else {
        this.dock_id = '';
      }
      if (initObj.hasOwnProperty('pre_dock_id')) {
        this.pre_dock_id = initObj.pre_dock_id
      }
      else {
        this.pre_dock_id = '';
      }
      if (initObj.hasOwnProperty('frame_id')) {
        this.frame_id = initObj.frame_id
      }
      else {
        this.frame_id = '';
      }
      if (initObj.hasOwnProperty('command')) {
        this.command = initObj.command
      }
      else {
        this.command = 0;
      }
      if (initObj.hasOwnProperty('dock_ac_name')) {
        this.dock_ac_name = initObj.dock_ac_name
      }
      else {
        this.dock_ac_name = '';
      }
      if (initObj.hasOwnProperty('use_move_base')) {
        this.use_move_base = initObj.use_move_base
      }
      else {
        this.use_move_base = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type dock_toGoal
    // Serialize message field [dock_id]
    bufferOffset = _serializer.string(obj.dock_id, buffer, bufferOffset);
    // Serialize message field [pre_dock_id]
    bufferOffset = _serializer.string(obj.pre_dock_id, buffer, bufferOffset);
    // Serialize message field [frame_id]
    bufferOffset = _serializer.string(obj.frame_id, buffer, bufferOffset);
    // Serialize message field [command]
    bufferOffset = _serializer.uint8(obj.command, buffer, bufferOffset);
    // Serialize message field [dock_ac_name]
    bufferOffset = _serializer.string(obj.dock_ac_name, buffer, bufferOffset);
    // Serialize message field [use_move_base]
    bufferOffset = _serializer.bool(obj.use_move_base, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type dock_toGoal
    let len;
    let data = new dock_toGoal(null);
    // Deserialize message field [dock_id]
    data.dock_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [pre_dock_id]
    data.pre_dock_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [frame_id]
    data.frame_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [command]
    data.command = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [dock_ac_name]
    data.dock_ac_name = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [use_move_base]
    data.use_move_base = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.dock_id.length;
    length += object.pre_dock_id.length;
    length += object.frame_id.length;
    length += object.dock_ac_name.length;
    return length + 18;
  }

  static datatype() {
    // Returns string type for a message object
    return 'robot_scheduling_msgs/dock_toGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'ff77f62eae339c0f037082a1f5744baf';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    string dock_id
    string pre_dock_id
    string frame_id
    uint8 command
    string dock_ac_name
    bool use_move_base
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new dock_toGoal(null);
    if (msg.dock_id !== undefined) {
      resolved.dock_id = msg.dock_id;
    }
    else {
      resolved.dock_id = ''
    }

    if (msg.pre_dock_id !== undefined) {
      resolved.pre_dock_id = msg.pre_dock_id;
    }
    else {
      resolved.pre_dock_id = ''
    }

    if (msg.frame_id !== undefined) {
      resolved.frame_id = msg.frame_id;
    }
    else {
      resolved.frame_id = ''
    }

    if (msg.command !== undefined) {
      resolved.command = msg.command;
    }
    else {
      resolved.command = 0
    }

    if (msg.dock_ac_name !== undefined) {
      resolved.dock_ac_name = msg.dock_ac_name;
    }
    else {
      resolved.dock_ac_name = ''
    }

    if (msg.use_move_base !== undefined) {
      resolved.use_move_base = msg.use_move_base;
    }
    else {
      resolved.use_move_base = false
    }

    return resolved;
    }
};

module.exports = dock_toGoal;
