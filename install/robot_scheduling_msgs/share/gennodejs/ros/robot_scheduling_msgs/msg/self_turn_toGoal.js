// Auto-generated. Do not edit!

// (in-package robot_scheduling_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class self_turn_toGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.command_type = null;
      this.command_id = null;
      this.turn_id = null;
      this.pid_id = null;
      this.target_angle = null;
      this.time_out = null;
      this.turn_ac_name = null;
    }
    else {
      if (initObj.hasOwnProperty('command_type')) {
        this.command_type = initObj.command_type
      }
      else {
        this.command_type = '';
      }
      if (initObj.hasOwnProperty('command_id')) {
        this.command_id = initObj.command_id
      }
      else {
        this.command_id = 0;
      }
      if (initObj.hasOwnProperty('turn_id')) {
        this.turn_id = initObj.turn_id
      }
      else {
        this.turn_id = '';
      }
      if (initObj.hasOwnProperty('pid_id')) {
        this.pid_id = initObj.pid_id
      }
      else {
        this.pid_id = '';
      }
      if (initObj.hasOwnProperty('target_angle')) {
        this.target_angle = initObj.target_angle
      }
      else {
        this.target_angle = 0.0;
      }
      if (initObj.hasOwnProperty('time_out')) {
        this.time_out = initObj.time_out
      }
      else {
        this.time_out = 0.0;
      }
      if (initObj.hasOwnProperty('turn_ac_name')) {
        this.turn_ac_name = initObj.turn_ac_name
      }
      else {
        this.turn_ac_name = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type self_turn_toGoal
    // Serialize message field [command_type]
    bufferOffset = _serializer.string(obj.command_type, buffer, bufferOffset);
    // Serialize message field [command_id]
    bufferOffset = _serializer.uint8(obj.command_id, buffer, bufferOffset);
    // Serialize message field [turn_id]
    bufferOffset = _serializer.string(obj.turn_id, buffer, bufferOffset);
    // Serialize message field [pid_id]
    bufferOffset = _serializer.string(obj.pid_id, buffer, bufferOffset);
    // Serialize message field [target_angle]
    bufferOffset = _serializer.float64(obj.target_angle, buffer, bufferOffset);
    // Serialize message field [time_out]
    bufferOffset = _serializer.float32(obj.time_out, buffer, bufferOffset);
    // Serialize message field [turn_ac_name]
    bufferOffset = _serializer.string(obj.turn_ac_name, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type self_turn_toGoal
    let len;
    let data = new self_turn_toGoal(null);
    // Deserialize message field [command_type]
    data.command_type = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [command_id]
    data.command_id = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [turn_id]
    data.turn_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [pid_id]
    data.pid_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [target_angle]
    data.target_angle = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [time_out]
    data.time_out = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [turn_ac_name]
    data.turn_ac_name = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.command_type.length;
    length += object.turn_id.length;
    length += object.pid_id.length;
    length += object.turn_ac_name.length;
    return length + 29;
  }

  static datatype() {
    // Returns string type for a message object
    return 'robot_scheduling_msgs/self_turn_toGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'ee4eb3479d122eb64fe4a90b44c760ac';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    string command_type
    uint8 TURN_ABS=1
    uint8 TURN_REL=2
    uint8 TURN_INTERRUPE=99
    uint8 command_id
    string turn_id
    string pid_id
    float64 target_angle
    float32 time_out
    string turn_ac_name
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new self_turn_toGoal(null);
    if (msg.command_type !== undefined) {
      resolved.command_type = msg.command_type;
    }
    else {
      resolved.command_type = ''
    }

    if (msg.command_id !== undefined) {
      resolved.command_id = msg.command_id;
    }
    else {
      resolved.command_id = 0
    }

    if (msg.turn_id !== undefined) {
      resolved.turn_id = msg.turn_id;
    }
    else {
      resolved.turn_id = ''
    }

    if (msg.pid_id !== undefined) {
      resolved.pid_id = msg.pid_id;
    }
    else {
      resolved.pid_id = ''
    }

    if (msg.target_angle !== undefined) {
      resolved.target_angle = msg.target_angle;
    }
    else {
      resolved.target_angle = 0.0
    }

    if (msg.time_out !== undefined) {
      resolved.time_out = msg.time_out;
    }
    else {
      resolved.time_out = 0.0
    }

    if (msg.turn_ac_name !== undefined) {
      resolved.turn_ac_name = msg.turn_ac_name;
    }
    else {
      resolved.turn_ac_name = ''
    }

    return resolved;
    }
};

// Constants for message
self_turn_toGoal.Constants = {
  TURN_ABS: 1,
  TURN_REL: 2,
  TURN_INTERRUPE: 99,
}

module.exports = self_turn_toGoal;
