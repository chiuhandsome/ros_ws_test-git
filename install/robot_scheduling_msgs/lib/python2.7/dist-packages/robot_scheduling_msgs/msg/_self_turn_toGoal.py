# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_scheduling_msgs/self_turn_toGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class self_turn_toGoal(genpy.Message):
  _md5sum = "ee4eb3479d122eb64fe4a90b44c760ac"
  _type = "robot_scheduling_msgs/self_turn_toGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
string command_type
uint8 TURN_ABS=1
uint8 TURN_REL=2
uint8 TURN_INTERRUPE=99
uint8 command_id
string turn_id
string pid_id
float64 target_angle
float32 time_out
string turn_ac_name
"""
  # Pseudo-constants
  TURN_ABS = 1
  TURN_REL = 2
  TURN_INTERRUPE = 99

  __slots__ = ['command_type','command_id','turn_id','pid_id','target_angle','time_out','turn_ac_name']
  _slot_types = ['string','uint8','string','string','float64','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command_type,command_id,turn_id,pid_id,target_angle,time_out,turn_ac_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(self_turn_toGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.command_type is None:
        self.command_type = ''
      if self.command_id is None:
        self.command_id = 0
      if self.turn_id is None:
        self.turn_id = ''
      if self.pid_id is None:
        self.pid_id = ''
      if self.target_angle is None:
        self.target_angle = 0.
      if self.time_out is None:
        self.time_out = 0.
      if self.turn_ac_name is None:
        self.turn_ac_name = ''
    else:
      self.command_type = ''
      self.command_id = 0
      self.turn_id = ''
      self.pid_id = ''
      self.target_angle = 0.
      self.time_out = 0.
      self.turn_ac_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.command_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.command_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.turn_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pid_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_df().pack(_x.target_angle, _x.time_out))
      _x = self.turn_ac_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command_type = str[start:end].decode('utf-8')
      else:
        self.command_type = str[start:end]
      start = end
      end += 1
      (self.command_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.turn_id = str[start:end].decode('utf-8')
      else:
        self.turn_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pid_id = str[start:end].decode('utf-8')
      else:
        self.pid_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.target_angle, _x.time_out,) = _get_struct_df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.turn_ac_name = str[start:end].decode('utf-8')
      else:
        self.turn_ac_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.command_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.command_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.turn_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pid_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_df().pack(_x.target_angle, _x.time_out))
      _x = self.turn_ac_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command_type = str[start:end].decode('utf-8')
      else:
        self.command_type = str[start:end]
      start = end
      end += 1
      (self.command_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.turn_id = str[start:end].decode('utf-8')
      else:
        self.turn_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pid_id = str[start:end].decode('utf-8')
      else:
        self.pid_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.target_angle, _x.time_out,) = _get_struct_df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.turn_ac_name = str[start:end].decode('utf-8')
      else:
        self.turn_ac_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_df = None
def _get_struct_df():
    global _struct_df
    if _struct_df is None:
        _struct_df = struct.Struct("<df")
    return _struct_df
