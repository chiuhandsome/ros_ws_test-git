# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_scheduling_msgs/robot_interface_proc_upperGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_interface_proc_upperGoal(genpy.Message):
  _md5sum = "3da02b69b8ebe7813f2a6a2b1eba6025"
  _type = "robot_scheduling_msgs/robot_interface_proc_upperGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
uint8 GET_STATUS=1
uint8 SET_COMMAND=2
uint8 cmd_type	
uint8 PUBLISH=1	 
uint8 BASE_CONNECT=2   
uint8 BASE_READY=3  
uint8 BASE_PROC=4   
uint8 LED=5	 
uint8 MUSIC=6	    
uint8 BATTERY=7	   
uint8 UTRASONIC=8	  
uint8 POWERCHARGE=9
uint8 cmd_id  	
string cmd_data
"""
  # Pseudo-constants
  GET_STATUS = 1
  SET_COMMAND = 2
  PUBLISH = 1
  BASE_CONNECT = 2
  BASE_READY = 3
  BASE_PROC = 4
  LED = 5
  MUSIC = 6
  BATTERY = 7
  UTRASONIC = 8
  POWERCHARGE = 9

  __slots__ = ['cmd_type','cmd_id','cmd_data']
  _slot_types = ['uint8','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_type,cmd_id,cmd_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_interface_proc_upperGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_type is None:
        self.cmd_type = 0
      if self.cmd_id is None:
        self.cmd_id = 0
      if self.cmd_data is None:
        self.cmd_data = ''
    else:
      self.cmd_type = 0
      self.cmd_id = 0
      self.cmd_data = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.cmd_type, _x.cmd_id))
      _x = self.cmd_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.cmd_type, _x.cmd_id,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd_data = str[start:end].decode('utf-8')
      else:
        self.cmd_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.cmd_type, _x.cmd_id))
      _x = self.cmd_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.cmd_type, _x.cmd_id,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd_data = str[start:end].decode('utf-8')
      else:
        self.cmd_data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
