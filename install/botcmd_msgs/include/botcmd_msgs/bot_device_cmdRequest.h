// Generated by gencpp from file botcmd_msgs/bot_device_cmdRequest.msg
// DO NOT EDIT!


#ifndef BOTCMD_MSGS_MESSAGE_BOT_DEVICE_CMDREQUEST_H
#define BOTCMD_MSGS_MESSAGE_BOT_DEVICE_CMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace botcmd_msgs
{
template <class ContainerAllocator>
struct bot_device_cmdRequest_
{
  typedef bot_device_cmdRequest_<ContainerAllocator> Type;

  bot_device_cmdRequest_()
    : dev_num(0)
    , devic_ID()
    , bActive()  {
    }
  bot_device_cmdRequest_(const ContainerAllocator& _alloc)
    : dev_num(0)
    , devic_ID(_alloc)
    , bActive(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _dev_num_type;
  _dev_num_type dev_num;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _devic_ID_type;
  _devic_ID_type devic_ID;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _bActive_type;
  _bActive_type bActive;





  typedef boost::shared_ptr< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct bot_device_cmdRequest_

typedef ::botcmd_msgs::bot_device_cmdRequest_<std::allocator<void> > bot_device_cmdRequest;

typedef boost::shared_ptr< ::botcmd_msgs::bot_device_cmdRequest > bot_device_cmdRequestPtr;
typedef boost::shared_ptr< ::botcmd_msgs::bot_device_cmdRequest const> bot_device_cmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.dev_num == rhs.dev_num &&
    lhs.devic_ID == rhs.devic_ID &&
    lhs.bActive == rhs.bActive;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator1> & lhs, const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace botcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7e74463056716f245d720726d54bcbf";
  }

  static const char* value(const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7e74463056716f2ULL;
  static const uint64_t static_value2 = 0x45d720726d54bcbfULL;
};

template<class ContainerAllocator>
struct DataType< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "botcmd_msgs/bot_device_cmdRequest";
  }

  static const char* value(const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8   dev_num\n"
"int8[] devic_ID\n"
"bool[] bActive\n"
;
  }

  static const char* value(const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dev_num);
      stream.next(m.devic_ID);
      stream.next(m.bActive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_device_cmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::botcmd_msgs::bot_device_cmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "dev_num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dev_num);
    s << indent << "devic_ID[]" << std::endl;
    for (size_t i = 0; i < v.devic_ID.size(); ++i)
    {
      s << indent << "  devic_ID[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.devic_ID[i]);
    }
    s << indent << "bActive[]" << std::endl;
    for (size_t i = 0; i < v.bActive.size(); ++i)
    {
      s << indent << "  bActive[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.bActive[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOTCMD_MSGS_MESSAGE_BOT_DEVICE_CMDREQUEST_H
