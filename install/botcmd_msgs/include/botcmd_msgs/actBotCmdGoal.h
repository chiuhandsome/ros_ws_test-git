// Generated by gencpp from file botcmd_msgs/actBotCmdGoal.msg
// DO NOT EDIT!


#ifndef BOTCMD_MSGS_MESSAGE_ACTBOTCMDGOAL_H
#define BOTCMD_MSGS_MESSAGE_ACTBOTCMDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace botcmd_msgs
{
template <class ContainerAllocator>
struct actBotCmdGoal_
{
  typedef actBotCmdGoal_<ContainerAllocator> Type;

  actBotCmdGoal_()
    : Device_ID(0)
    , Command_ID(0)
    , Command_Params(0)  {
    }
  actBotCmdGoal_(const ContainerAllocator& _alloc)
    : Device_ID(0)
    , Command_ID(0)
    , Command_Params(0)  {
  (void)_alloc;
    }



   typedef int8_t _Device_ID_type;
  _Device_ID_type Device_ID;

   typedef int8_t _Command_ID_type;
  _Command_ID_type Command_ID;

   typedef int16_t _Command_Params_type;
  _Command_Params_type Command_Params;





  typedef boost::shared_ptr< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> const> ConstPtr;

}; // struct actBotCmdGoal_

typedef ::botcmd_msgs::actBotCmdGoal_<std::allocator<void> > actBotCmdGoal;

typedef boost::shared_ptr< ::botcmd_msgs::actBotCmdGoal > actBotCmdGoalPtr;
typedef boost::shared_ptr< ::botcmd_msgs::actBotCmdGoal const> actBotCmdGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator1> & lhs, const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator2> & rhs)
{
  return lhs.Device_ID == rhs.Device_ID &&
    lhs.Command_ID == rhs.Command_ID &&
    lhs.Command_Params == rhs.Command_Params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator1> & lhs, const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace botcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13bb76852e6b4bbe28b7c35b8c876bc4";
  }

  static const char* value(const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13bb76852e6b4bbeULL;
  static const uint64_t static_value2 = 0x28b7c35b8c876bc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "botcmd_msgs/actBotCmdGoal";
  }

  static const char* value(const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"int8  Device_ID\n"
"int8  Command_ID\n"
"int16 Command_Params\n"
;
  }

  static const char* value(const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Device_ID);
      stream.next(m.Command_ID);
      stream.next(m.Command_Params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actBotCmdGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::botcmd_msgs::actBotCmdGoal_<ContainerAllocator>& v)
  {
    s << indent << "Device_ID: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Device_ID);
    s << indent << "Command_ID: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Command_ID);
    s << indent << "Command_Params: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Command_Params);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOTCMD_MSGS_MESSAGE_ACTBOTCMDGOAL_H
