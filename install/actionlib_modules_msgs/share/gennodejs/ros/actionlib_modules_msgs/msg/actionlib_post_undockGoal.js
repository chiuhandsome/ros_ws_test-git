// Auto-generated. Do not edit!

// (in-package actionlib_modules_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class actionlib_post_undockGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.call_aclib_name = null;
      this.dock_pose = null;
      this.dock_id = null;
      this.use_move_base = null;
      this.post_time = null;
      this.use_timeout = null;
      this.timeout = null;
    }
    else {
      if (initObj.hasOwnProperty('call_aclib_name')) {
        this.call_aclib_name = initObj.call_aclib_name
      }
      else {
        this.call_aclib_name = '';
      }
      if (initObj.hasOwnProperty('dock_pose')) {
        this.dock_pose = initObj.dock_pose
      }
      else {
        this.dock_pose = new geometry_msgs.msg.PoseStamped();
      }
      if (initObj.hasOwnProperty('dock_id')) {
        this.dock_id = initObj.dock_id
      }
      else {
        this.dock_id = '';
      }
      if (initObj.hasOwnProperty('use_move_base')) {
        this.use_move_base = initObj.use_move_base
      }
      else {
        this.use_move_base = false;
      }
      if (initObj.hasOwnProperty('post_time')) {
        this.post_time = initObj.post_time
      }
      else {
        this.post_time = 0.0;
      }
      if (initObj.hasOwnProperty('use_timeout')) {
        this.use_timeout = initObj.use_timeout
      }
      else {
        this.use_timeout = false;
      }
      if (initObj.hasOwnProperty('timeout')) {
        this.timeout = initObj.timeout
      }
      else {
        this.timeout = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type actionlib_post_undockGoal
    // Serialize message field [call_aclib_name]
    bufferOffset = _serializer.string(obj.call_aclib_name, buffer, bufferOffset);
    // Serialize message field [dock_pose]
    bufferOffset = geometry_msgs.msg.PoseStamped.serialize(obj.dock_pose, buffer, bufferOffset);
    // Serialize message field [dock_id]
    bufferOffset = _serializer.string(obj.dock_id, buffer, bufferOffset);
    // Serialize message field [use_move_base]
    bufferOffset = _serializer.bool(obj.use_move_base, buffer, bufferOffset);
    // Serialize message field [post_time]
    bufferOffset = _serializer.float32(obj.post_time, buffer, bufferOffset);
    // Serialize message field [use_timeout]
    bufferOffset = _serializer.bool(obj.use_timeout, buffer, bufferOffset);
    // Serialize message field [timeout]
    bufferOffset = _serializer.float32(obj.timeout, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type actionlib_post_undockGoal
    let len;
    let data = new actionlib_post_undockGoal(null);
    // Deserialize message field [call_aclib_name]
    data.call_aclib_name = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [dock_pose]
    data.dock_pose = geometry_msgs.msg.PoseStamped.deserialize(buffer, bufferOffset);
    // Deserialize message field [dock_id]
    data.dock_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [use_move_base]
    data.use_move_base = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [post_time]
    data.post_time = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [use_timeout]
    data.use_timeout = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [timeout]
    data.timeout = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.call_aclib_name.length;
    length += geometry_msgs.msg.PoseStamped.getMessageSize(object.dock_pose);
    length += object.dock_id.length;
    return length + 18;
  }

  static datatype() {
    // Returns string type for a message object
    return 'actionlib_modules_msgs/actionlib_post_undockGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '9c7a95ee383b31fc48324995326aa2f7';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    string call_aclib_name
    geometry_msgs/PoseStamped dock_pose
    string dock_id
    bool use_move_base
    float32 post_time
    bool use_timeout
    float32 timeout
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new actionlib_post_undockGoal(null);
    if (msg.call_aclib_name !== undefined) {
      resolved.call_aclib_name = msg.call_aclib_name;
    }
    else {
      resolved.call_aclib_name = ''
    }

    if (msg.dock_pose !== undefined) {
      resolved.dock_pose = geometry_msgs.msg.PoseStamped.Resolve(msg.dock_pose)
    }
    else {
      resolved.dock_pose = new geometry_msgs.msg.PoseStamped()
    }

    if (msg.dock_id !== undefined) {
      resolved.dock_id = msg.dock_id;
    }
    else {
      resolved.dock_id = ''
    }

    if (msg.use_move_base !== undefined) {
      resolved.use_move_base = msg.use_move_base;
    }
    else {
      resolved.use_move_base = false
    }

    if (msg.post_time !== undefined) {
      resolved.post_time = msg.post_time;
    }
    else {
      resolved.post_time = 0.0
    }

    if (msg.use_timeout !== undefined) {
      resolved.use_timeout = msg.use_timeout;
    }
    else {
      resolved.use_timeout = false
    }

    if (msg.timeout !== undefined) {
      resolved.timeout = msg.timeout;
    }
    else {
      resolved.timeout = 0.0
    }

    return resolved;
    }
};

module.exports = actionlib_post_undockGoal;
