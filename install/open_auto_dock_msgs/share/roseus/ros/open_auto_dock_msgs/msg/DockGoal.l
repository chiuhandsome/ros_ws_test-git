;; Auto-generated. Do not edit!


(when (boundp 'open_auto_dock_msgs::DockGoal)
  (if (not (find-package "OPEN_AUTO_DOCK_MSGS"))
    (make-package "OPEN_AUTO_DOCK_MSGS"))
  (shadow 'DockGoal (find-package "OPEN_AUTO_DOCK_MSGS")))
(unless (find-package "OPEN_AUTO_DOCK_MSGS::DOCKGOAL")
  (make-package "OPEN_AUTO_DOCK_MSGS::DOCKGOAL"))

(in-package "ROS")
;;//! \htmlinclude DockGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass open_auto_dock_msgs::DockGoal
  :super ros::object
  :slots (_dock_pose _dock_id _use_move_base ))

(defmethod open_auto_dock_msgs::DockGoal
  (:init
   (&key
    ((:dock_pose __dock_pose) (instance geometry_msgs::PoseStamped :init))
    ((:dock_id __dock_id) "")
    ((:use_move_base __use_move_base) nil)
    )
   (send-super :init)
   (setq _dock_pose __dock_pose)
   (setq _dock_id (string __dock_id))
   (setq _use_move_base __use_move_base)
   self)
  (:dock_pose
   (&rest __dock_pose)
   (if (keywordp (car __dock_pose))
       (send* _dock_pose __dock_pose)
     (progn
       (if __dock_pose (setq _dock_pose (car __dock_pose)))
       _dock_pose)))
  (:dock_id
   (&optional __dock_id)
   (if __dock_id (setq _dock_id __dock_id)) _dock_id)
  (:use_move_base
   (&optional __use_move_base)
   (if __use_move_base (setq _use_move_base __use_move_base)) _use_move_base)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _dock_pose
    (send _dock_pose :serialization-length)
    ;; string _dock_id
    4 (length _dock_id)
    ;; bool _use_move_base
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _dock_pose
       (send _dock_pose :serialize s)
     ;; string _dock_id
       (write-long (length _dock_id) s) (princ _dock_id s)
     ;; bool _use_move_base
       (if _use_move_base (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _dock_pose
     (send _dock_pose :deserialize buf ptr-) (incf ptr- (send _dock_pose :serialization-length))
   ;; string _dock_id
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _dock_id (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; bool _use_move_base
     (setq _use_move_base (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get open_auto_dock_msgs::DockGoal :md5sum-) "3802143c05afa4995a977654bae73c88")
(setf (get open_auto_dock_msgs::DockGoal :datatype-) "open_auto_dock_msgs/DockGoal")
(setf (get open_auto_dock_msgs::DockGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Inital pose of the dock, usually map referenced
# If the header is empty, or quaternion = (0 0 0 0), then
#   the intial dock pose will be straight ahead of the robot
geometry_msgs/PoseStamped dock_pose

# Specify an (optional) name for the dock
string dock_id

# We can optionally request that the docking node call on the
# navigation stack to get near the dock if we are too far away
bool use_move_base

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :open_auto_dock_msgs/DockGoal "3802143c05afa4995a977654bae73c88")


