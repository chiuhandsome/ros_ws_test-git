// Generated by gencpp from file open_auto_dock_msgs/DockGoal.msg
// DO NOT EDIT!


#ifndef OPEN_AUTO_DOCK_MSGS_MESSAGE_DOCKGOAL_H
#define OPEN_AUTO_DOCK_MSGS_MESSAGE_DOCKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace open_auto_dock_msgs
{
template <class ContainerAllocator>
struct DockGoal_
{
  typedef DockGoal_<ContainerAllocator> Type;

  DockGoal_()
    : dock_pose()
    , dock_id()
    , use_move_base(false)  {
    }
  DockGoal_(const ContainerAllocator& _alloc)
    : dock_pose(_alloc)
    , dock_id(_alloc)
    , use_move_base(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _dock_pose_type;
  _dock_pose_type dock_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dock_id_type;
  _dock_id_type dock_id;

   typedef uint8_t _use_move_base_type;
  _use_move_base_type use_move_base;





  typedef boost::shared_ptr< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DockGoal_

typedef ::open_auto_dock_msgs::DockGoal_<std::allocator<void> > DockGoal;

typedef boost::shared_ptr< ::open_auto_dock_msgs::DockGoal > DockGoalPtr;
typedef boost::shared_ptr< ::open_auto_dock_msgs::DockGoal const> DockGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator1> & lhs, const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator2> & rhs)
{
  return lhs.dock_pose == rhs.dock_pose &&
    lhs.dock_id == rhs.dock_id &&
    lhs.use_move_base == rhs.use_move_base;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator1> & lhs, const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_auto_dock_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3802143c05afa4995a977654bae73c88";
  }

  static const char* value(const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3802143c05afa499ULL;
  static const uint64_t static_value2 = 0x5a977654bae73c88ULL;
};

template<class ContainerAllocator>
struct DataType< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_auto_dock_msgs/DockGoal";
  }

  static const char* value(const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Inital pose of the dock, usually map referenced\n"
"# If the header is empty, or quaternion = (0 0 0 0), then\n"
"#   the intial dock pose will be straight ahead of the robot\n"
"geometry_msgs/PoseStamped dock_pose\n"
"\n"
"# Specify an (optional) name for the dock\n"
"string dock_id\n"
"\n"
"# We can optionally request that the docking node call on the\n"
"# navigation stack to get near the dock if we are too far away\n"
"bool use_move_base\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dock_pose);
      stream.next(m.dock_id);
      stream.next(m.use_move_base);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_auto_dock_msgs::DockGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_auto_dock_msgs::DockGoal_<ContainerAllocator>& v)
  {
    s << indent << "dock_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.dock_pose);
    s << indent << "dock_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dock_id);
    s << indent << "use_move_base: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_move_base);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_AUTO_DOCK_MSGS_MESSAGE_DOCKGOAL_H
