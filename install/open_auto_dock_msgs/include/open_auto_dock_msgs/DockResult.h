// Generated by gencpp from file open_auto_dock_msgs/DockResult.msg
// DO NOT EDIT!


#ifndef OPEN_AUTO_DOCK_MSGS_MESSAGE_DOCKRESULT_H
#define OPEN_AUTO_DOCK_MSGS_MESSAGE_DOCKRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace open_auto_dock_msgs
{
template <class ContainerAllocator>
struct DockResult_
{
  typedef DockResult_<ContainerAllocator> Type;

  DockResult_()
    : docked(false)
    , dock_id()  {
    }
  DockResult_(const ContainerAllocator& _alloc)
    : docked(false)
    , dock_id(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _docked_type;
  _docked_type docked;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dock_id_type;
  _dock_id_type dock_id;





  typedef boost::shared_ptr< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> const> ConstPtr;

}; // struct DockResult_

typedef ::open_auto_dock_msgs::DockResult_<std::allocator<void> > DockResult;

typedef boost::shared_ptr< ::open_auto_dock_msgs::DockResult > DockResultPtr;
typedef boost::shared_ptr< ::open_auto_dock_msgs::DockResult const> DockResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_auto_dock_msgs::DockResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_auto_dock_msgs::DockResult_<ContainerAllocator1> & lhs, const ::open_auto_dock_msgs::DockResult_<ContainerAllocator2> & rhs)
{
  return lhs.docked == rhs.docked &&
    lhs.dock_id == rhs.dock_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_auto_dock_msgs::DockResult_<ContainerAllocator1> & lhs, const ::open_auto_dock_msgs::DockResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_auto_dock_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c9af1b0b876b5336e9869a2cfc41c1c";
  }

  static const char* value(const ::open_auto_dock_msgs::DockResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c9af1b0b876b533ULL;
  static const uint64_t static_value2 = 0x6e9869a2cfc41c1cULL;
};

template<class ContainerAllocator>
struct DataType< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_auto_dock_msgs/DockResult";
  }

  static const char* value(const ::open_auto_dock_msgs::DockResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Are we docked and charging?\n"
"bool docked\n"
"\n"
"# Name of the dock, if known\n"
"string dock_id\n"
;
  }

  static const char* value(const ::open_auto_dock_msgs::DockResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.docked);
      stream.next(m.dock_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_auto_dock_msgs::DockResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_auto_dock_msgs::DockResult_<ContainerAllocator>& v)
  {
    s << indent << "docked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.docked);
    s << indent << "dock_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dock_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_AUTO_DOCK_MSGS_MESSAGE_DOCKRESULT_H
