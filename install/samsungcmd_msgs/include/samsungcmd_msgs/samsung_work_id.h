// Generated by gencpp from file samsungcmd_msgs/samsung_work_id.msg
// DO NOT EDIT!


#ifndef SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_WORK_ID_H
#define SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_WORK_ID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace samsungcmd_msgs
{
template <class ContainerAllocator>
struct samsung_work_id_
{
  typedef samsung_work_id_<ContainerAllocator> Type;

  samsung_work_id_()
    : key_id()
    , work_id(0)
    , target_station_id(0)
    , work_type_id(0)
    , next_station_id(0)
    , update_time()  {
    }
  samsung_work_id_(const ContainerAllocator& _alloc)
    : key_id(_alloc)
    , work_id(0)
    , target_station_id(0)
    , work_type_id(0)
    , next_station_id(0)
    , update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_id_type;
  _key_id_type key_id;

   typedef uint16_t _work_id_type;
  _work_id_type work_id;

   typedef uint16_t _target_station_id_type;
  _target_station_id_type target_station_id;

   typedef uint8_t _work_type_id_type;
  _work_type_id_type work_type_id;

   typedef uint16_t _next_station_id_type;
  _next_station_id_type next_station_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_time_type;
  _update_time_type update_time;





  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> const> ConstPtr;

}; // struct samsung_work_id_

typedef ::samsungcmd_msgs::samsung_work_id_<std::allocator<void> > samsung_work_id;

typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_work_id > samsung_work_idPtr;
typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_work_id const> samsung_work_idConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator2> & rhs)
{
  return lhs.key_id == rhs.key_id &&
    lhs.work_id == rhs.work_id &&
    lhs.target_station_id == rhs.target_station_id &&
    lhs.work_type_id == rhs.work_type_id &&
    lhs.next_station_id == rhs.next_station_id &&
    lhs.update_time == rhs.update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace samsungcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56eb78950956dc0347226dcaeda29115";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56eb78950956dc03ULL;
  static const uint64_t static_value2 = 0x47226dcaeda29115ULL;
};

template<class ContainerAllocator>
struct DataType< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "samsungcmd_msgs/samsung_work_id";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string key_id\n"
"uint16 work_id\n"
"uint16 target_station_id	 \n"
"uint8  work_type_id		# 0:loader-loading 1:loader-unloading 2:unloader-loading 3:unloader-unloading\n"
"uint16 next_station_id\n"
"string 	update_time\n"
;
  }

  static const char* value(const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key_id);
      stream.next(m.work_id);
      stream.next(m.target_station_id);
      stream.next(m.work_type_id);
      stream.next(m.next_station_id);
      stream.next(m.update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct samsung_work_id_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::samsungcmd_msgs::samsung_work_id_<ContainerAllocator>& v)
  {
    s << indent << "key_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key_id);
    s << indent << "work_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.work_id);
    s << indent << "target_station_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.target_station_id);
    s << indent << "work_type_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.work_type_id);
    s << indent << "next_station_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.next_station_id);
    s << indent << "update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_WORK_ID_H
