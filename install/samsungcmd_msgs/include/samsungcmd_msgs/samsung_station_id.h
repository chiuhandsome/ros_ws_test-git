// Generated by gencpp from file samsungcmd_msgs/samsung_station_id.msg
// DO NOT EDIT!


#ifndef SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_STATION_ID_H
#define SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_STATION_ID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace samsungcmd_msgs
{
template <class ContainerAllocator>
struct samsung_station_id_
{
  typedef samsung_station_id_<ContainerAllocator> Type;

  samsung_station_id_()
    : key_id()
    , station_id(0)
    , station_type(0)
    , delay_time(0)
    , timeout_value(0)
    , start_turn_right(0)
    , end_turn_right(0)
    , start_straight(0)
    , end_straight(0)
    , start_turn_left(0)
    , end_turn_left(0)
    , update_time()  {
    }
  samsung_station_id_(const ContainerAllocator& _alloc)
    : key_id(_alloc)
    , station_id(0)
    , station_type(0)
    , delay_time(0)
    , timeout_value(0)
    , start_turn_right(0)
    , end_turn_right(0)
    , start_straight(0)
    , end_straight(0)
    , start_turn_left(0)
    , end_turn_left(0)
    , update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_id_type;
  _key_id_type key_id;

   typedef uint16_t _station_id_type;
  _station_id_type station_id;

   typedef uint8_t _station_type_type;
  _station_type_type station_type;

   typedef uint16_t _delay_time_type;
  _delay_time_type delay_time;

   typedef uint16_t _timeout_value_type;
  _timeout_value_type timeout_value;

   typedef uint16_t _start_turn_right_type;
  _start_turn_right_type start_turn_right;

   typedef uint16_t _end_turn_right_type;
  _end_turn_right_type end_turn_right;

   typedef uint16_t _start_straight_type;
  _start_straight_type start_straight;

   typedef uint16_t _end_straight_type;
  _end_straight_type end_straight;

   typedef uint16_t _start_turn_left_type;
  _start_turn_left_type start_turn_left;

   typedef uint16_t _end_turn_left_type;
  _end_turn_left_type end_turn_left;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_time_type;
  _update_time_type update_time;





  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> const> ConstPtr;

}; // struct samsung_station_id_

typedef ::samsungcmd_msgs::samsung_station_id_<std::allocator<void> > samsung_station_id;

typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_station_id > samsung_station_idPtr;
typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_station_id const> samsung_station_idConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator2> & rhs)
{
  return lhs.key_id == rhs.key_id &&
    lhs.station_id == rhs.station_id &&
    lhs.station_type == rhs.station_type &&
    lhs.delay_time == rhs.delay_time &&
    lhs.timeout_value == rhs.timeout_value &&
    lhs.start_turn_right == rhs.start_turn_right &&
    lhs.end_turn_right == rhs.end_turn_right &&
    lhs.start_straight == rhs.start_straight &&
    lhs.end_straight == rhs.end_straight &&
    lhs.start_turn_left == rhs.start_turn_left &&
    lhs.end_turn_left == rhs.end_turn_left &&
    lhs.update_time == rhs.update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace samsungcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f001fc825a44832e3c37deefba7596b8";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf001fc825a44832eULL;
  static const uint64_t static_value2 = 0x3c37deefba7596b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "samsungcmd_msgs/samsung_station_id";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string 	key_id\n"
"uint16  station_id\n"
"uint8 	station_type		# 0: sAnti-collision/1:direction-id\n"
"uint16 	delay_time		    # 0: - /1:keep time for straight-run\n"
"uint16 	timeout_value  		# 0: no respone for sAnti-collision/ 1:check out codition of turn	\n"
"uint16 	start_turn_right 	# 0: - /1:range start for turn-right	\n"
"uint16 	end_turn_right 		# 0: - /1:range end for turn-right\n"
"uint16 	start_straight 		# 0: - /1:range start for straight	\n"
"uint16 	end_straight 		# 0: - /1:range end for straight\n"
"uint16 	start_turn_left 	# 0: - /1:range start for turn-left	\n"
"uint16 	end_turn_left 		# 0: - /1:range end for turn-left\n"
"string 	update_time\n"
;
  }

  static const char* value(const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key_id);
      stream.next(m.station_id);
      stream.next(m.station_type);
      stream.next(m.delay_time);
      stream.next(m.timeout_value);
      stream.next(m.start_turn_right);
      stream.next(m.end_turn_right);
      stream.next(m.start_straight);
      stream.next(m.end_straight);
      stream.next(m.start_turn_left);
      stream.next(m.end_turn_left);
      stream.next(m.update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct samsung_station_id_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::samsungcmd_msgs::samsung_station_id_<ContainerAllocator>& v)
  {
    s << indent << "key_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key_id);
    s << indent << "station_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.station_id);
    s << indent << "station_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.station_type);
    s << indent << "delay_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.delay_time);
    s << indent << "timeout_value: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timeout_value);
    s << indent << "start_turn_right: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.start_turn_right);
    s << indent << "end_turn_right: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.end_turn_right);
    s << indent << "start_straight: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.start_straight);
    s << indent << "end_straight: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.end_straight);
    s << indent << "start_turn_left: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.start_turn_left);
    s << indent << "end_turn_left: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.end_turn_left);
    s << indent << "update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_STATION_ID_H
