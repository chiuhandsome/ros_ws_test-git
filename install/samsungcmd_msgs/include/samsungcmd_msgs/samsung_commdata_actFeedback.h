// Generated by gencpp from file samsungcmd_msgs/samsung_commdata_actFeedback.msg
// DO NOT EDIT!


#ifndef SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_COMMDATA_ACTFEEDBACK_H
#define SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_COMMDATA_ACTFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace samsungcmd_msgs
{
template <class ContainerAllocator>
struct samsung_commdata_actFeedback_
{
  typedef samsung_commdata_actFeedback_<ContainerAllocator> Type;

  samsung_commdata_actFeedback_()
    : status_id(0)
    , status_desc()  {
    }
  samsung_commdata_actFeedback_(const ContainerAllocator& _alloc)
    : status_id(0)
    , status_desc(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _status_id_type;
  _status_id_type status_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_desc_type;
  _status_desc_type status_desc;





  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct samsung_commdata_actFeedback_

typedef ::samsungcmd_msgs::samsung_commdata_actFeedback_<std::allocator<void> > samsung_commdata_actFeedback;

typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_commdata_actFeedback > samsung_commdata_actFeedbackPtr;
typedef boost::shared_ptr< ::samsungcmd_msgs::samsung_commdata_actFeedback const> samsung_commdata_actFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.status_id == rhs.status_id &&
    lhs.status_desc == rhs.status_desc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator1> & lhs, const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace samsungcmd_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8477dd7d5143d4c2230befe0e46a82e2";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8477dd7d5143d4c2ULL;
  static const uint64_t static_value2 = 0x230befe0e46a82e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "samsungcmd_msgs/samsung_commdata_actFeedback";
  }

  static const char* value(const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback\n"
"int8    status_id\n"
"string  status_desc\n"
"\n"
;
  }

  static const char* value(const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status_id);
      stream.next(m.status_desc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct samsung_commdata_actFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::samsungcmd_msgs::samsung_commdata_actFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status_id);
    s << indent << "status_desc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_desc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAMSUNGCMD_MSGS_MESSAGE_SAMSUNG_COMMDATA_ACTFEEDBACK_H
