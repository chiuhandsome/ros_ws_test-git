# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from samsungcmd_msgs/samsung_cntparamsdata.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class samsung_cntparamsdata(genpy.Message):
  _md5sum = "028fc3da18d39088df04b2e5220a67fe"
  _type = "samsungcmd_msgs/samsung_cntparamsdata"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 Mag_center_analog
int32 	Mag_center_digital
int8 	car_roller_status 
float32 car_velrpm_left
float32 car_velrpm_right
int8 	car_control_code 
int8 	car_Status_code 
int8 	car_Command_code
int16 	car_Error_code 
int32 	car_SetCommand 
int32 	roller_SetCommand
"""
  __slots__ = ['Mag_center_analog','Mag_center_digital','car_roller_status','car_velrpm_left','car_velrpm_right','car_control_code','car_Status_code','car_Command_code','car_Error_code','car_SetCommand','roller_SetCommand']
  _slot_types = ['float32','int32','int8','float32','float32','int8','int8','int8','int16','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Mag_center_analog,Mag_center_digital,car_roller_status,car_velrpm_left,car_velrpm_right,car_control_code,car_Status_code,car_Command_code,car_Error_code,car_SetCommand,roller_SetCommand

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(samsung_cntparamsdata, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Mag_center_analog is None:
        self.Mag_center_analog = 0.
      if self.Mag_center_digital is None:
        self.Mag_center_digital = 0
      if self.car_roller_status is None:
        self.car_roller_status = 0
      if self.car_velrpm_left is None:
        self.car_velrpm_left = 0.
      if self.car_velrpm_right is None:
        self.car_velrpm_right = 0.
      if self.car_control_code is None:
        self.car_control_code = 0
      if self.car_Status_code is None:
        self.car_Status_code = 0
      if self.car_Command_code is None:
        self.car_Command_code = 0
      if self.car_Error_code is None:
        self.car_Error_code = 0
      if self.car_SetCommand is None:
        self.car_SetCommand = 0
      if self.roller_SetCommand is None:
        self.roller_SetCommand = 0
    else:
      self.Mag_center_analog = 0.
      self.Mag_center_digital = 0
      self.car_roller_status = 0
      self.car_velrpm_left = 0.
      self.car_velrpm_right = 0.
      self.car_control_code = 0
      self.car_Status_code = 0
      self.car_Command_code = 0
      self.car_Error_code = 0
      self.car_SetCommand = 0
      self.roller_SetCommand = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fib2f3bh2i().pack(_x.Mag_center_analog, _x.Mag_center_digital, _x.car_roller_status, _x.car_velrpm_left, _x.car_velrpm_right, _x.car_control_code, _x.car_Status_code, _x.car_Command_code, _x.car_Error_code, _x.car_SetCommand, _x.roller_SetCommand))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.Mag_center_analog, _x.Mag_center_digital, _x.car_roller_status, _x.car_velrpm_left, _x.car_velrpm_right, _x.car_control_code, _x.car_Status_code, _x.car_Command_code, _x.car_Error_code, _x.car_SetCommand, _x.roller_SetCommand,) = _get_struct_fib2f3bh2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fib2f3bh2i().pack(_x.Mag_center_analog, _x.Mag_center_digital, _x.car_roller_status, _x.car_velrpm_left, _x.car_velrpm_right, _x.car_control_code, _x.car_Status_code, _x.car_Command_code, _x.car_Error_code, _x.car_SetCommand, _x.roller_SetCommand))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.Mag_center_analog, _x.Mag_center_digital, _x.car_roller_status, _x.car_velrpm_left, _x.car_velrpm_right, _x.car_control_code, _x.car_Status_code, _x.car_Command_code, _x.car_Error_code, _x.car_SetCommand, _x.roller_SetCommand,) = _get_struct_fib2f3bh2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fib2f3bh2i = None
def _get_struct_fib2f3bh2i():
    global _struct_fib2f3bh2i
    if _struct_fib2f3bh2i is None:
        _struct_fib2f3bh2i = struct.Struct("<fib2f3bh2i")
    return _struct_fib2f3bh2i
