// Generated by gencpp from file cellctrl_control_msgs/cell_agv_main.msg
// DO NOT EDIT!


#ifndef CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_AGV_MAIN_H
#define CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_AGV_MAIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cellctrl_control_msgs
{
template <class ContainerAllocator>
struct cell_agv_main_
{
  typedef cell_agv_main_<ContainerAllocator> Type;

  cell_agv_main_()
    : primary_id()
    , unique_code()
    , agv_standtype()
    , agv_model_no()
    , agv_name()
    , agv_shape(0)
    , agv_shape_para0(0.0)
    , agv_shape_para1(0.0)
    , agv_shape_para2(0.0)
    , agv_candidate(0)
    , agv_transfer_type(0)
    , put_in_service_date()
    , work_comulative_time(0.0)
    , current_status(0)
    , update_time()  {
    }
  cell_agv_main_(const ContainerAllocator& _alloc)
    : primary_id(_alloc)
    , unique_code(_alloc)
    , agv_standtype(_alloc)
    , agv_model_no(_alloc)
    , agv_name(_alloc)
    , agv_shape(0)
    , agv_shape_para0(0.0)
    , agv_shape_para1(0.0)
    , agv_shape_para2(0.0)
    , agv_candidate(0)
    , agv_transfer_type(0)
    , put_in_service_date(_alloc)
    , work_comulative_time(0.0)
    , current_status(0)
    , update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _primary_id_type;
  _primary_id_type primary_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unique_code_type;
  _unique_code_type unique_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _agv_standtype_type;
  _agv_standtype_type agv_standtype;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _agv_model_no_type;
  _agv_model_no_type agv_model_no;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _agv_name_type;
  _agv_name_type agv_name;

   typedef uint8_t _agv_shape_type;
  _agv_shape_type agv_shape;

   typedef float _agv_shape_para0_type;
  _agv_shape_para0_type agv_shape_para0;

   typedef float _agv_shape_para1_type;
  _agv_shape_para1_type agv_shape_para1;

   typedef float _agv_shape_para2_type;
  _agv_shape_para2_type agv_shape_para2;

   typedef uint8_t _agv_candidate_type;
  _agv_candidate_type agv_candidate;

   typedef uint8_t _agv_transfer_type_type;
  _agv_transfer_type_type agv_transfer_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _put_in_service_date_type;
  _put_in_service_date_type put_in_service_date;

   typedef float _work_comulative_time_type;
  _work_comulative_time_type work_comulative_time;

   typedef uint8_t _current_status_type;
  _current_status_type current_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_time_type;
  _update_time_type update_time;





  typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> const> ConstPtr;

}; // struct cell_agv_main_

typedef ::cellctrl_control_msgs::cell_agv_main_<std::allocator<void> > cell_agv_main;

typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_agv_main > cell_agv_mainPtr;
typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_agv_main const> cell_agv_mainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator1> & lhs, const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator2> & rhs)
{
  return lhs.primary_id == rhs.primary_id &&
    lhs.unique_code == rhs.unique_code &&
    lhs.agv_standtype == rhs.agv_standtype &&
    lhs.agv_model_no == rhs.agv_model_no &&
    lhs.agv_name == rhs.agv_name &&
    lhs.agv_shape == rhs.agv_shape &&
    lhs.agv_shape_para0 == rhs.agv_shape_para0 &&
    lhs.agv_shape_para1 == rhs.agv_shape_para1 &&
    lhs.agv_shape_para2 == rhs.agv_shape_para2 &&
    lhs.agv_candidate == rhs.agv_candidate &&
    lhs.agv_transfer_type == rhs.agv_transfer_type &&
    lhs.put_in_service_date == rhs.put_in_service_date &&
    lhs.work_comulative_time == rhs.work_comulative_time &&
    lhs.current_status == rhs.current_status &&
    lhs.update_time == rhs.update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator1> & lhs, const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cellctrl_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "feec446d0776ec569e61a0ea7c5875f7";
  }

  static const char* value(const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfeec446d0776ec56ULL;
  static const uint64_t static_value2 = 0x9e61a0ea7c5875f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cellctrl_control_msgs/cell_agv_main";
  }

  static const char* value(const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string primary_id			# must-have,UUID : primary_key(system_id)\n"
"string unique_code 		        # must-have,UNIQUE INDEX	\n"
"string agv_standtype		   \n"
"string agv_model_no 		 \n"
"string agv_name 		 \n"
"uint8  agv_shape 	\n"
"float32 agv_shape_para0 \n"
"float32 agv_shape_para1 \n"
"float32 agv_shape_para2 	\n"
"uint8  agv_candidate \n"
"uint8  agv_transfer_type\n"
"string put_in_service_date\n"
"float32 work_comulative_time\n"
"uint8 current_status\n"
"string update_time			# must-have 	 \n"
;
  }

  static const char* value(const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primary_id);
      stream.next(m.unique_code);
      stream.next(m.agv_standtype);
      stream.next(m.agv_model_no);
      stream.next(m.agv_name);
      stream.next(m.agv_shape);
      stream.next(m.agv_shape_para0);
      stream.next(m.agv_shape_para1);
      stream.next(m.agv_shape_para2);
      stream.next(m.agv_candidate);
      stream.next(m.agv_transfer_type);
      stream.next(m.put_in_service_date);
      stream.next(m.work_comulative_time);
      stream.next(m.current_status);
      stream.next(m.update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cell_agv_main_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cellctrl_control_msgs::cell_agv_main_<ContainerAllocator>& v)
  {
    s << indent << "primary_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.primary_id);
    s << indent << "unique_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unique_code);
    s << indent << "agv_standtype: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.agv_standtype);
    s << indent << "agv_model_no: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.agv_model_no);
    s << indent << "agv_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.agv_name);
    s << indent << "agv_shape: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.agv_shape);
    s << indent << "agv_shape_para0: ";
    Printer<float>::stream(s, indent + "  ", v.agv_shape_para0);
    s << indent << "agv_shape_para1: ";
    Printer<float>::stream(s, indent + "  ", v.agv_shape_para1);
    s << indent << "agv_shape_para2: ";
    Printer<float>::stream(s, indent + "  ", v.agv_shape_para2);
    s << indent << "agv_candidate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.agv_candidate);
    s << indent << "agv_transfer_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.agv_transfer_type);
    s << indent << "put_in_service_date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.put_in_service_date);
    s << indent << "work_comulative_time: ";
    Printer<float>::stream(s, indent + "  ", v.work_comulative_time);
    s << indent << "current_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_status);
    s << indent << "update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_AGV_MAIN_H
