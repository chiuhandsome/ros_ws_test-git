// Generated by gencpp from file cellctrl_control_msgs/cell_alarmhistory.msg
// DO NOT EDIT!


#ifndef CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_ALARMHISTORY_H
#define CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_ALARMHISTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cellctrl_control_msgs
{
template <class ContainerAllocator>
struct cell_alarmhistory_
{
  typedef cell_alarmhistory_<ContainerAllocator> Type;

  cell_alarmhistory_()
    : primary_id()
    , foreign_key()
    , unique_code()
    , alarm_name()
    , alarm_level(0)
    , alarm_code()
    , update_time()  {
    }
  cell_alarmhistory_(const ContainerAllocator& _alloc)
    : primary_id(_alloc)
    , foreign_key(_alloc)
    , unique_code(_alloc)
    , alarm_name(_alloc)
    , alarm_level(0)
    , alarm_code(_alloc)
    , update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _primary_id_type;
  _primary_id_type primary_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _foreign_key_type;
  _foreign_key_type foreign_key;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unique_code_type;
  _unique_code_type unique_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alarm_name_type;
  _alarm_name_type alarm_name;

   typedef uint8_t _alarm_level_type;
  _alarm_level_type alarm_level;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alarm_code_type;
  _alarm_code_type alarm_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_time_type;
  _update_time_type update_time;





  typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> const> ConstPtr;

}; // struct cell_alarmhistory_

typedef ::cellctrl_control_msgs::cell_alarmhistory_<std::allocator<void> > cell_alarmhistory;

typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_alarmhistory > cell_alarmhistoryPtr;
typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_alarmhistory const> cell_alarmhistoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator1> & lhs, const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator2> & rhs)
{
  return lhs.primary_id == rhs.primary_id &&
    lhs.foreign_key == rhs.foreign_key &&
    lhs.unique_code == rhs.unique_code &&
    lhs.alarm_name == rhs.alarm_name &&
    lhs.alarm_level == rhs.alarm_level &&
    lhs.alarm_code == rhs.alarm_code &&
    lhs.update_time == rhs.update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator1> & lhs, const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cellctrl_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbee41032af067305af86fdfab0c31ba";
  }

  static const char* value(const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbee41032af06730ULL;
  static const uint64_t static_value2 = 0x5af86fdfab0c31baULL;
};

template<class ContainerAllocator>
struct DataType< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cellctrl_control_msgs/cell_alarmhistory";
  }

  static const char* value(const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string primary_id			# must-have,UUID : primary_key(system_id)		\n"
"string foreign_key\n"
"string unique_code 		        # must-have,UNIQUE INDEX	\n"
"string alarm_name		   \n"
"uint8 alarm_level 		 \n"
"string alarm_code 	\n"
"string update_time			# must-have 		 \n"
;
  }

  static const char* value(const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primary_id);
      stream.next(m.foreign_key);
      stream.next(m.unique_code);
      stream.next(m.alarm_name);
      stream.next(m.alarm_level);
      stream.next(m.alarm_code);
      stream.next(m.update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cell_alarmhistory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cellctrl_control_msgs::cell_alarmhistory_<ContainerAllocator>& v)
  {
    s << indent << "primary_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.primary_id);
    s << indent << "foreign_key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.foreign_key);
    s << indent << "unique_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unique_code);
    s << indent << "alarm_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alarm_name);
    s << indent << "alarm_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_level);
    s << indent << "alarm_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alarm_code);
    s << indent << "update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_ALARMHISTORY_H
