// Generated by gencpp from file cellctrl_control_msgs/cell_work_stations.msg
// DO NOT EDIT!


#ifndef CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_WORK_STATIONS_H
#define CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_WORK_STATIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace cellctrl_control_msgs
{
template <class ContainerAllocator>
struct cell_work_stations_
{
  typedef cell_work_stations_<ContainerAllocator> Type;

  cell_work_stations_()
    : primary_id()
    , unique_code()
    , station_name()
    , cellcontroller_code()
    , positioned_pose()
    , mc_func_code(0)
    , transfer_code(0)
    , transfer_state(0)
    , align_type(0)
    , align_metadata()
    , pre_positioned_pose()
    , Identify_id()
    , update_time()  {
    }
  cell_work_stations_(const ContainerAllocator& _alloc)
    : primary_id(_alloc)
    , unique_code(_alloc)
    , station_name(_alloc)
    , cellcontroller_code(_alloc)
    , positioned_pose(_alloc)
    , mc_func_code(0)
    , transfer_code(0)
    , transfer_state(0)
    , align_type(0)
    , align_metadata(_alloc)
    , pre_positioned_pose(_alloc)
    , Identify_id(_alloc)
    , update_time(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _primary_id_type;
  _primary_id_type primary_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unique_code_type;
  _unique_code_type unique_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _station_name_type;
  _station_name_type station_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cellcontroller_code_type;
  _cellcontroller_code_type cellcontroller_code;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _positioned_pose_type;
  _positioned_pose_type positioned_pose;

   typedef uint8_t _mc_func_code_type;
  _mc_func_code_type mc_func_code;

   typedef uint8_t _transfer_code_type;
  _transfer_code_type transfer_code;

   typedef uint8_t _transfer_state_type;
  _transfer_state_type transfer_state;

   typedef uint8_t _align_type_type;
  _align_type_type align_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _align_metadata_type;
  _align_metadata_type align_metadata;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pre_positioned_pose_type;
  _pre_positioned_pose_type pre_positioned_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Identify_id_type;
  _Identify_id_type Identify_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _update_time_type;
  _update_time_type update_time;





  typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> const> ConstPtr;

}; // struct cell_work_stations_

typedef ::cellctrl_control_msgs::cell_work_stations_<std::allocator<void> > cell_work_stations;

typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_work_stations > cell_work_stationsPtr;
typedef boost::shared_ptr< ::cellctrl_control_msgs::cell_work_stations const> cell_work_stationsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator1> & lhs, const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator2> & rhs)
{
  return lhs.primary_id == rhs.primary_id &&
    lhs.unique_code == rhs.unique_code &&
    lhs.station_name == rhs.station_name &&
    lhs.cellcontroller_code == rhs.cellcontroller_code &&
    lhs.positioned_pose == rhs.positioned_pose &&
    lhs.mc_func_code == rhs.mc_func_code &&
    lhs.transfer_code == rhs.transfer_code &&
    lhs.transfer_state == rhs.transfer_state &&
    lhs.align_type == rhs.align_type &&
    lhs.align_metadata == rhs.align_metadata &&
    lhs.pre_positioned_pose == rhs.pre_positioned_pose &&
    lhs.Identify_id == rhs.Identify_id &&
    lhs.update_time == rhs.update_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator1> & lhs, const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cellctrl_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35ebd58c4ed76bc4d15807b8e51751b8";
  }

  static const char* value(const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35ebd58c4ed76bc4ULL;
  static const uint64_t static_value2 = 0xd15807b8e51751b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cellctrl_control_msgs/cell_work_stations";
  }

  static const char* value(const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string primary_id			# must-have,UUID : primary_key(system_id)\n"
"string unique_code 		        # must-have,UNIQUE INDEX	\n"
"string station_name		   \n"
"string cellcontroller_code 		 \n"
"geometry_msgs/Pose positioned_pose 		 \n"
"uint8  mc_func_code 	\n"
"uint8  transfer_code 	\n"
"uint8  transfer_state \n"
"uint8  align_type\n"
"string align_metadata\n"
"geometry_msgs/Pose pre_positioned_pose\n"
"string Identify_id\n"
"string update_time			# must-have 	 \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primary_id);
      stream.next(m.unique_code);
      stream.next(m.station_name);
      stream.next(m.cellcontroller_code);
      stream.next(m.positioned_pose);
      stream.next(m.mc_func_code);
      stream.next(m.transfer_code);
      stream.next(m.transfer_state);
      stream.next(m.align_type);
      stream.next(m.align_metadata);
      stream.next(m.pre_positioned_pose);
      stream.next(m.Identify_id);
      stream.next(m.update_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cell_work_stations_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cellctrl_control_msgs::cell_work_stations_<ContainerAllocator>& v)
  {
    s << indent << "primary_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.primary_id);
    s << indent << "unique_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unique_code);
    s << indent << "station_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.station_name);
    s << indent << "cellcontroller_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cellcontroller_code);
    s << indent << "positioned_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.positioned_pose);
    s << indent << "mc_func_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mc_func_code);
    s << indent << "transfer_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.transfer_code);
    s << indent << "transfer_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.transfer_state);
    s << indent << "align_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.align_type);
    s << indent << "align_metadata: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.align_metadata);
    s << indent << "pre_positioned_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pre_positioned_pose);
    s << indent << "Identify_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Identify_id);
    s << indent << "update_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.update_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CELLCTRL_CONTROL_MSGS_MESSAGE_CELL_WORK_STATIONS_H
