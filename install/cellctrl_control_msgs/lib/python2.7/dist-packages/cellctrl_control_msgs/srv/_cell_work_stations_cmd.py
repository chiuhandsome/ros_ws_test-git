# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cellctrl_control_msgs/cell_work_stations_cmdRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cellctrl_control_msgs.msg
import geometry_msgs.msg

class cell_work_stations_cmdRequest(genpy.Message):
  _md5sum = "351ae83ca9fd0a40ca56b9ac1c80aee1"
  _type = "cellctrl_control_msgs/cell_work_stations_cmdRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 cmd_id         # 1:Add , 2:modify , 3:delete , 4:query , 5:refresh	 		
string query_base_index 	
string query_opt_index
string query_parameter 
cell_work_stations request_data	 

================================================================================
MSG: cellctrl_control_msgs/cell_work_stations
string primary_id			# must-have,UUID : primary_key(system_id)
string unique_code 		        # must-have,UNIQUE INDEX	
string station_name		   
string cellcontroller_code 		 
geometry_msgs/Pose positioned_pose 		 
uint8  mc_func_code 	
uint8  transfer_code 	
uint8  transfer_state 
uint8  align_type
string align_metadata
geometry_msgs/Pose pre_positioned_pose
string Identify_id
string update_time			# must-have 	 

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['cmd_id','query_base_index','query_opt_index','query_parameter','request_data']
  _slot_types = ['int8','string','string','string','cellctrl_control_msgs/cell_work_stations']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_id,query_base_index,query_opt_index,query_parameter,request_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cell_work_stations_cmdRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_id is None:
        self.cmd_id = 0
      if self.query_base_index is None:
        self.query_base_index = ''
      if self.query_opt_index is None:
        self.query_opt_index = ''
      if self.query_parameter is None:
        self.query_parameter = ''
      if self.request_data is None:
        self.request_data = cellctrl_control_msgs.msg.cell_work_stations()
    else:
      self.cmd_id = 0
      self.query_base_index = ''
      self.query_opt_index = ''
      self.query_parameter = ''
      self.request_data = cellctrl_control_msgs.msg.cell_work_stations()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cmd_id
      buff.write(_get_struct_b().pack(_x))
      _x = self.query_base_index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.query_opt_index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.query_parameter
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.station_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.cellcontroller_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d4B().pack(_x.request_data.positioned_pose.position.x, _x.request_data.positioned_pose.position.y, _x.request_data.positioned_pose.position.z, _x.request_data.positioned_pose.orientation.x, _x.request_data.positioned_pose.orientation.y, _x.request_data.positioned_pose.orientation.z, _x.request_data.positioned_pose.orientation.w, _x.request_data.mc_func_code, _x.request_data.transfer_code, _x.request_data.transfer_state, _x.request_data.align_type))
      _x = self.request_data.align_metadata
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.request_data.pre_positioned_pose.position.x, _x.request_data.pre_positioned_pose.position.y, _x.request_data.pre_positioned_pose.position.z, _x.request_data.pre_positioned_pose.orientation.x, _x.request_data.pre_positioned_pose.orientation.y, _x.request_data.pre_positioned_pose.orientation.z, _x.request_data.pre_positioned_pose.orientation.w))
      _x = self.request_data.Identify_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.request_data is None:
        self.request_data = cellctrl_control_msgs.msg.cell_work_stations()
      end = 0
      start = end
      end += 1
      (self.cmd_id,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.query_base_index = str[start:end].decode('utf-8')
      else:
        self.query_base_index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.query_opt_index = str[start:end].decode('utf-8')
      else:
        self.query_opt_index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.query_parameter = str[start:end].decode('utf-8')
      else:
        self.query_parameter = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.primary_id = str[start:end].decode('utf-8')
      else:
        self.request_data.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.unique_code = str[start:end].decode('utf-8')
      else:
        self.request_data.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.station_name = str[start:end].decode('utf-8')
      else:
        self.request_data.station_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.cellcontroller_code = str[start:end].decode('utf-8')
      else:
        self.request_data.cellcontroller_code = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.request_data.positioned_pose.position.x, _x.request_data.positioned_pose.position.y, _x.request_data.positioned_pose.position.z, _x.request_data.positioned_pose.orientation.x, _x.request_data.positioned_pose.orientation.y, _x.request_data.positioned_pose.orientation.z, _x.request_data.positioned_pose.orientation.w, _x.request_data.mc_func_code, _x.request_data.transfer_code, _x.request_data.transfer_state, _x.request_data.align_type,) = _get_struct_7d4B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.align_metadata = str[start:end].decode('utf-8')
      else:
        self.request_data.align_metadata = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.request_data.pre_positioned_pose.position.x, _x.request_data.pre_positioned_pose.position.y, _x.request_data.pre_positioned_pose.position.z, _x.request_data.pre_positioned_pose.orientation.x, _x.request_data.pre_positioned_pose.orientation.y, _x.request_data.pre_positioned_pose.orientation.z, _x.request_data.pre_positioned_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.Identify_id = str[start:end].decode('utf-8')
      else:
        self.request_data.Identify_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.update_time = str[start:end].decode('utf-8')
      else:
        self.request_data.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cmd_id
      buff.write(_get_struct_b().pack(_x))
      _x = self.query_base_index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.query_opt_index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.query_parameter
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.station_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.cellcontroller_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d4B().pack(_x.request_data.positioned_pose.position.x, _x.request_data.positioned_pose.position.y, _x.request_data.positioned_pose.position.z, _x.request_data.positioned_pose.orientation.x, _x.request_data.positioned_pose.orientation.y, _x.request_data.positioned_pose.orientation.z, _x.request_data.positioned_pose.orientation.w, _x.request_data.mc_func_code, _x.request_data.transfer_code, _x.request_data.transfer_state, _x.request_data.align_type))
      _x = self.request_data.align_metadata
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.request_data.pre_positioned_pose.position.x, _x.request_data.pre_positioned_pose.position.y, _x.request_data.pre_positioned_pose.position.z, _x.request_data.pre_positioned_pose.orientation.x, _x.request_data.pre_positioned_pose.orientation.y, _x.request_data.pre_positioned_pose.orientation.z, _x.request_data.pre_positioned_pose.orientation.w))
      _x = self.request_data.Identify_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request_data.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.request_data is None:
        self.request_data = cellctrl_control_msgs.msg.cell_work_stations()
      end = 0
      start = end
      end += 1
      (self.cmd_id,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.query_base_index = str[start:end].decode('utf-8')
      else:
        self.query_base_index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.query_opt_index = str[start:end].decode('utf-8')
      else:
        self.query_opt_index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.query_parameter = str[start:end].decode('utf-8')
      else:
        self.query_parameter = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.primary_id = str[start:end].decode('utf-8')
      else:
        self.request_data.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.unique_code = str[start:end].decode('utf-8')
      else:
        self.request_data.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.station_name = str[start:end].decode('utf-8')
      else:
        self.request_data.station_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.cellcontroller_code = str[start:end].decode('utf-8')
      else:
        self.request_data.cellcontroller_code = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.request_data.positioned_pose.position.x, _x.request_data.positioned_pose.position.y, _x.request_data.positioned_pose.position.z, _x.request_data.positioned_pose.orientation.x, _x.request_data.positioned_pose.orientation.y, _x.request_data.positioned_pose.orientation.z, _x.request_data.positioned_pose.orientation.w, _x.request_data.mc_func_code, _x.request_data.transfer_code, _x.request_data.transfer_state, _x.request_data.align_type,) = _get_struct_7d4B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.align_metadata = str[start:end].decode('utf-8')
      else:
        self.request_data.align_metadata = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.request_data.pre_positioned_pose.position.x, _x.request_data.pre_positioned_pose.position.y, _x.request_data.pre_positioned_pose.position.z, _x.request_data.pre_positioned_pose.orientation.x, _x.request_data.pre_positioned_pose.orientation.y, _x.request_data.pre_positioned_pose.orientation.z, _x.request_data.pre_positioned_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.Identify_id = str[start:end].decode('utf-8')
      else:
        self.request_data.Identify_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_data.update_time = str[start:end].decode('utf-8')
      else:
        self.request_data.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_7d4B = None
def _get_struct_7d4B():
    global _struct_7d4B
    if _struct_7d4B is None:
        _struct_7d4B = struct.Struct("<7d4B")
    return _struct_7d4B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cellctrl_control_msgs/cell_work_stations_cmdResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cellctrl_control_msgs.msg
import geometry_msgs.msg

class cell_work_stations_cmdResponse(genpy.Message):
  _md5sum = "46c2f4cdd6611634938dfdd3daa34131"
  _type = "cellctrl_control_msgs/cell_work_stations_cmdResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool result
string error_code
string primary_id
string update_time
cell_work_stations[] response_data


================================================================================
MSG: cellctrl_control_msgs/cell_work_stations
string primary_id			# must-have,UUID : primary_key(system_id)
string unique_code 		        # must-have,UNIQUE INDEX	
string station_name		   
string cellcontroller_code 		 
geometry_msgs/Pose positioned_pose 		 
uint8  mc_func_code 	
uint8  transfer_code 	
uint8  transfer_state 
uint8  align_type
string align_metadata
geometry_msgs/Pose pre_positioned_pose
string Identify_id
string update_time			# must-have 	 

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['result','error_code','primary_id','update_time','response_data']
  _slot_types = ['bool','string','string','string','cellctrl_control_msgs/cell_work_stations[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,error_code,primary_id,update_time,response_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cell_work_stations_cmdResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.error_code is None:
        self.error_code = ''
      if self.primary_id is None:
        self.primary_id = ''
      if self.update_time is None:
        self.update_time = ''
      if self.response_data is None:
        self.response_data = []
    else:
      self.result = False
      self.error_code = ''
      self.primary_id = ''
      self.update_time = ''
      self.response_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.response_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.response_data:
        _x = val1.primary_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.unique_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.station_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.cellcontroller_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.positioned_pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_4B().pack(_x.mc_func_code, _x.transfer_code, _x.transfer_state, _x.align_type))
        _x = val1.align_metadata
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = val1.pre_positioned_pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.Identify_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.update_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.response_data is None:
        self.response_data = None
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_code = str[start:end].decode('utf-8')
      else:
        self.error_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.response_data = []
      for i in range(0, length):
        val1 = cellctrl_control_msgs.msg.cell_work_stations()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.primary_id = str[start:end].decode('utf-8')
        else:
          val1.primary_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.unique_code = str[start:end].decode('utf-8')
        else:
          val1.unique_code = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.station_name = str[start:end].decode('utf-8')
        else:
          val1.station_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.cellcontroller_code = str[start:end].decode('utf-8')
        else:
          val1.cellcontroller_code = str[start:end]
        _v7 = val1.positioned_pose
        _v8 = _v7.position
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v9 = _v7.orientation
        _x = _v9
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 4
        (_x.mc_func_code, _x.transfer_code, _x.transfer_state, _x.align_type,) = _get_struct_4B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.align_metadata = str[start:end].decode('utf-8')
        else:
          val1.align_metadata = str[start:end]
        _v10 = val1.pre_positioned_pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Identify_id = str[start:end].decode('utf-8')
        else:
          val1.Identify_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.update_time = str[start:end].decode('utf-8')
        else:
          val1.update_time = str[start:end]
        self.response_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.response_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.response_data:
        _x = val1.primary_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.unique_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.station_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.cellcontroller_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v13 = val1.positioned_pose
        _v14 = _v13.position
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.orientation
        _x = _v15
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_4B().pack(_x.mc_func_code, _x.transfer_code, _x.transfer_state, _x.align_type))
        _x = val1.align_metadata
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v16 = val1.pre_positioned_pose
        _v17 = _v16.position
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = _v16.orientation
        _x = _v18
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.Identify_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.update_time
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.response_data is None:
        self.response_data = None
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_code = str[start:end].decode('utf-8')
      else:
        self.error_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.response_data = []
      for i in range(0, length):
        val1 = cellctrl_control_msgs.msg.cell_work_stations()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.primary_id = str[start:end].decode('utf-8')
        else:
          val1.primary_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.unique_code = str[start:end].decode('utf-8')
        else:
          val1.unique_code = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.station_name = str[start:end].decode('utf-8')
        else:
          val1.station_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.cellcontroller_code = str[start:end].decode('utf-8')
        else:
          val1.cellcontroller_code = str[start:end]
        _v19 = val1.positioned_pose
        _v20 = _v19.position
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v21 = _v19.orientation
        _x = _v21
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 4
        (_x.mc_func_code, _x.transfer_code, _x.transfer_state, _x.align_type,) = _get_struct_4B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.align_metadata = str[start:end].decode('utf-8')
        else:
          val1.align_metadata = str[start:end]
        _v22 = val1.pre_positioned_pose
        _v23 = _v22.position
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = _v22.orientation
        _x = _v24
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Identify_id = str[start:end].decode('utf-8')
        else:
          val1.Identify_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.update_time = str[start:end].decode('utf-8')
        else:
          val1.update_time = str[start:end]
        self.response_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class cell_work_stations_cmd(object):
  _type          = 'cellctrl_control_msgs/cell_work_stations_cmd'
  _md5sum = 'ed4e17f80f5c35699b21d211a45f2926'
  _request_class  = cell_work_stations_cmdRequest
  _response_class = cell_work_stations_cmdResponse
