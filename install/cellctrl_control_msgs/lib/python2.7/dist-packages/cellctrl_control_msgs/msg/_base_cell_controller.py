# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cellctrl_control_msgs/base_cell_controller.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class base_cell_controller(genpy.Message):
  _md5sum = "c1c018323d24ed001e8bac4437bffe2e"
  _type = "cellctrl_control_msgs/base_cell_controller"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string primary_id			# must-have,UUID : primary_key(system_id)		
string unique_code 		        # must-have,UNIQUE INDEX	
string base_name		   
string base_desc_TC 		 
string base_desc_SC 		 
string base_desc_E 
string map_filename 
float32 map_resolution	
uint32 map_width
uint32 map_height
geometry_msgs/Pose map_origin	 
string update_time			# must-have 	  		 

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['primary_id','unique_code','base_name','base_desc_TC','base_desc_SC','base_desc_E','map_filename','map_resolution','map_width','map_height','map_origin','update_time']
  _slot_types = ['string','string','string','string','string','string','string','float32','uint32','uint32','geometry_msgs/Pose','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       primary_id,unique_code,base_name,base_desc_TC,base_desc_SC,base_desc_E,map_filename,map_resolution,map_width,map_height,map_origin,update_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(base_cell_controller, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.primary_id is None:
        self.primary_id = ''
      if self.unique_code is None:
        self.unique_code = ''
      if self.base_name is None:
        self.base_name = ''
      if self.base_desc_TC is None:
        self.base_desc_TC = ''
      if self.base_desc_SC is None:
        self.base_desc_SC = ''
      if self.base_desc_E is None:
        self.base_desc_E = ''
      if self.map_filename is None:
        self.map_filename = ''
      if self.map_resolution is None:
        self.map_resolution = 0.
      if self.map_width is None:
        self.map_width = 0
      if self.map_height is None:
        self.map_height = 0
      if self.map_origin is None:
        self.map_origin = geometry_msgs.msg.Pose()
      if self.update_time is None:
        self.update_time = ''
    else:
      self.primary_id = ''
      self.unique_code = ''
      self.base_name = ''
      self.base_desc_TC = ''
      self.base_desc_SC = ''
      self.base_desc_E = ''
      self.map_filename = ''
      self.map_resolution = 0.
      self.map_width = 0
      self.map_height = 0
      self.map_origin = geometry_msgs.msg.Pose()
      self.update_time = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_desc_TC
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_desc_SC
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_desc_E
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.map_filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f2I7d().pack(_x.map_resolution, _x.map_width, _x.map_height, _x.map_origin.position.x, _x.map_origin.position.y, _x.map_origin.position.z, _x.map_origin.orientation.x, _x.map_origin.orientation.y, _x.map_origin.orientation.z, _x.map_origin.orientation.w))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.map_origin is None:
        self.map_origin = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_code = str[start:end].decode('utf-8')
      else:
        self.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_name = str[start:end].decode('utf-8')
      else:
        self.base_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_desc_TC = str[start:end].decode('utf-8')
      else:
        self.base_desc_TC = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_desc_SC = str[start:end].decode('utf-8')
      else:
        self.base_desc_SC = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_desc_E = str[start:end].decode('utf-8')
      else:
        self.base_desc_E = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_filename = str[start:end].decode('utf-8')
      else:
        self.map_filename = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.map_resolution, _x.map_width, _x.map_height, _x.map_origin.position.x, _x.map_origin.position.y, _x.map_origin.position.z, _x.map_origin.orientation.x, _x.map_origin.orientation.y, _x.map_origin.orientation.z, _x.map_origin.orientation.w,) = _get_struct_f2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.primary_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_desc_TC
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_desc_SC
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base_desc_E
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.map_filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f2I7d().pack(_x.map_resolution, _x.map_width, _x.map_height, _x.map_origin.position.x, _x.map_origin.position.y, _x.map_origin.position.z, _x.map_origin.orientation.x, _x.map_origin.orientation.y, _x.map_origin.orientation.z, _x.map_origin.orientation.w))
      _x = self.update_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.map_origin is None:
        self.map_origin = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.primary_id = str[start:end].decode('utf-8')
      else:
        self.primary_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_code = str[start:end].decode('utf-8')
      else:
        self.unique_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_name = str[start:end].decode('utf-8')
      else:
        self.base_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_desc_TC = str[start:end].decode('utf-8')
      else:
        self.base_desc_TC = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_desc_SC = str[start:end].decode('utf-8')
      else:
        self.base_desc_SC = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_desc_E = str[start:end].decode('utf-8')
      else:
        self.base_desc_E = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_filename = str[start:end].decode('utf-8')
      else:
        self.map_filename = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.map_resolution, _x.map_width, _x.map_height, _x.map_origin.position.x, _x.map_origin.position.y, _x.map_origin.position.z, _x.map_origin.orientation.x, _x.map_origin.orientation.y, _x.map_origin.orientation.z, _x.map_origin.orientation.w,) = _get_struct_f2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.update_time = str[start:end].decode('utf-8')
      else:
        self.update_time = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f2I7d = None
def _get_struct_f2I7d():
    global _struct_f2I7d
    if _struct_f2I7d is None:
        _struct_f2I7d = struct.Struct("<f2I7d")
    return _struct_f2I7d
