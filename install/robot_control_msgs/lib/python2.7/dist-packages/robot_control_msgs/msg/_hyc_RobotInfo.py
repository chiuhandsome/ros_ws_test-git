# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_control_msgs/hyc_RobotInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class hyc_RobotInfo(genpy.Message):
  _md5sum = "acf6224ebc0054473268910daf81c8c4"
  _type = "robot_control_msgs/hyc_RobotInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#################################################################
## Presents dynamic parameters of a hyc'srobot
#################################################################

Header header                           # the creation time
string robot_name                       # the name of the robot (used in preconditions and topics)
geometry_msgs/PoseWithCovariance pose   # the robots current pose within the frame related to the msgs header
#RoutePrecondition sync                  # the current position in the last received plan (-1 means none)
int32 current_route_segment      	# the segment nr of the route executed by the given robot
############### shape type of robot ###################################
int32 shape                             # the shape of the robots (see enums)
float32[] shape_variables               # shape variables to define width height, ...

int32 SHAPE_CIRCLE = 0                 # robot is in shape of a circle    ShapeVars
############### type of robot ###################################
int32   handler_type                    # the type of Handling module

int32 HANDLERTYPE_NA = 0                # undefined Handling module
int32 HANDLERTYPE_ROLLER = 1            # roller type of  Handling module
int32 HANDLERTYPE_ARM = 2            	# robot_arm of  Handling module
int32 HANDLERTYPE_PNP = 3            	# pick_place of  Handling module
############### type of target align ############################
#int32   align_type                      # the type of target align
#string  align_id                        # the id of target align (position-align management db)

#int32 ALIGNTYPE_NA = 0                  # undefined type of target align
#int32 ALIGNTYPE_DOCKER = 1              # docker type of target align
############### type of target align ############################
string  battery_id 			# the id of battery (battery management db included maintenance)
float32 battery_capacity		# unit: %
int32 battery_chargetime      
int32 battery_servicetime   		# using time caculation (uint: minute)
############### type of mode ####################################
int32   mode                            # the mode of operation

int32 MODE_NA = 0                   	# undefined mode
int32 MODE_IDLE = 1                 	# robot is idle
int32 MODE_SEGMENT_FOLLOWING = 2    	# robot is in mode segment following
int32 MODE_PICKUP = 3               	# robot is picking up goods
############### type of status ####################################
int32   status                          # the status of the robot
string  error_code 			# the error_code of robot (error_code management db included its history)

int32 STATUS_NONE = -1            	# robot is not_ready (stm not ready ...)
int32 STATUS_DRIVING = 0            	# robot is driving
int32 STATUS_STOPPED = 1            	# robot has stopped
int32 STATUS_DONE = 2               	# robot has finished its last job
int32 STATUS_BROKEN = 3             	# robot is broken and not ready for any task

############### order's information ################################
int32   good_id                         # the good id attached to the robot

int32 GOOD_EMPTY = -1               	# no goods attached
int32 GOOD_NA = -2                  	# undefined good
############### order's information ################################
int32   order_id                        # the order id scheduled to this robot (-1: none)
int32   order_status                    # the status of the assigned order

int32 ORDER_NONE = 0                	# no order assigned
int32 ORDER_APPROACH = 1            	# the robot approaches the first station of the order
int32 ORDER_PICKUP = 2              	# the robot picks up a good at the station
int32 ORDER_TRANSPORT = 3          	# the robot currently transports a good from one station to another
int32 ORDER_DROP = 4                	# the robot drops a good at the last station of its order, finishing the order
int32 ORDER_FINSIH = 5              	# the robot drops a good at the last station of its order, finishing the order





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  SHAPE_CIRCLE = 0
  HANDLERTYPE_NA = 0
  HANDLERTYPE_ROLLER = 1
  HANDLERTYPE_ARM = 2
  HANDLERTYPE_PNP = 3
  MODE_NA = 0
  MODE_IDLE = 1
  MODE_SEGMENT_FOLLOWING = 2
  MODE_PICKUP = 3
  STATUS_NONE = -1
  STATUS_DRIVING = 0
  STATUS_STOPPED = 1
  STATUS_DONE = 2
  STATUS_BROKEN = 3
  GOOD_EMPTY = -1
  GOOD_NA = -2
  ORDER_NONE = 0
  ORDER_APPROACH = 1
  ORDER_PICKUP = 2
  ORDER_TRANSPORT = 3
  ORDER_DROP = 4
  ORDER_FINSIH = 5

  __slots__ = ['header','robot_name','pose','current_route_segment','shape','shape_variables','handler_type','battery_id','battery_capacity','battery_chargetime','battery_servicetime','mode','status','error_code','good_id','order_id','order_status']
  _slot_types = ['std_msgs/Header','string','geometry_msgs/PoseWithCovariance','int32','int32','float32[]','int32','string','float32','int32','int32','int32','int32','string','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,robot_name,pose,current_route_segment,shape,shape_variables,handler_type,battery_id,battery_capacity,battery_chargetime,battery_servicetime,mode,status,error_code,good_id,order_id,order_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hyc_RobotInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot_name is None:
        self.robot_name = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseWithCovariance()
      if self.current_route_segment is None:
        self.current_route_segment = 0
      if self.shape is None:
        self.shape = 0
      if self.shape_variables is None:
        self.shape_variables = []
      if self.handler_type is None:
        self.handler_type = 0
      if self.battery_id is None:
        self.battery_id = ''
      if self.battery_capacity is None:
        self.battery_capacity = 0.
      if self.battery_chargetime is None:
        self.battery_chargetime = 0
      if self.battery_servicetime is None:
        self.battery_servicetime = 0
      if self.mode is None:
        self.mode = 0
      if self.status is None:
        self.status = 0
      if self.error_code is None:
        self.error_code = ''
      if self.good_id is None:
        self.good_id = 0
      if self.order_id is None:
        self.order_id = 0
      if self.order_status is None:
        self.order_status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.robot_name = ''
      self.pose = geometry_msgs.msg.PoseWithCovariance()
      self.current_route_segment = 0
      self.shape = 0
      self.shape_variables = []
      self.handler_type = 0
      self.battery_id = ''
      self.battery_capacity = 0.
      self.battery_chargetime = 0
      self.battery_servicetime = 0
      self.mode = 0
      self.status = 0
      self.error_code = ''
      self.good_id = 0
      self.order_id = 0
      self.order_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.pose.covariance))
      _x = self
      buff.write(_get_struct_2i().pack(_x.current_route_segment, _x.shape))
      length = len(self.shape_variables)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.shape_variables))
      _x = self.handler_type
      buff.write(_get_struct_i().pack(_x))
      _x = self.battery_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f4i().pack(_x.battery_capacity, _x.battery_chargetime, _x.battery_servicetime, _x.mode, _x.status))
      _x = self.error_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.good_id, _x.order_id, _x.order_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.current_route_segment, _x.shape,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.shape_variables = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.handler_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_id = str[start:end].decode('utf-8')
      else:
        self.battery_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.battery_capacity, _x.battery_chargetime, _x.battery_servicetime, _x.mode, _x.status,) = _get_struct_f4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_code = str[start:end].decode('utf-8')
      else:
        self.error_code = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.good_id, _x.order_id, _x.order_status,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w))
      buff.write(self.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.current_route_segment, _x.shape))
      length = len(self.shape_variables)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.shape_variables.tostring())
      _x = self.handler_type
      buff.write(_get_struct_i().pack(_x))
      _x = self.battery_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f4i().pack(_x.battery_capacity, _x.battery_chargetime, _x.battery_servicetime, _x.mode, _x.status))
      _x = self.error_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.good_id, _x.order_id, _x.order_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 8
      (_x.current_route_segment, _x.shape,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.shape_variables = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.handler_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery_id = str[start:end].decode('utf-8')
      else:
        self.battery_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.battery_capacity, _x.battery_chargetime, _x.battery_servicetime, _x.mode, _x.status,) = _get_struct_f4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_code = str[start:end].decode('utf-8')
      else:
        self.error_code = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.good_id, _x.order_id, _x.order_status,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_f4i = None
def _get_struct_f4i():
    global _struct_f4i
    if _struct_f4i is None:
        _struct_f4i = struct.Struct("<f4i")
    return _struct_f4i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
