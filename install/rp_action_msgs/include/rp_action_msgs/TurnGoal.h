// Generated by gencpp from file rp_action_msgs/TurnGoal.msg
// DO NOT EDIT!


#ifndef RP_ACTION_MSGS_MESSAGE_TURNGOAL_H
#define RP_ACTION_MSGS_MESSAGE_TURNGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rp_action_msgs
{
template <class ContainerAllocator>
struct TurnGoal_
{
  typedef TurnGoal_<ContainerAllocator> Type;

  TurnGoal_()
    : target_angle(0.0)
    , absolute_relative_flag()
    , max_ang_vel(0.0)
    , name()  {
    }
  TurnGoal_(const ContainerAllocator& _alloc)
    : target_angle(0.0)
    , absolute_relative_flag(_alloc)
    , max_ang_vel(0.0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef float _target_angle_type;
  _target_angle_type target_angle;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _absolute_relative_flag_type;
  _absolute_relative_flag_type absolute_relative_flag;

   typedef float _max_ang_vel_type;
  _max_ang_vel_type max_ang_vel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::rp_action_msgs::TurnGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rp_action_msgs::TurnGoal_<ContainerAllocator> const> ConstPtr;

}; // struct TurnGoal_

typedef ::rp_action_msgs::TurnGoal_<std::allocator<void> > TurnGoal;

typedef boost::shared_ptr< ::rp_action_msgs::TurnGoal > TurnGoalPtr;
typedef boost::shared_ptr< ::rp_action_msgs::TurnGoal const> TurnGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rp_action_msgs::TurnGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rp_action_msgs::TurnGoal_<ContainerAllocator1> & lhs, const ::rp_action_msgs::TurnGoal_<ContainerAllocator2> & rhs)
{
  return lhs.target_angle == rhs.target_angle &&
    lhs.absolute_relative_flag == rhs.absolute_relative_flag &&
    lhs.max_ang_vel == rhs.max_ang_vel &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rp_action_msgs::TurnGoal_<ContainerAllocator1> & lhs, const ::rp_action_msgs::TurnGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rp_action_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rp_action_msgs::TurnGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rp_action_msgs::TurnGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rp_action_msgs::TurnGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60ef2f373639ce8732e5a855ffe7ddfa";
  }

  static const char* value(const ::rp_action_msgs::TurnGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60ef2f373639ce87ULL;
  static const uint64_t static_value2 = 0x32e5a855ffe7ddfaULL;
};

template<class ContainerAllocator>
struct DataType< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rp_action_msgs/TurnGoal";
  }

  static const char* value(const ::rp_action_msgs::TurnGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"# target_angle [DEG] \n"
"float32 target_angle\n"
"# flag ABS/REL\n"
"string absolute_relative_flag\n"
"# max angular velocity [DEG/s]\n"
"float32 max_ang_vel\n"
"#robot name\n"
"string name\n"
;
  }

  static const char* value(const ::rp_action_msgs::TurnGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_angle);
      stream.next(m.absolute_relative_flag);
      stream.next(m.max_ang_vel);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurnGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rp_action_msgs::TurnGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rp_action_msgs::TurnGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_angle: ";
    Printer<float>::stream(s, indent + "  ", v.target_angle);
    s << indent << "absolute_relative_flag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.absolute_relative_flag);
    s << indent << "max_ang_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_ang_vel);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RP_ACTION_MSGS_MESSAGE_TURNGOAL_H
